include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (WoL)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libWoLC_ge_WC_Event_WC_EventFirst = 0;
const int libWoLC_ge_WC_Event_CampaignDataReset = 1;
const int libWoLC_ge_WC_Event_CampaignMapTransition = 2;
const int libWoLC_ge_WC_Event_CampaignArchivesSynced = 3;
const int libWoLC_ge_WC_Event_UIArchivesQuit = 4;
const int libWoLC_ge_WC_Event_UIArchivesPlayMission = 5;
const int libWoLC_ge_WC_Event_UIArchivesPlayScene = 6;
const int libWoLC_ge_WC_Event_UIMissionQuit = 7;
const int libWoLC_ge_WC_Event_UIMissionLaunch = 8;
const int libWoLC_ge_WC_Event_UIArmoryQuit = 9;
const int libWoLC_ge_WC_Event_UIMercenaryQuit = 10;
const int libWoLC_ge_WC_Event_UILaboratoryQuit = 11;
const int libWoLC_ge_WC_Event_UIBottomBarRoomChange = 12;
const int libWoLC_ge_WC_Event_WC_EventLast = 13;
const int libWoLC_ge_MissionStatus_Locked = 0;
const int libWoLC_ge_MissionStatus_Available = 1;
const int libWoLC_ge_MissionStatus_Completed = 2;
const int libWoLC_ge_MissionCountOptions_Locked = 0;
const int libWoLC_ge_MissionCountOptions_Available = 1;
const int libWoLC_ge_MissionCountOptions_Completed = 2;
const int libWoLC_ge_MissionCountOptions_All = 3;
const int libWoLC_ge_MissionObjectiveState_Undiscovered = 0;
const int libWoLC_ge_MissionObjectiveState_Available = 1;
const int libWoLC_ge_MissionObjectiveState_Completed = 2;
const int libWoLC_ge_MissionObjectiveState_Failed = 3;
const int libWoLC_ge_ConscriptionUnitState_Locked = 0;
const int libWoLC_ge_ConscriptionUnitState_Available = 1;
const int libWoLC_ge_ConscriptionUnitState_Purchased = 2;
const int libWoLC_ge_ConscriptionUnitState_None = 3;
string libWoLC_ge_ConscriptionUnitState_Ident (int lp_val);
const int libWoLC_ge_ConscriptionActionType_None = 0;
const int libWoLC_ge_ConscriptionActionType_Unlock = 1;
const int libWoLC_ge_ConscriptionActionType_Lock = 2;
const int libWoLC_ge_ConscriptionActionType_Buy = 3;
const int libWoLC_ge_ConscriptionActionType_Refund = 4;
const int libWoLC_ge_ConscriptionActionType_Override = 5;
const int libWoLC_ge_ConscriptionActionType_Save = 6;
const int libWoLC_ge_ConscriptionActionType_Load = 7;
const int libWoLC_ge_ConscriptionActionType_SaveAll = 8;
const int libWoLC_ge_ConscriptionActionType_LoadAll = 9;
string libWoLC_ge_ConscriptionActionType_Ident (int lp_val);
const int libWoLC_ge_ConscriptionCheatToken_None = 0;
const int libWoLC_ge_ConscriptionCheatToken_ConscriptionTokenIndex = 1;
const int libWoLC_ge_ConscriptionCheatToken_ActionTokenIndex = 2;
const int libWoLC_ge_ConscriptionCheatToken_UnitTokenStartIndex = 3;
const int libWoLC_ge_WC_PerkState_Locked = 0;
const int libWoLC_ge_WC_PerkState_Unlocked = 1;
const int libWoLC_ge_WC_PerkState_Active = 2;
const int libWoLC_ge_WC_PerkState_Hidden = 3;
const int libWoLC_ge_MissionCondition_Sucessful = 0;
const int libWoLC_ge_MissionCondition_Simulation = 1;
const int libWoLC_ge_StoryDataType_StoryDataTypeNone = 0;
const int libWoLC_ge_StoryDataType_StoryDataTypeArmyCategory = 1;
const int libWoLC_ge_StoryDataType_StoryDataTypeArmyUnit = 2;
const int libWoLC_ge_StoryDataType_StoryDataTypeArmyUpgrade = 3;
const int libWoLC_ge_StoryDataType_StoryDataTypeHeroAbilityCategory = 4;
const int libWoLC_ge_StoryDataType_StoryDataTypeHeroAbility = 5;
const int libWoLC_ge_StoryDataType_StoryDataTypeHeroStat = 6;
const int libWoLC_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libWoLC_ge_VolumeChannelModeCampaign_Speech = 1;
const int libWoLC_ge_VolumeChannelModeCampaign_Game = 2;
const int libWoLC_ge_VolumeChannelModeCampaign_Victory = 3;
const int libWoLC_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libWoLC_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libWoLC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libWoLC_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libWoLC_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libWoLC_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libWoLC_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libWoLC_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libWoLC_ge_VolumeChannelModeCampaign_VictoryInstant = 12;

// Constants
const int libWoLC_gv_pCC_DifficultyCount = 4;
const string libWoLC_gv_wCC_EVENT_MISSIONSTART = "WC_MISSIONSTART";
const string libWoLC_gv_wCC_ArmyUpgradePurchasedKey = "WS_ArmyUpgradePurchased_";
const string libWoLC_gv_wCC_ArmyCategoryStateKey = "WS_ArmyCategoryState_";
const string libWoLC_gv_pCC_ArmyUnitStateKey = "WS_ArmyUnitState_";
const string libWoLC_gv_wCC_MercenaryPurchasedKey = "WS_MercenaryPurchased_";
const int libWoLC_gv_pCC_HelpUnitPanel_EnabledUnitTypeCountMax = 100;
const int libWoLC_gv_wCC_CampaignWoLIndex = 1;
const int libWoLC_gv_wCC_DataVersion = 1;
const string libWoLC_gv_wC_StoryBankName = "WStory";
const string libWoLC_gv_wC_StoryBankName2 = "WStorySimulation";
const string libWoLC_gv_wC_GameUIDataTableConnector = "&%&";

// Variable Declarations
bool libWoLC_gv_wC_AchievementsEnabled;
int libWoLC_gv_wC_AchievementPosition;
int libWoLC_gv_wC_AchievementsDisplayed;
bool libWoLC_gv_wC_AchievementDebugToastSuppressed;
int libWoLC_gv_pCX_CampaignDifficulty;
trigger[51] libWoLC_gv_wC_EventCallback;
bool libWoLC_gv_wC_EventIsRunning;
string[51][3] libWoLC_gv_wC_EventParameter;
trigger libWoLC_gv_zS_FootageRecordingCallback;
string[31] libWoLC_gv_wC_MissionCompleted;
int libWoLC_gv_pSX_MissionObjRewardsEarnedCurrent;
int libWoLC_gv_wC_MovieRecordingCount;
string libWoLC_gv_wC_CutsceneTimestamp;
int libWoLC_gv_wC_CurrentCampaignCutscene;
bool libWoLC_gv_wC_CampaignCutsceneSkippable;
int libWoLC_gv_wC_CampaignCutsceneDialog;
string libWoLC_gv_wC_PlaySceneCurrentScene;
int libWoLC_gv_wC_SceneStatEvent;
bool libWoLC_gv_wC_ApplyingCampaignTech;
bool libWoLC_gv_wC_CampaignTechApplied;
int libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount;
string[libWoLC_gv_pCC_HelpUnitPanel_EnabledUnitTypeCountMax + 1] libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypes;
string libWoLC_gv_wC_CurrentMap;
string libWoLC_gv_wCX_CurrentLocation;
bool libWoLC_gv_wC_InStoryMode;
bool libWoLC_gv_pCX_DebugProgress;
bool libWoLC_gv_wC_InCompletedCampaign;
int libWoLC_gv_wCX_MapInstanceID;
bool libWoLC_gv_wC_LoadingComplete;
bool libWoLC_gv_wC_LoadingComplete2;
bool libWoLC_gv_wCX_IsSimulation;
bool libWoLC_gv_wCX_IsVictoryPlayAgain;
string libWoLC_gv_wCX_LastMap;
bool libWoLC_gv_wCX_LastMapSuccess;
string libWoLC_gv_wCX_LastMission;
bool libWoLC_gv_wCX_LastMissionSuccess;
bool libWoLC_gv_wCX_LastMissionSimulation;
string libWoLC_gv_wCX_LastSuccessfulMission;
string libWoLC_gv_wCX_LastLocation;
bank libWoLC_gv_wC_ArmyTechBank;
bank libWoLC_gv_wC_ArchivesBank;
string libWoLC_gv_wC_ArchiveLotVBankName;
bool libWoLC_gv_wC_ArchivesReloading;
bool libWoLC_gv_wC_ArchivesVisited;
bool libWoLC_gv_wC_InLoadedMission;
string libWoLC_gv_wC_CampaignWoLBankName;
string libWoLC_gv_wC_CampaignWoLBankNameLegacy;
bank libWoLC_gv_wC_CampaignBank;
bank libWoLC_gv_wC_CampaignBank2;
bank libWoLC_gv_wC_StoryBank;
int libWoLC_gv_wC_CampaignDataBackup_MissionBestTime;
string libWoLC_gv_pS_StorySimulationMission;
bank libWoLC_gv_pS_StorySimulationOriginalBank;
string[51] libWoLC_gv_wC_PersistentUserTypes;
int libWoLC_gv_wC_PersistentUserTypeCount;
int libWoLC_gv_wC_StatEventLastCampaign;
int libWoLC_gv_wC_StatTargetingModeAborts;
timer libWoLC_gv_wC_StatSoATimeEnergyCapped;
bool libWoLC_gv_wC_StatSoAEnergyCapped;
bool libWoLC_gv_wC_TimeAIPaused;
int libWoLC_gv_wC_TimeAIOverrideCount;
bool libWoLC_gv_wC_TimeMissionPaused;
int libWoLC_gv_wC_WorldCoverDlg;
int libWoLC_gv__FadeDialog;
int libWoLC_gv__FadeImage;
bool libWoLC_gv_pCX_UpgradesTaught;
bool libWoLC_gv_wC_VolumeChannelModeInSpeech;
bool libWoLC_gv_wC_VolumeChannelModeInLowHP;

// Function Declarations
void libWoLC_gf_CampaignAwardAchievement (string lp_achievement);
void libWoLC_gf_SetAchievementTermQuantityCampaign (string lp_term, int lp_quantity);
void libWoLC_gf_EnableDisableAchievementsCampaign (bool lp_enable);
bool libWoLC_gf_AchievementsAreDisabledCampaign ();
void libWoLC_gf_WC_AchievementCategorySet ();
void libWoLC_gf_WC_AchievementAwardEarned ();
void libWoLC_gf_WC_AchievementAwardMission (string lp_completedMission);
void libWoLC_gf_WC_AchievementAwardArmy ();
int libWoLC_gf_WC_DifficultyIndex (int lp_difficulty);
int libWoLC_gf_WC_DifficultyFromIndex (int lp_index);
void libWoLC_gf_WC_SetCampaignDifficulty (int lp_difficulty);
void libWoLC_gf_DispatchCampaignEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption);
void libWoLC_gf_RegisterCampaignEvent (int lp_event, trigger lp_callback);
string libWoLC_gf_CampaignEventParameter (int lp_event, int lp_index);
void libWoLC_gf_CampaignMissionStarts (trigger t);
void libWoLC_gf_RegisterFootageRecording (trigger lp_callback);
void libWoLC_gf_ZS_FootageRecording ();
void libWoLC_gf_PS_UpdatePlanetData ();
void libWoLC_gf_WC_SetLocationActive (string lp_planet);
string libWoLC_gf_WC_LocationUserData (string lp_planet);
string libWoLC_gf_WC_LocationDataString (string lp_planet);
string libWoLC_gf_WC_StoryMapBankID2 (string lp_map);
string libWoLC_gf_WC_LocationLoadingImage (string lp_loadingLocation);
text libWoLC_gf_WC_LocationName (string lp_location);
string libWoLC_gf_WC_LocationPlanetModel (string lp_location);
string libWoLC_gf_WC_LocationBackgroundModel (string lp_location);
void libWoLC_gf_SetPlanetAvailable (string lp_planet, bool lp_available);
text libWoLC_gf_StoryPlanetName (string lp_planet);
bool libWoLC_gf_StoryPlanetIsAvailable (string lp_planet);
bool libWoLC_gf_MissionAvailableOnPlanet (string lp_planet);
string libWoLC_gf_CurrentLocation ();
string libWoLC_gf_WC_LocationCutsceneFilter (string lp_location);
string libWoLC_gf_CurrentMap ();
string libWoLC_gf_WC_CampaignMapLoadingScreenImage (string lp_map);
string libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage (string lp_map);
string libWoLC_gf_WC_CampaignMapMissionArchiveBackgroundImage (string lp_map);
string libWoLC_gf_WC_CampaignMapMissionArchiveBackgroundImage2 (string lp_map);
bool libWoLC_gf_WC_CampaignMapTypeCheck (string lp_map, int lp_mapType);
text libWoLC_gf_WC_CampaignMapDescription (string lp_map);
string libWoLC_gf_WC_CampaignMapFile (string lp_map);
text libWoLC_gf_WC_CampaignMapName (string lp_map);
text libWoLC_gf_WC_CampaignMapPrimaryObjective (string lp_map);
text libWoLC_gf_WC_CampaignMapHelp (string lp_map);
text libWoLC_gf_StoryMapHelp2 (string lp_map);
string libWoLC_gf_WC_CampaignMapContactPortrait (string lp_map);
string libWoLC_gf_WC_CampaignMapContactActor (string lp_map);
text libWoLC_gf_WC_CampaignMapContactName (string lp_map);
text libWoLC_gf_WC_CampaignMapContactTitle (string lp_map);
int libWoLC_gf_WC_MissionRewardsBonusPossible (string lp_map, string lp_type);
int libWoLC_gf_WC_MissionRewardsBonusEarned (string lp_map, string lp_type);
int libWoLC_gf_WC_MissionRewardsCredits (string lp_map);
int libWoLC_gf_WC_MissionRewardsProtoss (string lp_map);
int libWoLC_gf_WC_MissionRewardsZerg (string lp_map);
bool libWoLC_gf_WC_MissionRewardsDynamicArmyUnit (string lp_mission);
bool libWoLC_gf_WC_MissionVisibleInUI (string lp_mission);
string libWoLC_gf_StoryMapPlanet (string lp_map);
int libWoLC_gf_MissionStatus (string lp_mission);
int libWoLC_gf_MissionStatusAge (string lp_mission, int lp_status);
int libWoLC_gf_SplitMissionStatusAge (string lp_mission, string lp_mission2, int lp_status);
bool libWoLC_gf_MissionStatusCheck (string lp_mission, int lp_status);
text libWoLC_gf_MissionDebriefingText (string lp_mission);
int libWoLC_gf_NumberOfMissions (int lp_options);
int libWoLC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty);
string libWoLC_gf_WC_MapUserDataInstance (string lp_map);
string libWoLC_gf_WC_MapDataFromUserDataInstance (string lp_map);
string libWoLC_gf_WC_StoryMapBankID (string lp_map);
string libWoLC_gf_MissionArmyCategoryUnlocked (string lp_mission);
string libWoLC_gf_MissionArmyCategoryUnlocked2 (string lp_mission);
int libWoLC_gf_MissionRewardTotalEarned (string lp_mission, string lp_type);
int libWoLC_gf_MissionRewardTotal (string lp_mission, string lp_type);
bool libWoLC_gf_WC_MissionisInstallation (string lp_mission);
bool libWoLC_gf_WC_CampaignMapIsZeratul (string lp_map);
bool libWoLC_gf_WC_SecretMissionFound ();
bool libWoLC_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty);
int libWoLC_gf_WC_CompletedMissionCountOnDifficulty (int lp_difficulty);
void libWoLC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty);
void libWoLC_gf_StoryMapSwitch (string lp_nextMap);
void libWoLC_gf_UpdateMissionFlow ();
void libWoLC_gf_WC_UpdateCompletedMissionArray ();
void libWoLC_gf_WC_SetCurrentMap (string lp_map);
void libWoLC_gf_WC_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age);
void libWoLC_gf_WC_IncreaseMissionAge (string lp_mission);
void libWoLC_gf_WC_CompleteMission (string lp_mission);
void libWoLC_gf_WC_UpdateSimulationMissionAges (string lp_simulationMap);
void libWoLC_gf_WC_MarkMissionAsStatus (string lp_mission, int lp_status);
void libWoLC_gf_WC_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition);
void libWoLC_gf_WC_SetMissionCompletionBestTime (string lp_mission, int lp_difficulty, int lp_time);
void libWoLC_gf_WC_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation);
void libWoLC_gf_WC_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank);
void libWoLC_gf_WC_MissionObjectiveSpecialDataSet (string lp_objective, text lp_special);
void libWoLC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress);
void libWoLC_gf_PS_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress);
void libWoLC_gf_PS_MissionObjectiveArchiveProgressSet (string lp_objective, int lp_progress);
text libWoLC_gf_MissionObjectiveDescription (string lp_objective);
bool libWoLC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool libWoLC_gf_MissionObjectiveIsPrimary (string lp_objective);
text libWoLC_gf_MissionObjectiveName (string lp_objective);
int libWoLC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type);
int libWoLC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type);
int libWoLC_gf_MissionObjectiveItemCount (string lp_objective);
int libWoLC_gf_MissionObjectiveProgress (string lp_objective);
text libWoLC_gf_MissionObjectiveSpecial (string lp_objective);
int libWoLC_gf_MissionObjectiveRewards (string lp_objective, string lp_type);
int libWoLC_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type);
text libWoLC_gf_PS_CampaignObjectiveBonusText (string lp_objective);
int libWoLC_gf_PS_GetObjectiveForData (string lp_objectiveData);
string libWoLC_gf_PS_ObjectiveUserDataInstance (string lp_objective);
int libWoLC_gf_PS_MissionObjectivePreviousProgress (string lp_objective);
int libWoLC_gf_PS_MissionObjectiveArchiveProgress (string lp_objective);
int libWoLC_gf_PS_GetObjectiveTypeInteger (string lp_objective);
bool libWoLC_gf_PS_GetObjectiveTypeBoolean (string lp_objective);
string libWoLC_gf_PS_ObjectiveTableString (string lp_objective);
bool libWoLC_gf_PS_ObjectiveCountsDown (string lp_objective);
void libWoLC_gf_WC_MovieStartRecording (string lp_fileName);
void libWoLC_gf_WC_MovieStopRecording ();
void libWoLC_gf_DisplayConversationTimestamp (string lp_conversation);
void libWoLC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait);
void libWoLC_gf_HaltTimestamp ();
void libWoLC_gf_WC_DisplayCinematicTimestamp (string lp_scene);
string libWoLC_gf_StorySceneMovie (string lp_scene);
string libWoLC_gf_StorySceneCutscene (string lp_scene);
trigger libWoLC_gf_StorySceneCallback (string lp_scene);
void libWoLC_gf_RegisterSceneCallback (string lp_scene, trigger lp_callback);
text libWoLC_gf_StorySceneName (string lp_scene);
bool libWoLC_gf_StoryScenePlayed (string lp_scene);
void libWoLC_gf_SetStoryScenePlayed (string lp_scene, bool lp_played);
void libWoLC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip);
void libWoLC_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip);
void libWoLC_gf_CampaignStopCutscene ();
void libWoLC_gf_PlayCinematic (string lp_scene, bool lp_animatic);
void libWoLC_gf_WC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait);
int libWoLC_gf_WC_TechConstant (string lp_constant);
string libWoLC_gf_WC_ArmyCategoryUpgrade (string lp_armyCategory, int lp_index);
string libWoLC_gf_WC_TechUpgradeOfArmyUpgrade (string lp_armyUpgrade);
string libWoLC_gf_WC_ArmyUpgradeState (string lp_armyUpgrade);
text libWoLC_gf_WC_ArmyUpgradeName (string lp_armyUpgrade);
text libWoLC_gf_WC_ArmyUpgradeDescription (string lp_armyUpgrade);
text libWoLC_gf_WC_ArmyUpgradeTooltip (string lp_armyUpgrade);
int libWoLC_gf_WC_ArmyUpgradeCost (string lp_armyUpgrade);
int libWoLC_gf_WC_ArmyUpgradeRequiredMissions (string lp_armyUpgrade);
string libWoLC_gf_WC_ArmyUpgradeIcon (string lp_armyUpgrade);
string libWoLC_gf_WC_ArmyUpgradeMovie (string lp_armyUpgrade);
string libWoLC_gf_WC_ArmyUpgradeImage (string lp_armyUpgrade);
bool libWoLC_gf_WC_ArmyUpgradePurchased (string lp_armyUpgrade);
void libWoLC_gf_WC_ArmyUpgradeSetPurchased (string lp_armyUpgrade, bool lp_purchased);
void libWoLC_gf_WC_ArmyUpgradeResetAll ();
string libWoLC_gf_WC_TechUnitOfArmyCategory (string lp_armyCategory);
string libWoLC_gf_WC_ArmyCategoryOfTechUnit (string lp_techUnit);
text libWoLC_gf_WC_ArmyCategoryName (string lp_armyCategory);
text libWoLC_gf_WC_ArmyCategoryDescription (string lp_armyCategory);
text libWoLC_gf_WC_ArmyCategoryDescriptionShort (string lp_armyCategory);
text libWoLC_gf_WC_ArmyCategoryTitle (string lp_armyCategory);
text libWoLC_gf_WC_ArmyCategoryUnitDescription (string lp_armyCategory);
string libWoLC_gf_WC_ArmyCategoryIcon (string lp_armyCategory);
string libWoLC_gf_WC_ArmyCategoryUnitType (string lp_armyCategory);
string libWoLC_gf_WC_ArmyCategoryUpgradeState (string lp_armyUpgrade);
string libWoLC_gf_WC_ArmyCategoryGroup (string lp_armyCategory);
text libWoLC_gf_WC_ArmyCategoryGroupName (string lp_Group);
string libWoLC_gf_WC_ArmyCategoryGroupUpgradeState (string lp_Group);
int libWoLC_gf_WC_ArmyCategoryState (string lp_armyCategory);
string libWoLC_gf_WC_ArmyStringFromUnitType (string lp_unitType);
string libWoLC_gf_WC_ArmyStringFromArmyCategory (string lp_armyCategory);
string libWoLC_gf_WC_ArmyStringFromArmyUnit (string lp_armyUnit);
void libWoLC_gf_WC_SetArmyCategoryState (string lp_armyCategory, int lp_state);
bool libWoLC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state);
string libWoLC_gf_EnabledUnitTypeforArmyCategory (string lp_armyCategory);
string libWoLC_gf_WC_ArmyCategoryPurchasedUnit (string lp_armyCategory);
void libWoLC_gf_WC_UpdateArmyCategoryStates (int lp_player);
bool libWoLC_gf_WC_ArmyCategoryUsedInUI (string lp_armyCategory);
bool libWoLC_gf_WC_ArmyCategoryToastShown (string lp_armyCategory);
void libWoLC_gf_WC_SetArmyCategoryToastShown (string lp_armyCategory, bool lp_shown);
bool libWoLC_gf_ArmyHasUnusedTech ();
int libWoLC_gf_NumberOfUnupgradedArmyCategories ();
string libWoLC_gf_WC_StoryArmyUnitUnitType (string lp_armyUnit);
string libWoLC_gf_WC_ArmyUnitOfTechUnit (string lp_armyUnit);
text libWoLC_gf_WC_ArmyUnitTitle (string lp_armyUnit);
string libWoLC_gf_WC_TechUnitOfArmyUnit (string lp_armyUnit);
string libWoLC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index);
text libWoLC_gf_StoryArmyUnitName (string lp_armyUnit);
text libWoLC_gf_WC_ArmyUnitDescription (string lp_armyUnit);
string libWoLC_gf_WC_ArmyUnitIcon (string lp_armyCategory);
string libWoLC_gf_WC_ArmyUnitMovie (string lp_armyUnit);
bool libWoLC_gf_WC_ArmyUnitStartsLocked (string lp_armyUnit);
string libWoLC_gf_WC_ArmyUnitRequiredMission (string lp_armyUnit);
string libWoLC_gf_WC_ArmyCategoryOfArmyUnit (string lp_armyUnit);
string libWoLC_gf_WC_ArmyUnitSkin (string lp_armyCategory);
int libWoLC_gf_WC_StoryArmyUnitState (string lp_armyUnit);
bool libWoLC_gf_WC_StoryArmyUnitState2 (string lp_armyUnit);
void libWoLC_gf_WC_SetArmyUnitState (string lp_armyUnit, int lp_state);
void libWoLC_gf_WC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new);
void libWoLC_gf_WC_UpdateArmyUnitStates ();
void libWoLC_gf_WC_SaveArmyCategoryToBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_SaveArmyUnitsToBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_SaveArmyUpgradesToBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadArmyUnitsFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadArmyUpgradesFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_ApplyArmyTech (int lp_player);
void libWoLC_gf_WC_ResetArmyTech ();
int libWoLC_gf_ParseConscriptionUnitState (int lp_stateValue);
int libWoLC_gf_ParseConscriptionUnitStateString (string lp_stateName);
int libWoLC_gf_ParseConscriptionActionTypeString (string lp_actionTypeName);
string libWoLC_gf_UnlockConscription (string lp_conscription);
string libWoLC_gf_LockConscription (string lp_conscription);
string libWoLC_gf_BuyConscription (string lp_conscription);
string libWoLC_gf_RefundConscription (string lp_conscription);
string libWoLC_gf_OverrideConscriptionState (string lp_unitType, int lp_state);
bool libWoLC_gf_ConscriptionPurchased (string lp_conscription);
int libWoLC_gf_ConscriptionPrice (string lp_conscription);
string libWoLC_gf_GetConscriptionEntryForUnit (string lp_unitType);
string libWoLC_gf_UnlockConscriptionUnit (string lp_unitType);
string libWoLC_gf_LockConscriptionUnit (string lp_unitType);
string libWoLC_gf_BuyConscriptionUnit (string lp_unitType);
string libWoLC_gf_RefundConscriptionUnit (string lp_unitType);
string libWoLC_gf_ExecuteConscriptionActionString (string lp_actionTypeName, string lp_unitTypeName, string lp_conscriptionStateName, string lp_sectionName);
string libWoLC_gf_ExecuteConscriptionAction (int lp_actionType, string lp_unitType);
string libWoLC_gf_ConscriptionCheatHandler (string lp_inputWords);
string libWoLC_gf_ValidConscriptionActionList ();
void libWoLC_gf_SaveAllConscriptionsToCampaignMapBank (string lp_map);
void libWoLC_gf_SaveAllConscriptionsToCampaignBank (string lp_section);
void libWoLC_gf_SaveAllConscriptionsToBank (bank lp_bank, string lp_section);
void libWoLC_gf_LoadAllConscriptionsFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_WriteConscriptionToBank (bank lp_bank, string lp_section, string lp_conscription);
void libWoLC_gf_LoadConscriptionFromBank (bank lp_bank, string lp_section, string lp_conscription);
void libWoLC_gf_SetConscriptionState (string lp_conscription, int lp_state);
void libWoLC_gf_SetConscriptionUnitState (string lp_unitType, int lp_state);
void libWoLC_gf_ApplyAllConscriptionsToTechTree ();
void libWoLC_gf_ApplyConscriptionToTechTree (string lp_conscription);
void libWoLC_gf_UnlockConscriptionsByBankCondition ();
void libWoLC_gf_UnlockConscriptionByBankCondition (string lp_conscription);
bool libWoLC_gf_ConscriptionUnlocksByBankCondition (string lp_conscription);
void libWoLC_gf_UnlockConscriptionsByMap (string lp_map);
void libWoLC_gf_UnlockConscriptionByMap (string lp_conscription, string lp_map);
bool libWoLC_gf_ConscriptionUnlocksByMap (string lp_conscription);
void libWoLC_gf_UnlockConscriptionsByMissionNumber (int lp_missionCount);
void libWoLC_gf_UnlockConscriptionByMissionNumber (string lp_conscription, int lp_missionCount);
bool libWoLC_gf_ConscriptionUnlocksByMissionNumber (string lp_conscription);
void libWoLC_gf_ConscriptionMissionVictoryEvent ();
void libWoLC_gf_UnlockConscriptionsOnMapStart (string lp_map, int lp_missionNumber);
void libWoLC_gf_UnlockConscriptionsOnMapVictory (string lp_map, int lp_missionNumber);
bool libWoLC_gf_ConscriptionUnlocksAutomatically (string lp_conscription);
bool libWoLC_gf_ConscriptionUnlocksInCutscene (string lp_conscription);
bool libWoLC_gf_CampaignMercenaryStateCheck (string lp_mercenary, string lp_state);
string libWoLC_gf_WC_MercenaryState (string lp_mercenary);
text libWoLC_gf_WC_MercenaryName (string lp_mercenary);
text libWoLC_gf_WC_MercenaryDescription (string lp_mercenary);
text libWoLC_gf_WC_MercenarySquad (string lp_mercenary);
text libWoLC_gf_WC_MercenaryAvailability (string lp_mercenary);
text libWoLC_gf_WC_MercenarySpecial (string lp_mercenary);
int libWoLC_gf_WC_MercenaryCost (string lp_mercenary);
string libWoLC_gf_WC_MercenaryMovie (string lp_mercenary);
string libWoLC_gf_WC_MercenaryPortrait (string lp_mercenary);
string libWoLC_gf_WC_MercenaryPortraitStatic (string lp_mercenary);
string libWoLC_gf_WC_MercenaryBase (string lp_mercenary);
string libWoLC_gf_WC_MercenaryArmyCategory (string lp_mercenary);
bool libWoLC_gf_WC_MercenaryPurchased (string lp_mercenary);
bool libWoLC_gf_WC_AnyMercenaryPurchased ();
void libWoLC_gf_WC_MercenarySetPurchased (string lp_mercenary, bool lp_purchased);
void libWoLC_gf_WC_SaveMercenaryToBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadMercenaryFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_EnableCampaignMercenary (bool lp_enableDisable, string lp_mercenary);
void libWoLC_gf_WC_ApplyMercenaryTech ();
void libWoLC_gf_WC_MercenaryResetAll ();
void libWoLC_gf_WC_PerkStateSet (string lp_campaignPerk, int lp_state);
int libWoLC_gf_WC_PerkState (string lp_campaignPerk);
int libWoLC_gf_WC_PerkUISlot (string lp_campaignPerk);
bool libWoLC_gf_WC_PerkIsNew (string lp_campaignPerk);
int libWoLC_gf_WC_PerkGroupUIOrderX (string lp_perkGroup);
int libWoLC_gf_WC_PerkGroupUIOrderY (string lp_perkGroup);
int libWoLC_gf_WC_PerkGroupCost (string lp_perkGroup);
string libWoLC_gf_WC_PerkGroupCurrency (string lp_perkGroup);
bool libWoLC_gf_WC_PerkGroupRequirementsMet (string lp_perkGroup);
int libWoLC_gf_WC_PerkGroupState (string lp_perkGroup);
string libWoLC_gf_WC_PerkGroupOfPerk (string lp_campaignPerk);
text libWoLC_gf_WC_PerkName (string lp_campaignPerk);
text libWoLC_gf_WC_PerkDescription (string lp_campaignPerk);
text libWoLC_gf_WC_PerkTooltip (string lp_campaignPerk);
string libWoLC_gf_WC_PerkMovie (string lp_campaignPerk);
string libWoLC_gf_WC_PerkIcon (string lp_campaignPerk);
string libWoLC_gf_WC_ConvertPerkStateToString (int lp_state);
fixed libWoLC_gf_CostOfAbility (string lp_ability, string lp_costType);
void libWoLC_gf_WC_UpdatePerkStates ();
void libWoLC_gf_WC_SavePerksToBank (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadPerksFromBank (bank lp_bank, string lp_section);
void libWoLC_gf_EnableDisableLabResearch (bool lp_enableDisable, string lp_research);
void libWoLC_gf_EnableDisableLabResearchForPlayer (bool lp_enableDisable, string lp_research, int lp_player);
void libWoLC_gf_EnableDisableLabChosenResearch (bool lp_enableDisable);
void libWoLC_gf_EnableDisableLabChosenResearchForPlayer (bool lp_enableDisable, int lp_player);
bool libWoLC_gf_LabHasNewProtossResearch ();
bool libWoLC_gf_LabHasNewZergResearch ();
bool libWoLC_gf_WC_PerkStateCheck (string lp_campaignPerk, int lp_perkState);
void libWoLC_gf_WC_ApplyPerkTech ();
void libWoLC_gf_WC_ResetPerkTech ();
int libWoLC_gf_WC_CreditsTotalSpent ();
int libWoLC_gf_RewardTotalEarned (string lp_type);
int libWoLC_gf_CreditsAvailable ();
void libWoLC_gf_WC_UpdateWeaponArmorUpgrades (int lp_player);
void libWoLC_gf_WC_UpdateWeaponArmorUpgrades2 (int lp_player);
void libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
void libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech2 (bool lp_enableDisable, int lp_catalog, string lp_entry, int lp_player);
void libWoLC_gf_WC_ApplyTech (int lp_player);
void libWoLC_gf_WC_UpdateTechStates (int lp_player);
void libWoLC_gf_WC_ResetTech ();
void libWoLC_gf_WC_StoreTechBonusAtMissionBeginning ();
void libWoLC_gf_EnableCampaignUpgrade (bool lp_enableDisable, string lp_upgrade, int lp_player);
void libWoLC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libWoLC_gf_CampaignTechUnitIsEnabled (string lp_techUnit);
bool libWoLC_gf_CampaignTechUnitIsEnabled2 (string lp_upgrade);
string libWoLC_gf_WC_CampaignTechUnitType (string lp_techUnit);
void libWoLC_gf_TS_HelpTechTree_UpdatePanel ();
void libWoLC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player);
string libWoLC_gf_PS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType);
bool libWoLC_gf_PS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType);
void libWoLC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType);
void libWoLC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes ();
void libWoLC_gf_ZS_HelpUnitsPanel_UpdatePanel ();
void libWoLC_gf_TS_HelpTechTree_UpdatePanel2 ();
void libWoLC_gf_WC_HelpTooltips_SingleUnit (string lp_techUnitCategory, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey);
void libWoLC_gf_WC_HelpTooltips_DoubleUnit (string lp_techUnitCategoryA, string lp_techUnitCategoryB, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey);
void libWoLC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition);
void libWoLC_gf_ULoadCampaignData (string lp_map);
void libWoLC_gf_WC_AutoHeatMapTestMode ();
void libWoLC_gf_WC_CampaignPreload ();
bool libWoLC_gf_WC_CampaignIsComplete ();
void libWoLC_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty);
void libWoLC_gf_PrepareForStoryModeTransitionalSave ();
void libWoLC_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty);
void libWoLC_gf_PrepareForStoryMapSwitch (string lp_nextMap);
bool libWoLC_gf_CurrentMissionIsSimulation ();
void libWoLC_gf_WC_CompletedSavesEnable ();
void libWoLC_gf_WC_UpdateCampaignScreen (string lp_mission);
void libWoLC_gf_WC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart);
string libWoLC_gf_LastMap ();
bool libWoLC_gf_LastMapConditionCheck (int lp_condition);
string libWoLC_gf_LastMission ();
bool libWoLC_gf_LastMissionConditionCheck (int lp_condition);
string libWoLC_gf_LastSuccessfulMission ();
int libWoLC_gf_WC_CampaignSaveIndex ();
void libWoLC_gf_PS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat);
void libWoLC_gf_PS_LoadAllTransitionData (string lp_map);
void libWoLC_gf_WC_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain);
void libWoLC_gf_WC_LoadTransitionVars (bank lp_sourceBank, string lp_map);
void libWoLC_gf_WC_SaveAllStoryConversations (bank lp_bank, string lp_section);
void libWoLC_gf_WC_LoadAllStoryConversations (bank lp_bank, string lp_section);
void libWoLC_gf_ResetCampaignData ();
void libWoLC_gf_TS_UpdateStoryStates ();
void libWoLC_gf_WC_SaveArmyTechBank (string lp_nextMission, bool lp_simulation);
void libWoLC_gf_WC_OpenArmyTechBank ();
string libWoLC_gf_WC_ArmyCategoryBankPath (string lp_category);
string libWoLC_gf_WC_ArmyCategoryBankSection (string lp_category);
string libWoLC_gf_WC_ArmyCategoryBankKey (string lp_category);
string libWoLC_gf_WC_ArmyUnitBankPath (string lp_unit);
string libWoLC_gf_WC_ArmyUnitBankSection (string lp_unit);
string libWoLC_gf_WC_ArmyUnitBankKey (string lp_unit);
void libWoLC_gf_WC_OpenArchiveBank ();
void libWoLC_gf_WC_ArchiveBankObjectiveSave (string lp_objective);
void libWoLC_gf_WC_ArchiveBankSave ();
void libWoLC_gf_WC_ArchiveBankLoad ();
void libWoLC_gf_WC_ArchiveBankMissionSave (string lp_mission);
void libWoLC_gf_WC_ArchivesBankSyncForLoad ();
void libWoLC_gf_WC_ArchivesBankSyncForSave ();
bool libWoLC_gf_WC_ArchivesMasterVisited ();
void libWoLC_gf_WC_OpenCampaignBank ();
void libWoLC_gf_WC_OpenCampaignLegacyBank ();
bool libWoLC_gf_WC_CampaignBankExists ();
bool libWoLC_gf_WC_CampaignLegacyBankExists ();
void libWoLC_gf_WC_SaveCampaignBank ();
void libWoLC_gf_WC_SaveCampaignBank2 ();
bool libWoLC_gf_WC_MissionSectionExists (string lp_mission);
void libWoLC_gf_WC_SetMissionSectionExists (string lp_mission, bool lp_exist);
void libWoLC_gf_WC_LoadMissionSections ();
void libWoLC_gf_WC_ClampProgressToMission (string lp_mission);
void libWoLC_gf_WC_OpenStoryBank ();
void libWoLC_gf_WC_CopyWriterStatesToSnapshot ();
bank libWoLC_gf_StoryBank ();
string libWoLC_gf_WC_BankMissionDifficultyKey (string lp_mission, int lp_difficulty);
string libWoLC_gf_WC_BankSectionName (string lp_map, string lp_section);
string libWoLC_gf_WC_BankSectionName2 (string lp_userType);
int libWoLC_gf_WC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool libWoLC_gf_WC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string libWoLC_gf_WC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void libWoLC_gf_WC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void libWoLC_gf_WC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void libWoLC_gf_WC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
void libWoLC_gf_StorySetSimulationMission (string lp_mission);
void libWoLC_gf_StorySimulationEnd ();
bool libWoLC_gf_StoryInSimulation ();
string libWoLC_gf_WC_StorySimulationMission ();
bool libWoLC_gf_StoryState (string lp_state);
int libWoLC_gf_StoryStateInteger (string lp_state);
void libWoLC_gf_SetStoryStateInteger (string lp_state, int lp_value);
void libWoLC_gf_SetStoryStateBoolean (string lp_state, bool lp_value);
void libWoLC_gf_RegisterPersistentUserType (string lp_userType);
bool libWoLC_gf_NullOrEmptyString (string lp_inputString);
string libWoLC_gf_ParseUnitTypeFromString (string lp_unitTypeName);
string libWoLC_gf_CamelCaseFromSpaceSeparated (string lp_inputWords, bool lp_capitalize, int lp_startTokenIndex, int lp_maxTokens);
void libWoLC_gf_LogDebugIfNotEmpty (string lp_errorstring);
text libWoLC_gf_WC_FormatReward (int lp_value, string lp_type);
int libWoLC_gf_WC_MathSaturatingSub (int lp_a, int lp_b);
int libWoLC_gf_WC_StatEventLast ();
void libWoLC_gf_WC_StatEventCreate (string lp_name);
void libWoLC_gf_WC_StatEventAddStr (string lp_key, string lp_value, int lp_event);
void libWoLC_gf_WC_StatEventAddInt (string lp_key, int lp_value, int lp_event);
void libWoLC_gf_WC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event);
void libWoLC_gf_WC_StatEventDone (int lp_statEvent);
void libWoLC_gf_WC_StatRecordMapStart ();
void libWoLC_gf_WC_StatRecordMiscAbilities ();
void libWoLC_gf_WC_StatRecordMiscAbilitySingle (string lp_ability);
void libWoLC_gf_WC_StatRecordMiscUnits ();
void libWoLC_gf_WC_StatRecordMiscUnitSingle (string lp_unit);
void libWoLC_gf_PauseAITimeCampaign (bool lp_pauseUnpause);
void libWoLC_gf_WC_TimeAITemporarySet (bool lp_pauseUnpause);
void libWoLC_gf_WC_TimeAITemporaryRestore ();
void libWoLC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause);
void libWoLC_gf_WC_TimeMissionTemporarySet (bool lp_pauseUnpause);
void libWoLC_gf_WC_TimeMissionTemporaryRestore ();
void libWoLC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency);
void libWoLC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libWoLC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libWoLC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libWoLC_gf__FadeCreateDialog ();
actor libWoLC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint);
void libWoLC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void libWoLC_gf_WC_ClearAnimationFromActor (string lp_identifier, actor lp_actor, fixed lp_blendTime);
string libWoLC_gf_WC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
string libWoLC_gf_WC_GetDataIDFromUIID (int lp_type, int lp_uIItemID);
int libWoLC_gf_WC_GetUIIDFromDataID (int lp_type, string lp_dataID);
void libWoLC_gf_WC_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID);
string libWoLC_gf_WC_StoryDataTableName (int lp_type, string lp_name);
string libWoLC_gf_WC_ClickableConversationLink (string lp_characterInstance);
text libWoLC_gf_FormatTimeCampaign (int lp_second);
string libWoLC_gf_WC_ChampResAbility (string lp_champion);
void libWoLC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libWoLC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
void libWoLC_gf_WC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players);

// Trigger Declarations
trigger libWoLC_gt_DebugCheat;
trigger libWoLC_gt_ZS_FootageRecording;
trigger libWoLC_gt_WC_DisplayTimestamp;
trigger libWoLC_gt_WC_DisplayTimestampSkippable;
trigger libWoLC_gt_WC_WaitForDialogCutscene;
trigger libWoLC_gt_WC_WaitForCutscene;
trigger libWoLC_gt_WC_CampaignCutsceneEnded;
trigger libWoLC_gt_WC_PlaySceneSkippable;
trigger libWoLC_gt_WC_CinematicDetectSkipping;
trigger libWoLC_gt_WC_SceneSkipped;
trigger libWoLC_gt_ConscriptionCheatListener;
trigger libWoLC_gt_ConscriptionMissionStartEvent;
trigger libWoLC_gt_ConscriptionTravelPanelMissionStartEvent;
trigger libWoLC_gt_WC_TrackLoadingComplete;
trigger libWoLC_gt_WC_TrackLoadingFromSave;
trigger libWoLC_gt_WC_ArchivesBankLoadSyncComplete;
trigger libWoLC_gt_WC_ArchivesBankSaveSyncComplete;
trigger libWoLC_gt_WC_ArchivesHandleMissionLoad;
trigger libWoLC_gt_WC_StatUnitCreated;
trigger libWoLC_gt_WC_StatDamageTaken;
trigger libWoLC_gt_WC_StatDamageHealed;
trigger libWoLC_gt_WC_StatUnitDies;
trigger libWoLC_gt_WC_StatAbilityUsed;

// Library Initialization
void libWoLC_InitVariables ();

