include "TriggerLibs/NativeLib"
include "LibWoLC_h"
include "LibWCMI_h"

include "LibCamp_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Legacy)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCamp_InitLibraries () {
    libNtve_InitVariables();
    libWoLC_InitVariables();
    libWCMI_InitVariables();
}

// Variable Initialization
bool libCamp_InitVariables_completed = false;

void libCamp_InitVariables () {
    int init_i;

    if (libCamp_InitVariables_completed) {
        return;
    }

    libCamp_InitVariables_completed = true;

    libCamp_gv_tSX_RoomStates = "";
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Menu[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Cash[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_RoomChange[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libCamp_gv_tS_StoryUIVisibility_Tip[init_i] = true;
    }
    libCamp_gv_tS_RoomChangeDialog = c_invalidDialogId;
    libCamp_gv_tS_RoomChangeDialogBorder = c_invalidDialogControlId;
    libCamp_gv_tS_RoomChangeDialogSubtitle = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtonText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libCamp_gv_tS_RoomChangeButtonBG[init_i] = c_invalidDialogControlId;
    }
    libCamp_gv__MsgDlg = c_invalidDialogId;
    libCamp_gv__MsgDlgButton = c_invalidDialogControlId;
}

// Presets
// Functions
void libCamp_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Variable Declarations
    int lv_format;
    int lv_messageType;

    // Automatic Variable Declarations
    int auto67BABAC5_val;

    // Variable Initialization

    // Implementation
    if ((lp_formatOrNot == libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        lv_format = libWCMI_ge_CampaignMessageFormatNotFormat_FormatMessage;
    }
    else {
        lv_format = libWCMI_ge_CampaignMessageFormatNotFormat_NotFormatMessage;
    }
    auto67BABAC5_val = lp_messageType;
    if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_Hint) {
        lv_messageType = libWCMI_ge_CampaignMessageType_Hint;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_SimpleHint) {
        lv_messageType = libWCMI_ge_CampaignMessageType_SimpleHint;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_Secret) {
        lv_messageType = libWCMI_ge_CampaignMessageType_Secret;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_NewUnitAcquired) {
        lv_messageType = libWCMI_ge_CampaignMessageType_NewUnitAcquired;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_NewUnitAvailable) {
        lv_messageType = libWCMI_ge_CampaignMessageType_NewUnitAvailable;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_NewTechAvailable) {
        lv_messageType = libWCMI_ge_CampaignMessageType_NewTechAvailable;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_Warning) {
        lv_messageType = libWCMI_ge_CampaignMessageType_Warning;
    }
    else if (auto67BABAC5_val == libCamp_ge_CampaignMessageType_MissionFailed) {
        lv_messageType = libWCMI_ge_CampaignMessageType_MissionFailed;
    }
    else {
    }
    libWCMI_gf_DisplayCampaignMessage(lp_toPlayerGroup, lv_messageType, lp_message, lv_format);
}

void libCamp_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto129AE934_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    auto129AE934_val = lp_race;
    if (auto129AE934_val == libCamp_ge_DropPodRace_Terran) {
        libWCMI_gf_CreateDropPod(libWCMI_ge_DropPodRace_Terran, lp_location, lp_units, lp_waitDontWait, 0);
    }
    else if (auto129AE934_val == libCamp_ge_DropPodRace_Zerg) {
        libWCMI_gf_CreateDropPod(libWCMI_ge_DropPodRace_Zerg, lp_location, lp_units, lp_waitDontWait, 0);
    }
    else {
    }
}

void libCamp_gf_CreateStorymodeTips () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_indexResearch;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) == 9) && (UnitGetOwner(EventUnit()) == 1)) {
        libWCMI_gf_AddMissionTipCampaign("KeyboardShortcuts");
    }

    if ((libWoLC_gf_StoryState("FirstMissionMercBought") == false) && (TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 12)) == true) && (libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == false) && (libWoLC_gf_WC_CampaignMapIsZeratul(libWoLC_gf_CurrentMap()) == false)) {
        libWoLC_gf_SetStoryStateBoolean("FirstMissionMercBought", true);
        libWCMI_gf_AddMissionTipCampaign("MissionMercenaries");
    }

    if ((libWoLC_gf_StoryState("FirstMissionLabResearchObjective") == false) && ((libWoLC_gf_MissionRewardTotal(libWoLC_gf_CurrentMap(), "ZergResearch") > 0) || (libWoLC_gf_MissionRewardTotal(libWoLC_gf_CurrentMap(), "ProtossResearch") > 0))) {
        libWoLC_gf_SetStoryStateBoolean("FirstMissionLabResearchObjective", true);
        if ((libWoLC_gf_StoryState("LabOpened") == false)) {
            libWCMI_gf_AddMissionTipCampaign("MissionResearch");
        }
        else {
            libWCMI_gf_AddMissionTipCampaign("MissionResearchNoLab");
        }
    }

    libCamp_gf_CreateNewStructureTips();
    libCamp_gf_TS_CreateNewUpgradeTips();
}

void libCamp_gf_CreateNewStructureTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libWoLC_gf_CurrentMissionIsSimulation() == false) || (libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == true) || (libWoLC_gf_WC_CampaignMapIsZeratul(libWoLC_gf_CurrentMap()) == true))) {
        return ;
    }

    if ((libWoLC_gf_StoryState("TipFactoryPlayed") == false)) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 10)) == true)) {
            libWoLC_gf_SetStoryStateBoolean("TipFactoryPlayed", true);
            libWCMI_gf_AddMissionTipCampaign("MissionNewStructureFactory");
        }

    }

    if ((libWoLC_gf_StoryState("TipStarportPlayed") == false)) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 11)) == true)) {
            libWoLC_gf_SetStoryStateBoolean("TipStarportPlayed", true);
            libWCMI_gf_AddMissionTipCampaign("MissionNewStructureStarport");
        }

    }

}

void libCamp_gf_TS_CreateNewUpgradeTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libWoLC_gf_CurrentMissionIsSimulation() == false) || (libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == true) || (libWoLC_gf_WC_CampaignMapIsZeratul(libWoLC_gf_CurrentMap()) == true))) {
        return ;
    }

    if ((TechTreeUpgradeIsAllowed(1, "TerranInfantryWeaponsLevel2") == true)) {
        libWCMI_gf_AddMissionTipCampaign("EngineeringBay2");
    }

    if ((TechTreeUpgradeIsAllowed(1, "TerranInfantryWeaponsLevel3") == true)) {
        libWCMI_gf_AddMissionTipCampaign("EngineeringBay3");
    }

    if ((TechTreeUpgradeIsAllowed(1, "TerranVehicleAndShipWeaponsLevel2") == true)) {
        libWCMI_gf_AddMissionTipCampaign("ArmoryLevel2");
    }

    if ((TechTreeUpgradeIsAllowed(1, "TerranVehicleAndShipWeaponsLevel3") == true)) {
        libWCMI_gf_AddMissionTipCampaign("ArmoryLevel3");
    }

}

void libCamp_gf_CreateTipFromConversationState (string lp_convoState, int lp_tipType, playergroup lp_players) {
    // Variable Declarations
    string lv_userDataTip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_userDataTip = StringReplaceWord(lp_convoState, "StoryTips|", "", c_stringReplaceAll, c_stringCase);

    // Implementation
    libWCMI_gf_AddMissionTipCampaign(lv_userDataTip);
    libWCMI_gf_DisplayMissionTip();
}

void libCamp_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    libWCMI_gf_CreateMissionAutosavePoint(lp_description);
}

void libCamp_gf_SendTransmissionCampaign (unit lp_unit, soundlink lp_sound, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone) {
    // Variable Declarations
    bool lv_flashOption;
    int lv_portrait;
    transmissionsource lv_source;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
        lv_flashOption = true;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
    }
    else {
        lv_flashOption = false;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
    }
    if ((lp_unit == null)) {
        lv_source = TransmissionSourceFromModel(null);
    }
    else {
        lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
    }
    TransmissionSend(PlayerGroupAll(), lv_source, lv_portrait, "Talk", lp_sound, null, null, lp_duration, lp_durationType, lp_waitUntilDone);
}

void libCamp_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.25);
    }
}

void libCamp_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, int lp_player) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    int auto5EE29D27_val;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    auto5EE29D27_val = lp_resourceType;
    if (auto5EE29D27_val == c_playerPropMinerals) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_Camp_F6EDE668") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_Camp_A7A85440")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto5EE29D27_val == c_playerPropVespene) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_Camp_0DAA8706") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_Camp_8E9001C5")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
}

void libCamp_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_AddUnitTypeToUnitHelpPanel(lp_unitType, lp_saveInHistory, lp_player);
}

void libCamp_gf_ChangeAmbience (string lp_ambience) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ambience == libCamp_gv_tS_CurrentAmbienceLink)) {
        return ;
    }

    libCamp_gv_tS_CurrentAmbienceLink = lp_ambience;
    if ((lp_ambience != null)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, lp_ambience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_F5EEF511") + StringToText(lp_ambience)), false);
    }
    else {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Camp_646D4F41") + StringExternal("Param/Value/lib_Camp_ABE2EC7C")), false);
    }
}

void libCamp_gf_SetStoryModeRoomStates (string lp_roomStates) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tSX_RoomStates = lp_roomStates;
}

string libCamp_gf_StoryModeRoomStates () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tSX_RoomStates;
}

void libCamp_gf_RegisterStoryModeRoomStatesDefaultCallback (trigger lp_defaultCallback) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gv_tS_RoomStatesDefaultCallback = lp_defaultCallback;
}

trigger libCamp_gf_StoryModeRoomStates2 () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomStatesDefaultCallback;
}

void libCamp_gf_HideStoryUI (bool lp_showHide, bool lp_includeTip) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == false)) {
        if ((libCamp_gv_tS_StoryUIVisibilityCounter >= 20)) {
            return ;
        }

        libCamp_gv_tS_StoryUIVisibilityCounter += 1;
        if ((UIFrameVisible(1, c_syncFrameTypeMenuBar) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeCashPanel) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((libCamp_gf_RoomChangePanelIsVisible() == true)) {
            libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeTipAlertPanel) == true)) {
            libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter] = false;
        }
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
        libCamp_gf_HideRoomChangePanel(false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    }
    else {
        if ((libCamp_gv_tS_StoryUIVisibilityCounter == 0)) {
            return ;
        }

        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, libCamp_gv_tS_StoryUIVisibility_Menu[libCamp_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, libCamp_gv_tS_StoryUIVisibility_Cash[libCamp_gv_tS_StoryUIVisibilityCounter]);
        libCamp_gf_HideRoomChangePanel(libCamp_gv_tS_StoryUIVisibility_RoomChange[libCamp_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, libCamp_gv_tS_StoryUIVisibility_Tip[libCamp_gv_tS_StoryUIVisibilityCounter]);
        libCamp_gv_tS_StoryUIVisibilityCounter -= 1;
    }
}

void libCamp_gf_TS_RoomChangePanelCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId)) {
        DialogCreate(500, 50, c_anchorBottom, 0, 0, false);
        libCamp_gv_tS_RoomChangeDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libCamp_gv_tS_RoomChangeDialogBorder = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_roomselectionframe.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogCreate(1600, 400, c_anchorBottom, 0, 70, false);
        libCamp_gv_tS_RoomChangeDialogSubtitle = DialogLastCreated();
        DialogSetTransparency(DialogLastCreated(), 100.0);
        TriggerEnable(libCamp_gt_TS_RoomChangeButtonResponse, true);
        TriggerEnable(libCamp_gt_TS_RoomChangeHotkeyResponse, true);
    }

}

void libCamp_gf_AddRoomChangePanelButton (text lp_roomName, trigger lp_clickCallback, trigger lp_updateCallback, int lp_custonData, text lp_tip) {
    // Variable Declarations
    const int lv_buttonX = 220;
    const int lv_buttonY = 42;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_TS_RoomChangePanelCreate();
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeButton);
    libCamp_gv_tS_RoomChangeButtonCount += 1;
    libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeButton" + IntToString(libCamp_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_Camp_51F37D04", "A", IntToText(libCamp_gv_tS_RoomChangeButtonCount));
    TextExpressionSetToken("Param/Expression/lib_Camp_51F37D04", "B", lp_roomName);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_Camp_51F37D04"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RoomChangePanelText", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_normaloverpressedover_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lp_tip, PlayerGroupAll());
    libCamp_gv_tS_RoomChangeButtonCallbackClick[libCamp_gv_tS_RoomChangeButtonCount] = lp_clickCallback;
    libCamp_gv_tS_RoomChangeButtonCallbackUpdate[libCamp_gv_tS_RoomChangeButtonCount] = lp_updateCallback;
    libCamp_gv_tS_RoomChangeButtonCustomData[libCamp_gv_tS_RoomChangeButtonCount] = lp_custonData;
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libCamp_gv_tS_RoomChangeButtonBG[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_selected.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeLabel);
    libCamp_gv_tS_RoomChangeButtonText[libCamp_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeLabel" + IntToString(libCamp_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_Camp_34B5A9B7", "A", IntToText(libCamp_gv_tS_RoomChangeButtonCount));
    TextExpressionSetToken("Param/Expression/lib_Camp_34B5A9B7", "B", lp_roomName);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_Camp_34B5A9B7"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[libCamp_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RoomChangePanelTextDisabled", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCamp_gf_UpdateRoomChangePanel();
}

int libCamp_gf_LastAddRoomChangePanelButton () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCount;
}

int libCamp_gf_RoomChangePanelButtonCount () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCount;
}

int libCamp_gf_RoomChangePanelCurrentButton () {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCurrent;
}

int libCamp_gf_RoomChangePanelButtonCustomData (int lp_buttonId) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gv_tS_RoomChangeButtonCustomData[lp_buttonId];
}

bool libCamp_gf_RoomChangePanelIsVisible () {
    // Automatic Variable Declarations
    // Implementation
    return ((libCamp_gv_tS_RoomChangeDialog != c_invalidDialogId) && DialogIsVisible(libCamp_gv_tS_RoomChangeDialog, 1));
}

void libCamp_gf_HideRoomChangePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_TS_RoomChangePanelCreate();
    if ((lp_showHide == true)) {
        if ((libCamp_gv_tS_RoomChangeButtonCount > 0)) {
            DialogSetVisible(libCamp_gv_tS_RoomChangeDialog, PlayerGroupAll(), true);
            DialogSetVisible(libCamp_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
            DialogSetSubtitlePositionOverride(libCamp_gv_tS_RoomChangeDialogSubtitle);
        }

    }
    else {
        DialogSetVisible(libCamp_gv_tS_RoomChangeDialog, PlayerGroupAll(), false);
        DialogSetVisible(libCamp_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
    }
}

void libCamp_gf_UpdateRoomChangePanel () {
    // Variable Declarations
    int lv_index;
    int lv_sizeX;
    int lv_sizeY;

    // Automatic Variable Declarations
    int autoC6B803EA_ae;
    const int autoC6B803EA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCamp_gv_tS_RoomChangeButtonCount > 0)) {
        lv_sizeX = 30;
        lv_sizeY = 60;
        autoC6B803EA_ae = libCamp_gv_tS_RoomChangeButtonCount;
        lv_index = 1;
        for ( ; ( (autoC6B803EA_ai >= 0 && lv_index <= autoC6B803EA_ae) || (autoC6B803EA_ai < 0 && lv_index >= autoC6B803EA_ae) ) ; lv_index += autoC6B803EA_ai ) {
            if ((libCamp_gv_tS_RoomChangeButtonCallbackUpdate[lv_index] != null)) {
                libCamp_gv_tS_RoomChangeButtonCurrent = lv_index;
                TriggerExecute(libCamp_gv_tS_RoomChangeButtonCallbackUpdate[lv_index], true, false);
            }

            DialogControlSetPosition(libCamp_gv_tS_RoomChangeButtons[lv_index], PlayerGroupAll(), c_anchorTopLeft, lv_sizeX, 13);
            lv_sizeX += 215;
        }
        lv_sizeX += 36;
        DialogSetSize(libCamp_gv_tS_RoomChangeDialog, lv_sizeX, lv_sizeY);
        DialogControlSetSize(libCamp_gv_tS_RoomChangeDialogBorder, PlayerGroupAll(), lv_sizeX, lv_sizeY);
        DialogSetPosition(libCamp_gv_tS_RoomChangeDialog, c_anchorBottom, 0, 0);
    }

}

void libCamp_gf_DisableRoomChangePanelButton (bool lp_enableDisable, int lp_buttonId) {
    // Automatic Variable Declarations
    // Deprecated
    libCamp_gf_SetRoomChangePanelButtonState(lp_buttonId, libCamp_ge_RoomPanelButtonState_Enable);
}

void libCamp_gf_SetRoomChangePanelButtonState (int lp_buttonId, int lp_state) {
    // Automatic Variable Declarations
    int auto575891EC_val;

    // Implementation
    if ((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount)) {
        return ;
    }

    auto575891EC_val = lp_state;
    if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Enable) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Locked) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto575891EC_val == libCamp_ge_RoomPanelButtonState_Disable) {
        DialogControlSetEnabled(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libCamp_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), true);
    }
    else {
    }
}

trigger auto_libCamp_gf_FlashRoomChangePanelButton_Trigger = null;
int auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId;

void libCamp_gf_FlashRoomChangePanelButton (int lp_buttonId) {
    auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libCamp_gf_FlashRoomChangePanelButton_Trigger == null) {
        auto_libCamp_gf_FlashRoomChangePanelButton_Trigger = TriggerCreate("auto_libCamp_gf_FlashRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libCamp_gf_FlashRoomChangePanelButton_Trigger, false, false);
}

bool auto_libCamp_gf_FlashRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libCamp_gf_FlashRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == true))) {
        return true;
    }

    libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = true;
    DialogControlCreate(libCamp_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (DialogControlGetWidth(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 18), (DialogControlGetHeight(libCamp_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 24));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCamp_gv_tS_RoomChangeButtons[lp_buttonId], c_anchorCenter, 0, -1);
    while (true) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 100.0);
        Wait(0.5, c_timeGame);
        if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 0.0);
        Wait(0.5, c_timeReal);
        if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

    }
    return true;
}

trigger auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger = null;
int auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

void libCamp_gf_StopFlashingRoomChangePanelButton (int lp_buttonId) {
    auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger == null) {
        auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger = TriggerCreate("auto_libCamp_gf_StopFlashingRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libCamp_gf_StopFlashingRoomChangePanelButton_Trigger, false, false);
}

bool auto_libCamp_gf_StopFlashingRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libCamp_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libCamp_gv_tS_RoomChangeButtonCount) || (libCamp_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libCamp_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId))) {
        return true;
    }

    libCamp_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = false;
    return true;
}

fixed libCamp_gf_GD_Gap (int lp_hV) {
    // Automatic Variable Declarations
    int autoE579BA21_val;

    // Implementation
    autoE579BA21_val = lp_hV;
    if (autoE579BA21_val == libCamp_ge_GRIDDLG_HV_Horizontal) {
        return libCamp_gv_gRIDDLG_GRIDGAP_X;
    }
    else if (autoE579BA21_val == libCamp_ge_GRIDDLG_HV_Vertical) {
        return libCamp_gv_gRIDDLG_GRIDGAP_Y;
    }
    else {
    }
    return 0.0;
}

fixed libCamp_gf_GD_GridToReal (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_ret;
    fixed lv_gap;
    fixed lv_sign;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libCamp_gf_GD_Gap(lp_hV);
    if ((lp_grid >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = (AbsF(lp_grid) * libCamp_gv_gRIDDLG_GRID);
    if ((lp_sizeOrPos == libCamp_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret = MaxF((lv_ret - lv_gap), 0.0);
    }

    return (lv_ret * lv_sign);
}

int libCamp_gf_GD_GridToInteger (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(libCamp_gf_GD_GridToReal(lp_grid, lp_hV, lp_sizeOrPos));
}

fixed libCamp_gf_GD_RealToGrid (fixed lp_value, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_sign;
    fixed lv_grid;
    fixed lv_gap;
    fixed lv_ret;
    int lv_gapCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libCamp_gf_GD_Gap(lp_hV);
    if ((lp_value >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = AbsF(lp_value);
    if ((lp_sizeOrPos == libCamp_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret += lv_gap;
    }

    lv_ret /= libCamp_gv_gRIDDLG_GRID;
    return (lv_sign * lv_ret);
}

fixed libCamp_gf_GD_IntegerToGrid (int lp_value, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_RealToGrid(IntToFixed(lp_value), lp_hV, lp_sizeOrPos);
}

fixed libCamp_gf_DialogWidthInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetWidth(lp_dialog), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogHeightInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetHeight(lp_dialog), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogOffsetXInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetOffsetX(lp_dialog), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
}

fixed libCamp_gf_DialogOffsetYInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogGetOffsetY(lp_dialog), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
}

fixed libCamp_gf_DialogItemWidthInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogControlGetWidth(lp_dialogItem, lp_player), libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogItemHeightInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCamp_gf_GD_IntegerToGrid(DialogControlGetHeight(lp_dialogItem, lp_player), libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
}

fixed libCamp_gf_DialogItemOffsetXInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_x;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_x = IntToFixed(DialogControlGetOffsetX(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorLeft) || (lv_anchor == c_anchorRight))) {
            lv_x -= libCamp_gv_gRIDDLG_MARGINE_X;
        }
    }

    return libCamp_gf_GD_RealToGrid(lv_x, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
}

fixed libCamp_gf_DialogItemOffsetYInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_y;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_y = IntToFixed(DialogControlGetOffsetY(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorTop) || (lv_anchor == c_anchorBottom))) {
            lv_y -= libCamp_gv_gRIDDLG_MARGINE_Y;
        }
    }

    return libCamp_gf_GD_RealToGrid(lv_y, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
}

void libCamp_gf_CreateDialogInGrid (fixed lp_width, fixed lp_height, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, bool lp_modal) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToReal(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libCamp_gv_gRIDDLG_MARGINE_X);
    lv_h = libCamp_gf_GD_GridToReal(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libCamp_gv_gRIDDLG_MARGINE_Y);
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogCreate(FixedToInt(lv_w), FixedToInt(lv_h), lp_anchor, lv_x, lv_y, lp_modal);
}

void libCamp_gf_MoveDialogInGrid (int lp_dialog, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPosition(lp_dialog, lp_anchor, lv_x, lv_y);
}

void libCamp_gf_MoveDialogInGridRelative (int lp_dialog, int lp_anchor, int lp_relativeDialog, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToInteger(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libCamp_gf_GD_GridToInteger(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPositionRelative(lp_dialog, lp_anchor, lp_relativeDialog, lp_relativeAnchor, lv_x, lv_y);
}

void libCamp_gf_SetDialogSizeInGrid (int lp_dialog, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToReal(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libCamp_gv_gRIDDLG_MARGINE_X);
    lv_h = libCamp_gf_GD_GridToReal(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libCamp_gv_gRIDDLG_MARGINE_Y);
    DialogSetSize(lp_dialog, FixedToInt(lv_w), FixedToInt(lv_h));
}

void libCamp_gf_CreateDialogItemInGrid (int lp_dialog, int lp_type, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, fixed lp_width, fixed lp_height, text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(lp_dialog, lp_type);
    libCamp_gf_SetDialogItemSizeInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_height);
    libCamp_gf_MoveDialogItemInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_label, PlayerGroupAll());
}

void libCamp_gf_MoveDialogItemInGrid (int lp_dialogItem, playergroup lp_players, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToReal(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libCamp_gf_GD_GridToReal(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    if (((lp_anchor == c_anchorTopLeft) || (lp_anchor == c_anchorTopRight) || (lp_anchor == c_anchorBottomLeft) || (lp_anchor == c_anchorBottomRight))) {
        lv_x += libCamp_gv_gRIDDLG_MARGINE_X;
        lv_y += libCamp_gv_gRIDDLG_MARGINE_Y;
    }
    else if (((lp_anchor == c_anchorLeft) || (lp_anchor == c_anchorRight))) {
        lv_x += libCamp_gv_gRIDDLG_MARGINE_X;
    }
    else if (((lp_anchor == c_anchorTop) || (lp_anchor == c_anchorBottom))) {
        lv_y += libCamp_gv_gRIDDLG_MARGINE_Y;
    }
    DialogControlSetPosition(lp_dialogItem, PlayerGroupAll(), lp_anchor, FixedToInt(lv_x), FixedToInt(lv_y));
}

void libCamp_gf_MoveDialogItemInGridRelative (int lp_item, playergroup lp_players, int lp_anchor, int lp_relativeItem, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libCamp_gf_GD_GridToReal(lp_offsetX, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libCamp_gf_GD_GridToReal(lp_offsetY, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientPosition);
    DialogControlSetPositionRelative(lp_item, PlayerGroupAll(), lp_anchor, lp_relativeItem, lp_relativeAnchor, FixedToInt(lp_offsetX), FixedToInt(lp_offsetY));
}

void libCamp_gf_SetDialogItemSizeInGrid (int lp_dialogItem, playergroup lp_players, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    int lv_w;
    int lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libCamp_gf_GD_GridToInteger(lp_width, libCamp_ge_GRIDDLG_HV_Horizontal, libCamp_ge_GRIDDLG_HV2_ClientSize);
    lv_h = libCamp_gf_GD_GridToInteger(lp_height, libCamp_ge_GRIDDLG_HV_Vertical, libCamp_ge_GRIDDLG_HV2_ClientSize);
    DialogControlSetSize(lp_dialogItem, PlayerGroupAll(), lv_w, lv_h);
}

void libCamp_gf_DisplayMessageDialog (text lp_title, string lp_titleStyle, text lp_body1, string lp_bodyStyle1, text lp_body2, string lp_bodyStyle2, int lp_width, int lp_height, text lp_buttonText) {
    // Variable Declarations
    int lv_titleItem;
    int lv_textWidth;
    int lv_bodyItem1;
    int lv_bodyItem2;
    const int lv_buttonHeight = 55;
    const int lv_titleHeight = 60;
    int lv_bodyHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_titleItem = c_invalidDialogControlId;
    lv_textWidth = (lp_width - 80);
    lv_bodyItem1 = c_invalidDialogControlId;
    lv_bodyItem2 = c_invalidDialogControlId;
    lv_bodyHeight = lp_height;

    // Implementation
    DialogCreate(lp_width, lp_height, c_anchorCenter, 0, 0, true);
    libCamp_gv__MsgDlg = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_protoss_glass_stroke.dds");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(6.27, 14.51, 24.71), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 10), (lp_height - 10));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libCamp_gv__MsgDlgButton = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 180, lv_buttonHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_buttonText, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_titleItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_titleHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_title, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_titleStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem1 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body1, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_bodyStyle1, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_titleItem, c_anchorBottom, 0, 5);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem2 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body2, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_bodyStyle2, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libCamp_gv__MsgDlgButton, c_anchorTop, 0, -15);
    libCamp_gv__MsgDlgOpened = true;
    TriggerEnable(libCamp_gt__MsgDlgButtonClicked, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while (!((libCamp_gv__MsgDlgOpened == false))) {
        Wait(0.3, c_timeReal);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: TS_RoomChange Button Response
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_RoomChangeButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto94FF7B16_ae;
    const int auto94FF7B16_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto94FF7B16_ae = libCamp_gv_tS_RoomChangeButtonCount;
    lv_index = 1;
    for ( ; ( (auto94FF7B16_ai >= 0 && lv_index <= auto94FF7B16_ae) || (auto94FF7B16_ai < 0 && lv_index >= auto94FF7B16_ae) ) ; lv_index += auto94FF7B16_ai ) {
        if ((libCamp_gv_tS_RoomChangeButtons[lv_index] == EventDialogControl()) && (libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index] != null)) {
            libCamp_gv_tS_RoomChangeButtonCurrent = lv_index;
            TriggerExecute(libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index], true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_RoomChangeButtonResponse_Init () {
    libCamp_gt_TS_RoomChangeButtonResponse = TriggerCreate("libCamp_gt_TS_RoomChangeButtonResponse_Func");
    TriggerEnable(libCamp_gt_TS_RoomChangeButtonResponse, false);
    TriggerAddEventDialogControl(libCamp_gt_TS_RoomChangeButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_RoomChange Hotkey Response
//--------------------------------------------------------------------------------------------------
bool libCamp_gt_TS_RoomChangeHotkeyResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoBEAFA185_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEAFA185_val = EventKeyPressed();
    if (autoBEAFA185_val == c_key1) {
        lv_index = 1;
    }
    else if (autoBEAFA185_val == c_key2) {
        lv_index = 2;
    }
    else if (autoBEAFA185_val == c_key3) {
        lv_index = 3;
    }
    else if (autoBEAFA185_val == c_key4) {
        lv_index = 4;
    }
    else if (autoBEAFA185_val == c_key5) {
        lv_index = 5;
    }
    else if (autoBEAFA185_val == c_key6) {
        lv_index = 6;
    }
    else if (autoBEAFA185_val == c_key7) {
        lv_index = 7;
    }
    else if (autoBEAFA185_val == c_key8) {
        lv_index = 8;
    }
    else if (autoBEAFA185_val == c_key9) {
        lv_index = 9;
    }
    else {
    }
    if ((libCamp_gv_tS_RoomChangeButtons[lv_index] != c_invalidDialogControlId) && (DialogControlIsEnabled(libCamp_gv_tS_RoomChangeButtons[lv_index], EventPlayer()) == true) && (libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index] != null)) {
        libCamp_gv_tS_RoomChangeButtonCurrent = lv_index;
        TriggerExecute(libCamp_gv_tS_RoomChangeButtonCallbackClick[lv_index], true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt_TS_RoomChangeHotkeyResponse_Init () {
    libCamp_gt_TS_RoomChangeHotkeyResponse = TriggerCreate("libCamp_gt_TS_RoomChangeHotkeyResponse_Func");
    TriggerEnable(libCamp_gt_TS_RoomChangeHotkeyResponse, false);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key3, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key4, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key6, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key7, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key8, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libCamp_gt_TS_RoomChangeHotkeyResponse, c_playerAny, c_key9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _MsgDlgButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCamp_gt__MsgDlgButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCamp_gv__MsgDlgButton))) {
            return false;
        }

        if (!((libCamp_gv__MsgDlgOpened == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogSetVisible(libCamp_gv__MsgDlg, PlayerGroupAll(), false);
    libCamp_gv__MsgDlgOpened = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCamp_gt__MsgDlgButtonClicked_Init () {
    libCamp_gt__MsgDlgButtonClicked = TriggerCreate("libCamp_gt__MsgDlgButtonClicked_Func");
    TriggerEnable(libCamp_gt__MsgDlgButtonClicked, false);
    TriggerAddEventDialogControl(libCamp_gt__MsgDlgButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libCamp_InitTriggers () {
    libCamp_gt_TS_RoomChangeButtonResponse_Init();
    libCamp_gt_TS_RoomChangeHotkeyResponse_Init();
    libCamp_gt__MsgDlgButtonClicked_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCamp_InitLib_completed = false;

void libCamp_InitLib () {
    if (libCamp_InitLib_completed) {
        return;
    }

    libCamp_InitLib_completed = true;

    libCamp_InitLibraries();
    libCamp_InitVariables();
    libCamp_InitTriggers();
}

include "LibWoLC"
include "LibWCMI"

