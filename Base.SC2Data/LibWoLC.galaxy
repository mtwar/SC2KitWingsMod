include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCamp_h"
include "LibWCMI_h"

include "LibWoLC_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (WoL)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libWoLC_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCamp_InitVariables();
    libWCMI_InitVariables();
}

// Variable Initialization
bool libWoLC_InitVariables_completed = false;

void libWoLC_InitVariables () {
    int init_i;
    int init_j;

    if (libWoLC_InitVariables_completed) {
        return;
    }

    libWoLC_InitVariables_completed = true;

    libWoLC_gv_wC_AchievementsEnabled = true;
    libWoLC_gv_pCX_CampaignDifficulty = 2;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libWoLC_gv_wC_EventParameter[init_i][init_j] = "";
        }
    }
    libWoLC_gv_wC_CurrentCampaignCutscene = c_cutsceneNone;
    libWoLC_gv_wC_CampaignCutsceneDialog = c_invalidDialogId;
    libWoLC_gv_wC_SceneStatEvent = -1;
    libWoLC_gv_wC_ArchiveLotVBankName = "WArchive";
    libWoLC_gv_wC_CampaignWoLBankName = "WCampaign";
    libWoLC_gv_wC_CampaignWoLBankNameLegacy = "TCampaign";
    libWoLC_gv_wC_StatEventLastCampaign = -1;
    libWoLC_gv_wC_StatSoATimeEnergyCapped = TimerCreate();
    libWoLC_gv_wC_WorldCoverDlg = c_invalidDialogId;
    libWoLC_gv__FadeDialog = c_invalidDialogId;
    libWoLC_gv__FadeImage = c_invalidDialogControlId;
}

// Presets
// Functions
trigger auto_libWoLC_gf_CampaignAwardAchievement_Trigger = null;
string auto_libWoLC_gf_CampaignAwardAchievement_lp_achievement;

void libWoLC_gf_CampaignAwardAchievement (string lp_achievement) {
    auto_libWoLC_gf_CampaignAwardAchievement_lp_achievement = lp_achievement;

    if (auto_libWoLC_gf_CampaignAwardAchievement_Trigger == null) {
        auto_libWoLC_gf_CampaignAwardAchievement_Trigger = TriggerCreate("auto_libWoLC_gf_CampaignAwardAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libWoLC_gf_CampaignAwardAchievement_Trigger, false, false);
}

bool auto_libWoLC_gf_CampaignAwardAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libWoLC_gf_CampaignAwardAchievement_lp_achievement;

    // Variable Declarations
    int lv_achievementDialog;
    const fixed lv_durationRequired = 6.0;
    fixed lv_duration;
    int lv_panel;
    string lv_dataTableName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_achievementDialog = c_invalidDialogId;
    lv_panel = c_invalidDialogControlId;
    lv_dataTableName = "";

    // Implementation
    if ((libWoLC_gv_wC_AchievementsEnabled == false)) {
        return true;
    }

    AchievementAward(1, lp_achievement);
    if (((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) || (GameIsOnline() == true) || (libWoLC_gv_wC_AchievementDebugToastSuppressed == true))) {
        return true;
    }

    libWoLC_gv_wC_AchievementsDisplayed += 1;
    lv_dataTableName = ("ACHIEVEOPENED_" + (lp_achievement));
    if ((DataTableValueExists(true, lv_dataTableName) == true)) {
        return true;
    }

    DataTableSetString(true, lv_dataTableName, "1");
    while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.25, c_timeGame);
    }
    TextExpressionSetToken("Param/Expression/lib_WoLC_0C185A62", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", c_playerAny)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_0C185A62", "B", StringToText((lp_achievement)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_0C185A62", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", c_playerAny)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_0C185A62"), false);
    DialogCreate(1000, 400, c_anchorRight, -200, (libWoLC_gv_wC_AchievementPosition + 200), true);
    libWoLC_gv_wC_AchievementPosition -= 125;
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_achievementDialog = DialogLastCreated();
    DialogSetRenderPriority(lv_achievementDialog, 550);
    DialogSetImageVisible(lv_achievementDialog, false);
    DialogControlCreateFromTemplate(lv_achievementDialog, c_triggerControlTypePanel, "LotV_Debug/AchievementFrameDebugTemplate");
    lv_panel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "DescriptionLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "IconImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_tipicon_story-archives.dds", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "PointsLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Points", 1)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 200, 50, c_anchorTop, 0, 100, StringExternal("Param/Value/lib_WoLC_7C8EDD75"), Color(100.00, 0.00, 0.00), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    while (true) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), false);
        }
        else {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), true);
        }
        Wait(0.25, c_timeGame);
        lv_duration += 0.25;
        if ((lv_duration >= lv_durationRequired)) {
            break;
        }

    }
    DialogDestroy(lv_achievementDialog);
    libWoLC_gv_wC_AchievementsDisplayed -= 1;
    if ((libWoLC_gv_wC_AchievementsDisplayed <= 0)) {
        libWoLC_gv_wC_AchievementPosition = 0;
    }

    return true;
}

void libWoLC_gf_SetAchievementTermQuantityCampaign (string lp_term, int lp_quantity) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_AchievementsEnabled == false)) {
        return ;
    }

    AchievementTermQuantitySet(1, lp_term, lp_quantity);
}

void libWoLC_gf_EnableDisableAchievementsCampaign (bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libWoLC_gv_wC_AchievementsEnabled = true;
    }
    else {
        libWoLC_gv_wC_AchievementsEnabled = false;
    }
}

bool libWoLC_gf_AchievementsAreDisabledCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return !(libWoLC_gv_wC_AchievementsEnabled);
}

void libWoLC_gf_WC_AchievementCategorySet () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true)) {
        AchievementPanelSetCategory(PlayerGroupAll(), UserDataGetGameLink("Maps", libWoLC_gf_WC_MapUserDataInstance(libWoLC_gf_CurrentMap()), "Achievements", 1));
    }
    else {
        AchievementPanelSetCategory(PlayerGroupAll(), "WingsofLiberty");
    }
}

void libWoLC_gf_WC_AchievementAwardEarned () {
    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto4A9584B2_ae;
    int auto4A9584B2_ai;

    // Variable Initialization

    // Implementation
    libWoLC_gv_wC_AchievementDebugToastSuppressed = true;
    auto4A9584B2_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4A9584B2_ai = 1;
    while (auto4A9584B2_ai <= auto4A9584B2_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4A9584B2_ai);
        auto4A9584B2_ai = auto4A9584B2_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Completed) == true)) {
                libWoLC_gf_WC_AchievementAwardMission(lv_indexMission);
            }

        }    
    }
    libWoLC_gv_wC_AchievementDebugToastSuppressed = false;
}

void libWoLC_gf_WC_AchievementAwardMission (string lp_completedMission) {
    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexObjective;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gv_wC_AchievementsEnabled == false)) {
        return ;
    }

}

void libWoLC_gf_WC_AchievementAwardArmy () {
    // Variable Declarations
    string lv_indexArmyCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gv_wC_AchievementsEnabled == false)) {
        return ;
    }

}

int libWoLC_gf_WC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto35BA92F5_val;

    // Variable Initialization

    // Implementation
    auto35BA92F5_val = lp_difficulty;
    if (auto35BA92F5_val == 1) {
        return 1;
    }
    else if (auto35BA92F5_val == 2) {
        return 2;
    }
    else if (auto35BA92F5_val == 3) {
        return 3;
    }
    else if (auto35BA92F5_val == 4) {
        return 4;
    }
    else {
        return 0;
    }
}

int libWoLC_gf_WC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto3A457F69_val;

    // Implementation
    auto3A457F69_val = lp_index;
    if (auto3A457F69_val == libWoLC_gf_WC_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto3A457F69_val == libWoLC_gf_WC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto3A457F69_val == libWoLC_gf_WC_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto3A457F69_val == libWoLC_gf_WC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libWoLC_gf_WC_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_pCX_CampaignDifficulty = lp_difficulty;
}

void libWoLC_gf_DispatchCampaignEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_EventCallback[(lp_event)] != null) && (TriggerIsEnabled(libWoLC_gv_wC_EventCallback[(lp_event)]) == true)) {
        libWoLC_gv_wC_EventParameter[(lp_event)][1] = lp_param1;
        libWoLC_gv_wC_EventParameter[(lp_event)][2] = lp_param2;
        libWoLC_gv_wC_EventIsRunning = true;
        TriggerExecute(libWoLC_gv_wC_EventCallback[(lp_event)], true, lp_waitOption);
        libWoLC_gv_wC_EventIsRunning = false;
    }

}

void libWoLC_gf_RegisterCampaignEvent (int lp_event, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_EventCallback[(lp_event)] = lp_callback;
}

string libWoLC_gf_CampaignEventParameter (int lp_event, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < 1) || (lp_index > 2))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_6F26B79B"), true);
        return "<Error>";
    }

    return libWoLC_gv_wC_EventParameter[(lp_event)][lp_index];
}

void libWoLC_gf_CampaignMissionStarts (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libWoLC_gv_wCC_EVENT_MISSIONSTART);
}

void libWoLC_gf_RegisterFootageRecording (trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_zS_FootageRecordingCallback = lp_callback;
    if ((GameIsTestMap(true) == true)) {
        libWoLC_gf_ZS_FootageRecording();
        ConsoleCommand("exit", true, true);
    }

}

void libWoLC_gf_ZS_FootageRecording () {
    // Automatic Variable Declarations
    // Implementation
    if (((libWoLC_gv_zS_FootageRecordingCallback == null) || (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == false))) {
        return ;
    }

    TriggerExecute(libWoLC_gv_zS_FootageRecordingCallback, true, true);
}

void libWoLC_gf_PS_UpdatePlanetData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexLocation;

    // Automatic Variable Declarations
    int auto5AC394E2_ae;
    int auto5AC394E2_ai;
    int autoFD1B4A98_ae;
    int autoFD1B4A98_ai;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_CurrentLocation() == null)) {
        libWoLC_gf_WC_SetLocationActive("MarSara");
    }

    auto5AC394E2_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto5AC394E2_ai = 1;
    while (auto5AC394E2_ai <= auto5AC394E2_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto5AC394E2_ai);
        libWoLC_gf_SetPlanetAvailable(lv_indexLocation, false);
        auto5AC394E2_ai = auto5AC394E2_ai + 1;
    }
    autoFD1B4A98_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFD1B4A98_ai = 1;
    while (autoFD1B4A98_ai <= autoFD1B4A98_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFD1B4A98_ai);
        autoFD1B4A98_ai = autoFD1B4A98_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Available) == true)) {
                libWoLC_gf_SetPlanetAvailable(libWoLC_gf_StoryMapPlanet(lv_indexMission), true);
            }

        }    
    }
}

void libWoLC_gf_WC_SetLocationActive (string lp_planet) {
    // Variable Declarations
    string lv_indexPlanet;

    // Automatic Variable Declarations
    int auto932100AC_ae;
    int auto932100AC_ai;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_542640F3", "A", StringToText((lp_planet)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_542640F3"), false);
    libWoLC_gv_wCX_CurrentLocation = lp_planet;
    auto932100AC_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto932100AC_ai = 1;
    while (auto932100AC_ai <= auto932100AC_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, auto932100AC_ai);
        UserDataSetInt("Locations", libWoLC_gf_WC_LocationUserData(lv_indexPlanet), "Active", 1, 0);
        auto932100AC_ai = auto932100AC_ai + 1;
    }
    UserDataSetInt("Locations", libWoLC_gf_WC_LocationUserData(lp_planet), "Active", 1, 1);
}

string libWoLC_gf_WC_LocationUserData (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "UserReference", c_playerAny));
}

string libWoLC_gf_WC_LocationDataString (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return ("PS_P_" + (lp_planet));
}

string libWoLC_gf_WC_StoryMapBankID2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

string libWoLC_gf_WC_LocationLoadingImage (string lp_loadingLocation) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogLocation, lp_loadingLocation, "BackgroundImage", c_playerAny));
}

text libWoLC_gf_WC_LocationName (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogLocation, lp_location, "Name", 1));
}

string libWoLC_gf_WC_LocationPlanetModel (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogLocation, lp_location, "PlanetModel", 1));
}

string libWoLC_gf_WC_LocationBackgroundModel (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogLocation, lp_location, "BackgroundModel", 1));
}

void libWoLC_gf_SetPlanetAvailable (string lp_planet, bool lp_available) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Locations", libWoLC_gf_WC_LocationUserData(lp_planet), "Available", 1, BoolToInt(lp_available));
}

text libWoLC_gf_StoryPlanetName (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "Name", c_playerAny));
}

bool libWoLC_gf_StoryPlanetIsAvailable (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Locations", libWoLC_gf_WC_LocationUserData(lp_planet), "Available", 1) == 1);
}

bool libWoLC_gf_MissionAvailableOnPlanet (string lp_planet) {
    // Variable Declarations
    string lv_mission;

    // Automatic Variable Declarations
    int auto11EF2CBB_ae;
    int auto11EF2CBB_ai;

    // Variable Initialization

    // Implementation
    auto11EF2CBB_ae = CatalogEntryCount(c_gameCatalogMap);
    auto11EF2CBB_ai = 1;
    while (auto11EF2CBB_ai <= auto11EF2CBB_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto11EF2CBB_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission" && libWoLC_gf_StoryMapPlanet(lv_mission) == lp_planet) {
            if ((libWoLC_gf_MissionStatusCheck(lv_mission, libWoLC_ge_MissionStatus_Available) == true)) {
                return true;
            }

        }
        auto11EF2CBB_ai = auto11EF2CBB_ai + 1;
    }
    return false;
}

string libWoLC_gf_CurrentLocation () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wCX_CurrentLocation;
}

string libWoLC_gf_WC_LocationCutsceneFilter (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string libWoLC_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wC_CurrentMap;
}

string libWoLC_gf_WC_CampaignMapLoadingScreenImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "Assets\\Textures\\blank.dds";
    }

    if ((lp_map == "TStory01")) {
        return libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage(libWoLC_gf_LastSuccessfulMission());
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingImage", c_playerAny));
}

string libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage (string lp_map) {
    // Automatic Variable Declarations
    string autoB443583C_val;
    int auto0C0AD2CE_val;

    // Implementation
    if (((lp_map == null) || (libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return "Assets\\Textures\\blank.dds";
    }

    autoB443583C_val = lp_map;
    if (autoB443583C_val == "TRaynor01") {
        return "Assets\\Textures\\loading-kerriganphoto.dds";
    }
    else if (autoB443583C_val == "TRaynor02") {
        return "Assets\\Textures\\loading-marsarabar.dds";
    }
    else if (autoB443583C_val == "TRaynor03") {
        return "Assets\\Textures\\loading-terran05.dds";
    }
    else if (autoB443583C_val == "TValerian01") {
        return "Assets\\Textures\\loading-charbattlezone.dds";
    }
    else if (autoB443583C_val == "TValerian02A") {
        return "Assets\\Textures\\loading-charbattlezone.dds";
    }
    else if (autoB443583C_val == "TValerian02B") {
        return "Assets\\Textures\\loading-charbattlezone.dds";
    }
    else if (autoB443583C_val == "TZeratul01") {
        return "Assets\\Textures\\loading-hyperionlab.dds";
    }
    else if (autoB443583C_val == "TZeratul02") {
        return "Assets\\Textures\\loading-hyperionlab.dds";
    }
    else if (autoB443583C_val == "TZeratul03") {
        return "Assets\\Textures\\loading-hyperionlab.dds";
    }
    else if (autoB443583C_val == "TZeratul04") {
        return "Assets\\Textures\\loading-hyperionlab.dds";
    }
    else {
    }
    auto0C0AD2CE_val = RandomInt(1, 9);
    if (auto0C0AD2CE_val == 1) {
        return "Assets\\Textures\\loading-hyperion1.dds";
    }
    else if (auto0C0AD2CE_val == 2) {
        return "Assets\\Textures\\loading-hyperion2.dds";
    }
    else if (auto0C0AD2CE_val == 3) {
        return "Assets\\Textures\\loading-hyperion3.dds";
    }
    else if (auto0C0AD2CE_val == 4) {
        return "Assets\\Textures\\loading-hyperion4.dds";
    }
    else if (auto0C0AD2CE_val == 5) {
        return "Assets\\Textures\\loading-hyperion5.dds";
    }
    else if (auto0C0AD2CE_val == 6) {
        return "Assets\\Textures\\loading-hyperion6.dds";
    }
    else if (auto0C0AD2CE_val == 7) {
        return "Assets\\Textures\\loading-hyperion7.dds";
    }
    else if (auto0C0AD2CE_val == 8) {
        return "Assets\\Textures\\loading-hyperion8.dds";
    }
    else if (auto0C0AD2CE_val == 9) {
        return "Assets\\Textures\\loading-hyperion9.dds";
    }
    else {
    }
    return "Assets\\Textures\\ui_hots_loading_arcselection_background.dds";
}

string libWoLC_gf_WC_CampaignMapMissionArchiveBackgroundImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_map), "ArchivesImage", 1);
}

string libWoLC_gf_WC_CampaignMapMissionArchiveBackgroundImage2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_map), "ArchivesIcon", 1);
}

bool libWoLC_gf_WC_CampaignMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", 1) == (lp_mapType));
}

text libWoLC_gf_WC_CampaignMapDescription (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Description", 1));
}

string libWoLC_gf_WC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", 1);
}

text libWoLC_gf_WC_CampaignMapName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_WoLC_C28FFE1C");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text libWoLC_gf_WC_CampaignMapPrimaryObjective (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "PrimaryObjectiveText", 1));
}

text libWoLC_gf_WC_CampaignMapHelp (string lp_map) {
    // Automatic Variable Declarations
    int autoF0E053D3_val;

    // Implementation
    if (((lp_map == null) || (libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return StringExternal("Param/Value/lib_WoLC_D0D2756E");
    }
    if ((lp_map == "TValerian03")) {
        autoF0E053D3_val = UserDataGetInt("StoryStates", "TValerian03Enemy", "Value", 1);
        if (autoF0E053D3_val == 1) {
            return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "LoadingHelp", 1));
        }
        else if (autoF0E053D3_val == 2) {
            return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "LoadingHelpAlternate", 1));
        }
        else {
            return StringToText("");
        }
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelp", 1));
}

text libWoLC_gf_StoryMapHelp2 (string lp_map) {
    // Variable Declarations
    text lv_summary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summary = StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "Summary", 1));

    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "LoadingBody", 1));
}

string libWoLC_gf_WC_CampaignMapContactPortrait (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactModelLink", 1));
}

string libWoLC_gf_WC_CampaignMapContactActor (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactActor", 1));
}

text libWoLC_gf_WC_CampaignMapContactName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_WoLC_FD131225");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactNameText", 1));
}

text libWoLC_gf_WC_CampaignMapContactTitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_WoLC_34BF09EB");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactTitle", 1));
}

int libWoLC_gf_WC_MissionRewardsBonusPossible (string lp_map, string lp_type) {
    // Variable Declarations
    string lv_indexObjective;
    int lv_count;

    // Automatic Variable Declarations
    int autoC7540D72_ae;
    int autoC7540D72_ai;

    // Variable Initialization

    // Implementation
    autoC7540D72_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_map, "ObjectiveArray", 1);
    autoC7540D72_ai = 1;
    while (autoC7540D72_ai <= autoC7540D72_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_map, "ObjectiveArray["+IntToString(autoC7540D72_ai-1)+"]", 1);
        autoC7540D72_ai = autoC7540D72_ai + 1;
        lv_count += libWoLC_gf_MissionObjectiveRewardsAvailable2(lv_indexObjective, lp_type);
    }
    return lv_count;
}

int libWoLC_gf_WC_MissionRewardsBonusEarned (string lp_map, string lp_type) {
    // Variable Declarations
    string lv_indexObjective;
    int lv_count;

    // Automatic Variable Declarations
    int autoAB93CCE4_ae;
    int autoAB93CCE4_ai;

    // Variable Initialization

    // Implementation
    autoAB93CCE4_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_map, "ObjectiveArray", 1);
    autoAB93CCE4_ai = 1;
    while (autoAB93CCE4_ai <= autoAB93CCE4_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_map, "ObjectiveArray["+IntToString(autoAB93CCE4_ai-1)+"]", 1);
        autoAB93CCE4_ai = autoAB93CCE4_ai + 1;
        lv_count += libWoLC_gf_MissionObjectiveRewardsEarned(lv_indexObjective, lp_type);
    }
    return lv_count;
}

int libWoLC_gf_WC_MissionRewardsCredits (string lp_map) {
    // Variable Declarations
    string lv_userInstance;
    int lv_rewardAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libWoLC_gf_WC_MapUserDataInstance(lp_map);
    lv_rewardAmount = UserDataGetInt("Maps", lv_userInstance, "RewardCredits", 1);
    return lv_rewardAmount;
}

int libWoLC_gf_WC_MissionRewardsProtoss (string lp_map) {
    // Variable Declarations
    string lv_userInstance;
    int lv_rewardAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libWoLC_gf_WC_MapUserDataInstance(lp_map);
    lv_rewardAmount = UserDataGetInt("Maps", lv_userInstance, "RewardProtoss", 1);
    return lv_rewardAmount;
}

int libWoLC_gf_WC_MissionRewardsZerg (string lp_map) {
    // Variable Declarations
    string lv_userInstance;
    int lv_rewardAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libWoLC_gf_WC_MapUserDataInstance(lp_map);
    lv_rewardAmount = UserDataGetInt("Maps", lv_userInstance, "RewardZerg", 1);
    return lv_rewardAmount;
}

bool libWoLC_gf_WC_MissionRewardsDynamicArmyUnit (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "RewardsUnitDynamic", 1) == 1);
}

bool libWoLC_gf_WC_MissionVisibleInUI (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "VisibleInUI", 1) == 1);
}

string libWoLC_gf_StoryMapPlanet (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Location", c_playerAny));
}

int libWoLC_gf_MissionStatus (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed) > 0)) {
        return libWoLC_ge_MissionStatus_Completed;
    }

    if ((libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available) > 0)) {
        return libWoLC_ge_MissionStatus_Available;
    }

    return libWoLC_ge_MissionStatus_Locked;
}

int libWoLC_gf_MissionStatusAge (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int autoF9E6C65E_val;

    // Implementation
    autoF9E6C65E_val = lp_status;
    if (autoF9E6C65E_val == libWoLC_ge_MissionStatus_Available) {
        return UserDataGetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "AvailableAge", 1);
    }
    else if (autoF9E6C65E_val == libWoLC_ge_MissionStatus_Completed) {
        return UserDataGetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "CompletedAge", 1);
    }
    else {
    }
    return 0;
}

int libWoLC_gf_SplitMissionStatusAge (string lp_mission, string lp_mission2, int lp_status) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = libWoLC_gf_MissionStatusAge(lp_mission, lp_status);
    lv_b = libWoLC_gf_MissionStatusAge(lp_mission2, lp_status);

    // Implementation
    if ((lv_a == 0)) {
        return lv_b;
    }
    else if ((lv_b == 0)) {
        return lv_a;
    }
    return MinI(lv_a, lv_b);
}

bool libWoLC_gf_MissionStatusCheck (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_MissionStatus(lp_mission) == lp_status);
}

text libWoLC_gf_MissionDebriefingText (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "Debrief", 1);
}

int libWoLC_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int autoF66EEA27_ae;
    int autoF66EEA27_ai;
    int autoB801740C_val;

    // Variable Initialization

    // Implementation
    autoF66EEA27_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF66EEA27_ai = 1;
    while (autoF66EEA27_ai <= autoF66EEA27_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF66EEA27_ai);
        autoF66EEA27_ai = autoF66EEA27_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoB801740C_val = lp_options;
            if (autoB801740C_val == libWoLC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoB801740C_val == libWoLC_ge_MissionCountOptions_Available) {
                if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoB801740C_val == libWoLC_ge_MissionCountOptions_Completed) {
                if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoB801740C_val == libWoLC_ge_MissionCountOptions_Locked) {
                if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }    
    }
    return lv_total;
}

int libWoLC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "BestTime", libWoLC_gf_WC_DifficultyIndex(lp_difficulty));
}

string libWoLC_gf_WC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

string libWoLC_gf_WC_MapDataFromUserDataInstance (string lp_map) {
    // Variable Declarations
    string lv_indexMap;

    // Automatic Variable Declarations
    int auto1CB5295B_ae;
    int auto1CB5295B_ai;

    // Variable Initialization

    // Implementation
    auto1CB5295B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1CB5295B_ai = 1;
    while (auto1CB5295B_ai <= auto1CB5295B_ae) {
        lv_indexMap = CatalogEntryGet(c_gameCatalogMap, auto1CB5295B_ai);
        if ((libWoLC_gf_WC_MapUserDataInstance(lv_indexMap) == lp_map)) {
            return lv_indexMap;
        }

        auto1CB5295B_ai = auto1CB5295B_ai + 1;
    }
    return null;
}

string libWoLC_gf_WC_StoryMapBankID (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

string libWoLC_gf_MissionArmyCategoryUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_category;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = CatalogFieldValueGet(c_gameCatalogMap, (lp_mission), "ArmyCategory", 1);
    return (lv_value);
}

string libWoLC_gf_MissionArmyCategoryUnlocked2 (string lp_mission) {
    // Variable Declarations
    string lv_indexMercenary;

    // Automatic Variable Declarations
    int autoABB259EA_ai;
    int autoABB259EA_ae;

    // Variable Initialization

    // Implementation
    autoABB259EA_ai = 1;
    autoABB259EA_ae = UserDataInstanceCount("Mercenaries")+1;
    while (autoABB259EA_ai < autoABB259EA_ae) {
        lv_indexMercenary = UserDataInstance("Mercenaries", autoABB259EA_ai);
        autoABB259EA_ai = autoABB259EA_ai+1;
        if ((libWoLC_gf_WC_MercenaryBase(lv_indexMercenary) == libWoLC_gf_MissionArmyCategoryUnlocked(lp_mission))) {
            return lv_indexMercenary;
        }

    }
    return null;
}

int libWoLC_gf_MissionRewardTotalEarned (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    string auto211168F7_val;
    int auto50EF5813_ae;
    int auto50EF5813_ai;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_MissionStatusCheck(lp_mission, libWoLC_ge_MissionStatus_Completed) == false)) {
        return 0;
    }

    auto211168F7_val = lp_type;
    if (auto211168F7_val == "Credits") {
        lv_count = libWoLC_gf_WC_MissionRewardsCredits(lp_mission);
    }
    else if (auto211168F7_val == "ProtossResearch") {
        lv_count = libWoLC_gf_WC_MissionRewardsProtoss(lp_mission);
    }
    else if (auto211168F7_val == "ZergResearch") {
        lv_count = libWoLC_gf_WC_MissionRewardsZerg(lp_mission);
    }
    else {
    }
    auto50EF5813_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto50EF5813_ai = 1;
    while (auto50EF5813_ai <= auto50EF5813_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto50EF5813_ai-1)+"]", 1);
        auto50EF5813_ai = auto50EF5813_ai + 1;
        lv_count += libWoLC_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);
    }
    return lv_count;
}

int libWoLC_gf_MissionRewardTotal (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    string auto6F78A0D9_val;
    int autoB05804E4_ae;
    int autoB05804E4_ai;

    // Variable Initialization

    // Implementation
    auto6F78A0D9_val = lp_type;
    if (auto6F78A0D9_val == "Credits") {
        lv_count = libWoLC_gf_WC_MissionRewardsCredits(lp_mission);
    }
    else if (auto6F78A0D9_val == "ProtossResearch") {
        lv_count = libWoLC_gf_WC_MissionRewardsProtoss(lp_mission);
    }
    else if (auto6F78A0D9_val == "ZergResearch") {
        lv_count = libWoLC_gf_WC_MissionRewardsZerg(lp_mission);
    }
    else {
    }
    autoB05804E4_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoB05804E4_ai = 1;
    while (autoB05804E4_ai <= autoB05804E4_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoB05804E4_ai-1)+"]", 1);
        autoB05804E4_ai = autoB05804E4_ai + 1;
        lv_count += ((libWoLC_gf_MissionObjectiveRewards(lv_objective, lp_type)*libWoLC_gf_MissionObjectiveItemCount(lv_objective))+libWoLC_gf_MissionObjectiveRewards2(lv_objective, lp_type));
    }
    return lv_count;
}

bool libWoLC_gf_WC_MissionisInstallation (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_mission == "THorner05S") || (lp_mission == "TRaynor01") || (lp_mission == "TTosh03A") || (lp_mission == "TTosh03B") || (lp_mission == "TValerian02A") || (lp_mission == "TZeratul01"))) {
        return true;
    }

    return false;
}

bool libWoLC_gf_WC_CampaignMapIsZeratul (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == "TZeratul01") || (lp_map == "TZeratul02") || (lp_map == "TZeratul03") || (lp_map == "TZeratul04"))) {
        return true;
    }

    return false;
}

bool libWoLC_gf_WC_SecretMissionFound () {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("StoryStates", "SecretFound", "Value", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libWoLC_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_MissionCompleteBestTime(lp_mission, lp_difficulty) > 0);
}

int libWoLC_gf_WC_CompletedMissionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    string lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    int auto337D2583_ae;
    int auto337D2583_ai;

    // Variable Initialization

    // Implementation
    auto337D2583_ae = CatalogEntryCount(c_gameCatalogMap);
    auto337D2583_ai = 1;
    while (auto337D2583_ai <= auto337D2583_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto337D2583_ai);
        auto337D2583_ai = auto337D2583_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionCompletedOnDifficulty(lv_indexMission, lp_difficulty) == true)) {
                lv_count += 1;
            }

        }    
    }
    return lv_count;
}

void libWoLC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty) {
    // Variable Declarations
    bool lv_useDebugDialog;
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libWoLC_gf_PrepareForMission(lp_mission, lp_simulation, false, lp_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
}

void libWoLC_gf_StoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_PrepareForStoryMapSwitch(lp_nextMap);
    GameOver(1, c_gameOverVictory, false, false);
}

void libWoLC_gf_UpdateMissionFlow () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto0B1EF333_ae;
    int auto0B1EF333_ai;

    // Variable Initialization

    // Implementation
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TRaynor01", true);
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TRaynor02", libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TRaynor03", libWoLC_gf_MissionStatusCheck("TRaynor02", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THanson01", libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THanson02", libWoLC_gf_MissionStatusCheck("THanson01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THanson03A", ((libWoLC_gf_MissionStatusAge("THanson02", libWoLC_ge_MissionStatus_Completed) > 2) || (libWoLC_gf_MissionStatusCheck("THanson02", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 12))));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THanson03B", ((libWoLC_gf_MissionStatusAge("THanson02", libWoLC_ge_MissionStatus_Completed) > 2) || (libWoLC_gf_MissionStatusCheck("THanson02", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 12))));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "THanson03A", libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "THanson03B", libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTosh01", (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 4));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTosh02", libWoLC_gf_MissionStatusCheck("TTosh01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTosh03A", ((libWoLC_gf_MissionStatusAge("TTosh02", libWoLC_ge_MissionStatus_Completed) > 2) || (libWoLC_gf_MissionStatusCheck("TTosh02", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 13))));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTosh03B", ((libWoLC_gf_MissionStatusAge("TTosh02", libWoLC_ge_MissionStatus_Completed) > 2) || (libWoLC_gf_MissionStatusCheck("TTosh02", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 13))));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "TTosh03A", libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "TTosh03B", libWoLC_gf_MissionStatusCheck("TTosh03A", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THorner01", (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 6));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THorner02", libWoLC_gf_MissionStatusCheck("THorner01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THorner03", libWoLC_gf_MissionStatusCheck("THorner02", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THorner04", libWoLC_gf_MissionStatusCheck("THorner03", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "THorner05S", (libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) && (UserDataGetInt("StoryStates", "SecretFound", "Value", 1) > 0)));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTychus01", libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTychus02", (libWoLC_gf_MissionStatusCheck("TTychus01", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 8)));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTychus03", (libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 11)));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTychus04", (libWoLC_gf_MissionStatusCheck("TTychus03", libWoLC_ge_MissionStatus_Completed) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 14)));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TTychus05", libWoLC_gf_MissionStatusCheck("TTychus04", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TZeratul01", libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TZeratul02", libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TZeratul03", libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TZeratul04", libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TValerian01", libWoLC_gf_MissionStatusCheck("TTychus05", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TValerian02A", libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TValerian02B", libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "TValerian02A", libWoLC_gf_MissionStatusCheck("TValerian02B", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, "TValerian02B", libWoLC_gf_MissionStatusCheck("TValerian02A", libWoLC_ge_MissionStatus_Completed));
    libWoLC_gf_WC_LockUnlockMissionIfCondition(false, "TValerian03", (libWoLC_gf_MissionStatusCheck("TValerian02A", libWoLC_ge_MissionStatus_Completed) || libWoLC_gf_MissionStatusCheck("TValerian02B", libWoLC_ge_MissionStatus_Completed)));
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
        auto0B1EF333_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0B1EF333_ai = 1;
        while (auto0B1EF333_ai <= auto0B1EF333_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0B1EF333_ai);
            auto0B1EF333_ai = auto0B1EF333_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                if ((lv_indexMission != "TValerian01") && (lv_indexMission != "TValerian02A") && (lv_indexMission != "TValerian02B") && (lv_indexMission != "TValerian03")) {
                    libWoLC_gf_WC_LockUnlockMissionIfCondition(true, lv_indexMission, true);
                }

            }    
        }
    }

    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed));
    libWoLC_gf_WC_UpdateCompletedMissionArray();
}

void libWoLC_gf_WC_UpdateCompletedMissionArray () {
    // Variable Declarations
    string lv_indexMision;
    int lv_count;
    int lv_indexOuter;
    int lv_indexInner;
    int lv_indexMin;
    string lv_missionSwap;

    // Automatic Variable Declarations
    int auto8EFDC5D4_ae;
    int auto8EFDC5D4_ai;
    int autoD6C0623A_ae;
    const int autoD6C0623A_ai = 1;
    int auto8CB1B5CF_ae;
    const int auto8CB1B5CF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_count = 0;
    auto8EFDC5D4_ae = UserDataInstanceCount("Maps");
    auto8EFDC5D4_ai = 1;
    while (auto8EFDC5D4_ai <= auto8EFDC5D4_ae) {
        lv_indexMision = libWoLC_gf_WC_MapDataFromUserDataInstance(UserDataInstance("Maps", auto8EFDC5D4_ai));
        if (lv_indexMision != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMision, libWoLC_ge_MissionStatus_Completed) == true)) {
                lv_count += 1;
                libWoLC_gv_wC_MissionCompleted[lv_count] = lv_indexMision;
            }

        }
        auto8EFDC5D4_ai = auto8EFDC5D4_ai + 1;
    }
    autoD6C0623A_ae = (lv_count - 1);
    lv_indexOuter = 1;
    for ( ; ( (autoD6C0623A_ai >= 0 && lv_indexOuter <= autoD6C0623A_ae) || (autoD6C0623A_ai < 0 && lv_indexOuter >= autoD6C0623A_ae) ) ; lv_indexOuter += autoD6C0623A_ai ) {
        lv_indexMin = lv_indexOuter;
        auto8CB1B5CF_ae = lv_count;
        lv_indexInner = (lv_indexOuter + 1);
        for ( ; ( (auto8CB1B5CF_ai >= 0 && lv_indexInner <= auto8CB1B5CF_ae) || (auto8CB1B5CF_ai < 0 && lv_indexInner >= auto8CB1B5CF_ae) ) ; lv_indexInner += auto8CB1B5CF_ai ) {
            if ((libWoLC_gf_MissionStatusAge(libWoLC_gv_wC_MissionCompleted[lv_indexInner], libWoLC_ge_MissionStatus_Completed) > libWoLC_gf_MissionStatusAge(libWoLC_gv_wC_MissionCompleted[lv_indexMin], libWoLC_ge_MissionStatus_Completed))) {
                lv_indexMin = lv_indexInner;
            }

        }
        if ((lv_indexMin != lv_indexOuter)) {
            lv_missionSwap = libWoLC_gv_wC_MissionCompleted[lv_indexOuter];
            libWoLC_gv_wC_MissionCompleted[lv_indexOuter] = libWoLC_gv_wC_MissionCompleted[lv_indexMin];
            libWoLC_gv_wC_MissionCompleted[lv_indexMin] = lv_missionSwap;
        }

    }
}

void libWoLC_gf_WC_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_CurrentMap = lp_map;
}

void libWoLC_gf_WC_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age) {
    // Automatic Variable Declarations
    int auto473F3FDF_val;

    // Implementation
    auto473F3FDF_val = lp_status;
    if (auto473F3FDF_val == libWoLC_ge_MissionStatus_Available) {
        UserDataSetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "AvailableAge", 1, lp_age);
    }
    else if (auto473F3FDF_val == libWoLC_ge_MissionStatus_Completed) {
        UserDataSetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "CompletedAge", 1, lp_age);
    }
    else {
    }
}

void libWoLC_gf_WC_IncreaseMissionAge (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available) > 0)) {
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available, (libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available) + 1));
    }

    if ((libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed) > 0)) {
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed, (libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed) + 1));
    }

}

void libWoLC_gf_WC_CompleteMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMision;

    // Automatic Variable Declarations
    int auto62EF06C0_ae;
    int auto62EF06C0_ai;

    // Variable Initialization

    // Implementation
    if (((lp_mission == null) || (libWoLC_gf_MissionStatusCheck(lp_mission, libWoLC_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libWoLC_gf_WC_MarkMissionAsStatus(lp_mission, libWoLC_ge_MissionStatus_Completed);
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(lp_mission, c_mapKindMission) != true)) {
        return ;
    }

    auto62EF06C0_ae = CatalogEntryCount(c_gameCatalogMap);
    auto62EF06C0_ai = 1;
    while (auto62EF06C0_ai <= auto62EF06C0_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto62EF06C0_ai);
        auto62EF06C0_ai = auto62EF06C0_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((lv_indexMision != lp_mission)) {
                libWoLC_gf_WC_IncreaseMissionAge(lv_indexMision);
            }

        }    
    }
    libWoLC_gf_UpdateMissionFlow();
    libWoLC_gf_WC_UpdateTechStates(1);
}

void libWoLC_gf_WC_UpdateSimulationMissionAges (string lp_simulationMap) {
    // Variable Declarations
    bool lv_lockUlnar4;
    bool lv_lockUlnar2;
    bool lv_lockUlnar3;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto11940D69_ae;
    int auto11940D69_ai;
    string auto943D5E47_val;

    // Variable Initialization

    // Implementation
    auto11940D69_ae = CatalogEntryCount(c_gameCatalogMap);
    auto11940D69_ai = 1;
    while (auto11940D69_ai <= auto11940D69_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto11940D69_ai);
        auto11940D69_ai = auto11940D69_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libWoLC_gf_WC_MarkMissionAsStatus(lv_indexMission, libWoLC_ge_MissionStatus_Completed);
        }    
    }
    libWoLC_gf_WC_MarkMissionAsStatus(lp_simulationMap, libWoLC_ge_MissionStatus_Available);
    auto943D5E47_val = lp_simulationMap;
    if (auto943D5E47_val == "TRaynor01") {
        lv_lockUlnar4 = true;
        lv_lockUlnar2 = true;
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TRaynor02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TRaynor03", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TRaynor02") {
        lv_lockUlnar4 = true;
        lv_lockUlnar2 = true;
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TRaynor03", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TRaynor03") {
        lv_lockUlnar4 = true;
        lv_lockUlnar2 = true;
        lv_lockUlnar3 = true;
    }
    else if (auto943D5E47_val == "THanson01") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THanson02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THanson02") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THanson03A") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THanson03B") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03A", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTosh01") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTosh02") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTosh03A") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03B", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTosh03B") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03A", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THorner01") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THorner02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner05S", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THorner02") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THorner03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner05S", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THorner03") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THorner04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner05S", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THorner04") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("THorner05S", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "THorner05S") {
        lv_lockUlnar3 = true;
    }
    else if (auto943D5E47_val == "TTychus01") {
        lv_lockUlnar3 = true;
        lv_lockUlnar2 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus05", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTychus02") {
        lv_lockUlnar3 = true;
        lv_lockUlnar2 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus05", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTychus03") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus05", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTychus04") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus05", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TTychus05") {
        lv_lockUlnar3 = true;
    }
    else if (auto943D5E47_val == "TValerian01") {
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02B", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian03", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TValerian02A") {
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02B", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian03", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TValerian02B") {
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian03", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TValerian03") {
    }
    else if (auto943D5E47_val == "TZeratul01") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul04", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TZeratul02") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul04", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TZeratul03") {
        lv_lockUlnar3 = true;
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul04", libWoLC_ge_MissionStatus_Locked);
    }
    else if (auto943D5E47_val == "TZeratul04") {
        lv_lockUlnar3 = true;
    }
    else {
    }
    if ((lv_lockUlnar4 == true)) {
        libWoLC_gf_WC_MarkMissionAsStatus("THanson01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THanson03B", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("THorner05S", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTosh03B", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus04", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TTychus05", libWoLC_ge_MissionStatus_Locked);
    }

    if ((lv_lockUlnar2 == true)) {
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul02", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul03", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TZeratul04", libWoLC_ge_MissionStatus_Locked);
    }

    if ((lv_lockUlnar3 == true)) {
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian01", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02A", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian02B", libWoLC_ge_MissionStatus_Locked);
        libWoLC_gf_WC_MarkMissionAsStatus("TValerian03", libWoLC_ge_MissionStatus_Locked);
    }

    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed));
    libWoLC_gf_WC_UpdateCompletedMissionArray();
    libWoLC_gf_WC_UpdateTechStates(1);
    libWoLC_gf_WC_ApplyTech(1);
}

void libWoLC_gf_WC_MarkMissionAsStatus (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int auto5D095F6A_val;

    // Implementation
    auto5D095F6A_val = lp_status;
    if (auto5D095F6A_val == libWoLC_ge_MissionStatus_Locked) {
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available, 0);
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed, 0);
    }
    else if (auto5D095F6A_val == libWoLC_ge_MissionStatus_Available) {
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available, 1);
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed, 0);
    }
    else if (auto5D095F6A_val == libWoLC_ge_MissionStatus_Completed) {
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Available, 0);
        libWoLC_gf_WC_SetMissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libWoLC_gf_WC_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition) {
    // Variable Declarations
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_lockUnlock == true)) {
        lv_label = StringExternal("Param/Value/lib_WoLC_F39E4A30");
    }
    else {
        lv_label = StringExternal("Param/Value/lib_WoLC_156DB19D");
    }
    TextExpressionSetToken("Param/Expression/lib_WoLC_95D73249", "A", lv_label);
    TextExpressionSetToken("Param/Expression/lib_WoLC_95D73249", "B", StringToText((lp_mission)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_95D73249", "C", libNtve_gf_ConvertBooleanToText(lp_condition));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_95D73249"), false);
    if ((lp_condition == true)) {
        if ((lp_lockUnlock == false)) {
            if ((libWoLC_gf_MissionStatusCheck(lp_mission, libWoLC_ge_MissionStatus_Locked) == true)) {
                libWoLC_gf_WC_MarkMissionAsStatus(lp_mission, libWoLC_ge_MissionStatus_Available);
            }

        }
        else {
            if ((libWoLC_gf_MissionStatusCheck(lp_mission, libWoLC_ge_MissionStatus_Available) == true)) {
                libWoLC_gf_WC_MarkMissionAsStatus(lp_mission, libWoLC_ge_MissionStatus_Locked);
            }

        }
    }

}

void libWoLC_gf_WC_SetMissionCompletionBestTime (string lp_mission, int lp_difficulty, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_time < 0)) {
        return ;
    }

    UserDataSetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_mission), "BestTime", libWoLC_gf_WC_DifficultyIndex(lp_difficulty), lp_time);
}

void libWoLC_gf_WC_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_progressThisMission;

    // Automatic Variable Declarations
    int auto9151DF10_ae;
    int auto9151DF10_ai;
    int autoE587A7FB_ae;
    int autoE587A7FB_ai;
    int auto3A779D38_ae;
    int auto3A779D38_ai;
    int auto0DED59AB_ae;
    int auto0DED59AB_ai;
    int auto91FEB783_ae;
    int auto91FEB783_ai;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionBestTime");
        auto9151DF10_ae = CatalogEntryCount(c_gameCatalogMap);
        auto9151DF10_ai = 1;
        while (auto9151DF10_ai <= auto9151DF10_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto9151DF10_ai);
            auto9151DF10_ai = auto9151DF10_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 1), libWoLC_gf_MissionCompleteBestTime(lv_indexMission, 1), -1);
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 2), libWoLC_gf_MissionCompleteBestTime(lv_indexMission, 2), -1);
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 3), libWoLC_gf_MissionCompleteBestTime(lv_indexMission, 3), -1);
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 4), libWoLC_gf_MissionCompleteBestTime(lv_indexMission, 4), -1);
            }    
        }
        libWoLC_gf_WC_ArchiveBankSave();
    }

    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionObjectives");
    if ((lp_isSimulation == true)) {
        autoE587A7FB_ae = CatalogFieldValueCount(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray", 1);
        autoE587A7FB_ai = 1;
        while (autoE587A7FB_ai <= autoE587A7FB_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoE587A7FB_ai-1)+"]", 1);
            autoE587A7FB_ai = autoE587A7FB_ai + 1;
            if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                lv_progressThisMission = libWoLC_gf_MissionObjectiveProgress(lv_indexObjective);
                UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, libWoLC_gf_PS_MissionObjectivePreviousProgress(lv_indexObjective));
                UserDataSaveInstance("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
                UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_progressThisMission);
            }

        }
    }
    else {
        auto3A779D38_ae = CatalogEntryCount(c_gameCatalogObjective);
        auto3A779D38_ai = 1;
        while (auto3A779D38_ai <= auto3A779D38_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto3A779D38_ai);
            auto3A779D38_ai = auto3A779D38_ai + 1;
            if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataSaveInstance("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
            }

        }
    }
    if ((lp_isSimulation == true)) {
        return ;
    }

    if ((lp_bankMap == null)) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        auto0DED59AB_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0DED59AB_ai = 1;
        while (auto0DED59AB_ai <= auto0DED59AB_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0DED59AB_ai);
            auto0DED59AB_ai = auto0DED59AB_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_StoryMapBankID(lv_indexMission), libWoLC_gf_MissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Available), 0);
            }    
        }
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        auto91FEB783_ae = CatalogEntryCount(c_gameCatalogMap);
        auto91FEB783_ai = 1;
        while (auto91FEB783_ai <= auto91FEB783_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto91FEB783_ai);
            auto91FEB783_ai = auto91FEB783_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libWoLC_gf_WC_StoryMapBankID(lv_indexMission), libWoLC_gf_MissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Completed), 0);
            }    
        }
    }

}

void libWoLC_gf_WC_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int auto26C5E377_ae;
    int auto26C5E377_ai;
    int autoF578A552_ae;
    int autoF578A552_ai;
    int auto0D63639B_ae;
    int auto0D63639B_ai;
    int auto0F43F678_ae;
    int auto0F43F678_ai;
    int autoC7E73029_ae;
    int autoC7E73029_ai;
    int autoFE45BAE8_ae;
    int autoFE45BAE8_ai;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        autoF578A552_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF578A552_ai = 1;
        while (autoF578A552_ai <= autoF578A552_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF578A552_ai);
            autoF578A552_ai = autoF578A552_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SetMissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Available, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_StoryMapBankID(lv_indexMission), 0));
            }    
        }
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        auto0D63639B_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0D63639B_ai = 1;
        while (auto0D63639B_ai <= auto0D63639B_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0D63639B_ai);
            auto0D63639B_ai = auto0D63639B_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SetMissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Completed, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_StoryMapBankID(lv_indexMission), 0));
            }    
        }
        if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true)) {
            libWoLC_gv_wC_InCompletedCampaign = true;
        }

        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionBestTime");
        auto0F43F678_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0F43F678_ai = 1;
        while (auto0F43F678_ai <= auto0F43F678_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0F43F678_ai);
            auto0F43F678_ai = auto0F43F678_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libWoLC_gf_WC_SetMissionCompletionBestTime(lv_indexMission, 1, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 1), -1));
                libWoLC_gf_WC_SetMissionCompletionBestTime(lv_indexMission, 2, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 2), -1));
                libWoLC_gf_WC_SetMissionCompletionBestTime(lv_indexMission, 3, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 3), -1));
                libWoLC_gf_WC_SetMissionCompletionBestTime(lv_indexMission, 4, libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, 4), -1));
            }    
        }
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionObjectives");
        autoC7E73029_ae = CatalogEntryCount(c_gameCatalogObjective);
        autoC7E73029_ai = 1;
        while (autoC7E73029_ai <= autoC7E73029_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoC7E73029_ai);
            autoC7E73029_ai = autoC7E73029_ai + 1;
            if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataLoadInstance("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
            }

        }
        libWoLC_gf_WC_ArchiveBankLoad();
        autoFE45BAE8_ae = CatalogFieldValueCount(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray", 1);
        autoFE45BAE8_ai = 1;
        while (autoFE45BAE8_ai <= autoFE45BAE8_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoFE45BAE8_ai-1)+"]", 1);
            autoFE45BAE8_ai = autoFE45BAE8_ai + 1;
            if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                libWoLC_gf_PS_MissionObjectivePreviousProgressSet(lv_indexObjective, libWoLC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

        }
    }
    else {
        if ((libWoLC_gf_WC_CampaignIsComplete() == false)) {
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_bankMap, "MissionObjectives");
            auto26C5E377_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_bankMap, "ObjectiveArray", 1);
            auto26C5E377_ai = 1;
            while (auto26C5E377_ai <= auto26C5E377_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_bankMap, "ObjectiveArray["+IntToString(auto26C5E377_ai-1)+"]", 1);
                auto26C5E377_ai = auto26C5E377_ai + 1;
                if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                    UserDataResetInstance("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective));
                    UserDataLoadInstance("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
                }

            }
        }

    }
    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed));
}

void libWoLC_gf_WC_MissionObjectiveSpecialDataSet (string lp_objective, text lp_special) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetText("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Special", 1, lp_special);
}

void libWoLC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_increase;
    int lv_currentXPLevel;
    int lv_actualProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actualProgress = lp_progress;
    if ((lv_actualProgress < 0)) {
        lv_actualProgress = 0;
        TextExpressionSetToken("Param/Expression/lib_WoLC_F246913F", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_WoLC_F246913F", "B", IntToText(lp_progress));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_F246913F"), true);
    }

    if ((lv_actualProgress > libWoLC_gf_MissionObjectiveItemCount(lp_objective))) {
        lv_actualProgress = libWoLC_gf_MissionObjectiveItemCount(lp_objective);
        TextExpressionSetToken("Param/Expression/lib_WoLC_E44EA667", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_WoLC_E44EA667", "B", IntToText(lp_progress));
        TextExpressionSetToken("Param/Expression/lib_WoLC_E44EA667", "C", IntToText(libWoLC_gf_MissionObjectiveItemCount(lp_objective)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_E44EA667"), true);
    }

    if ((libWoLC_gf_PS_ObjectiveCountsDown(lp_objective) == true)) {
        lp_progress = (libWoLC_gf_MissionObjectiveItemCount(lp_objective) - lp_progress);
    }

    lv_increase = (lp_progress - libWoLC_gf_MissionObjectiveProgress(lp_objective));
    UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if (((libWoLC_gf_MissionObjectiveIsPrimary(lp_objective) == true) || (lv_increase <= 0))) {
        return ;
    }

}

void libWoLC_gf_PS_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("WC_BestObj_" + (lp_objective)), lp_progress);
}

void libWoLC_gf_PS_MissionObjectiveArchiveProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_4D7EC61D", "A", StringToText((lp_objective)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_4D7EC61D", "B", IntToText(lp_progress));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_4D7EC61D"), false);
    DataTableSetInt(true, ("WC_ArchiveObj_" + (lp_objective)), lp_progress);
}

text libWoLC_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libWoLC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libWoLC_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libWoLC_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libWoLC_ge_MissionObjectiveState_Undiscovered) && (UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 0) && (UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 0)) {
        return true;
    }

    return false;
}

bool libWoLC_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_PS_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libWoLC_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libWoLC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    lv_rewards = (libWoLC_gf_MissionObjectiveRewards(lp_objective, lp_type) * libWoLC_gf_MissionObjectiveProgress(lp_objective));
    if ((libWoLC_gf_MissionObjectiveStateCheck(lp_objective, libWoLC_ge_MissionObjectiveState_Completed) == true)) {
        lv_rewards += libWoLC_gf_MissionObjectiveRewards2(lp_objective, lp_type);
    }

    return lv_rewards;
}

int libWoLC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return ((libWoLC_gf_MissionObjectiveRewards(lp_objective, lp_type)*libWoLC_gf_MissionObjectiveItemCount(lp_objective))+libWoLC_gf_MissionObjectiveRewards2(lp_objective, lp_type));
}

int libWoLC_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", 1);
}

int libWoLC_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

text libWoLC_gf_MissionObjectiveSpecial (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Special", 1);
}

int libWoLC_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto270C1A28_val;

    // Variable Initialization

    // Implementation
    auto270C1A28_val = lp_type;
    if (auto270C1A28_val == "Credits") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardCreditsEach", 1);
    }
    else if (auto270C1A28_val == "ProtossResearch") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardProtossEach", 1);
    }
    else if (auto270C1A28_val == "ZergResearch") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardZergEach", 1);
    }
    else {
    }
    return 0;
}

int libWoLC_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto4CF502E0_val;

    // Variable Initialization

    // Implementation
    auto4CF502E0_val = lp_type;
    if (auto4CF502E0_val == "Credits") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardCreditsFinal", 1);
    }
    else if (auto4CF502E0_val == "ProtossResearch") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardProtossFinal", 1);
    }
    else if (auto4CF502E0_val == "ZergResearch") {
        return UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardZergFinal", 1);
    }
    else {
    }
    return 0;
}

text libWoLC_gf_PS_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false) && (libWoLC_gf_MissionObjectiveIsPrimary(lp_objective) == false)) {
        if ((libWoLC_gf_MissionObjectiveRewards(lp_objective, "Credits") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_BA7BC95E", "A", FormatNumber(libWoLC_gf_MissionObjectiveRewards(lp_objective, "Credits")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_BA7BC95E");
        }

        if ((libWoLC_gf_MissionObjectiveRewards2(lp_objective, "Credits") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_7FEC376F", "A", FormatNumber(libWoLC_gf_MissionObjectiveRewards2(lp_objective, "Credits")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_7FEC376F");
        }

        if ((libWoLC_gf_MissionObjectiveRewards(lp_objective, "ProtossResearch") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_68515B52", "A", IntToText(libWoLC_gf_MissionObjectiveRewards(lp_objective, "ProtossResearch")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_68515B52");
        }

        if ((libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ProtossResearch") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_A5769BA3", "A", IntToText(libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ProtossResearch")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_A5769BA3");
        }

        if ((libWoLC_gf_MissionObjectiveRewards(lp_objective, "ZergResearch") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_71F76762", "A", IntToText(libWoLC_gf_MissionObjectiveRewards(lp_objective, "ZergResearch")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_71F76762");
        }

        if ((libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ZergResearch") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_WoLC_EA136AA4", "A", IntToText(libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ZergResearch")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_WoLC_EA136AA4");
        }

    }

    return lv_bonusText;
}

int libWoLC_gf_PS_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objectiveData));
}

string libWoLC_gf_PS_ObjectiveUserDataInstance (string lp_objective) {
    // Variable Declarations
    string lv_objectiveInstance;
    int lv_index;

    // Automatic Variable Declarations
    int autoFCDD7321_ae;
    const int autoFCDD7321_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = DataTableGetInt(true, ("PObjIndex_" + (lp_objective)));
    if ((lv_index == 0)) {
        lv_objectiveInstance = UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", 1));
        autoFCDD7321_ae = UserDataInstanceCount("MissionObjective");
        lv_index = 1;
        for ( ; ( (autoFCDD7321_ai >= 0 && lv_index <= autoFCDD7321_ae) || (autoFCDD7321_ai < 0 && lv_index >= autoFCDD7321_ae) ) ; lv_index += autoFCDD7321_ai ) {
            if ((UserDataInstance("MissionObjective", lv_index) == lv_objectiveInstance)) {
                DataTableSetInt(true, ("PObjIndex_" + (lp_objective)), lv_index);
                break;
            }

        }
    }
    else {
        lv_objectiveInstance = UserDataInstance("MissionObjective", lv_index);
    }
    return lv_objectiveInstance;
}

int libWoLC_gf_PS_MissionObjectivePreviousProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("WC_BestObj_" + (lp_objective)));
}

int libWoLC_gf_PS_MissionObjectiveArchiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("WC_ArchiveObj_" + (lp_objective)));
}

int libWoLC_gf_PS_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libWoLC_gf_PS_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

string libWoLC_gf_PS_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("WS_Obj_" + (lp_objective));
}

bool libWoLC_gf_PS_ObjectiveCountsDown (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "CountDown", 1) == 1);
}

void libWoLC_gf_WC_MovieStartRecording (string lp_fileName) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_MovieRecordingCount += 1;
    if ((libWoLC_gv_wC_MovieRecordingCount != 1)) {
        return ;
    }

    MovieStartRecording(lp_fileName);
}

void libWoLC_gf_WC_MovieStopRecording () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_MovieRecordingCount -= 1;
    if ((libWoLC_gv_wC_MovieRecordingCount == 0)) {
        MovieStopRecording();
    }

}

void libWoLC_gf_DisplayConversationTimestamp (string lp_conversation) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto597833BA_ae;
    const int auto597833BA_ai = 1;

    // Variable Initialization

    // Implementation
    auto597833BA_ae = UserDataInstanceCount("Timestamps");
    lv_index = 1;
    for ( ; ( (auto597833BA_ai >= 0 && lv_index <= auto597833BA_ae) || (auto597833BA_ai < 0 && lv_index >= auto597833BA_ae) ) ; lv_index += auto597833BA_ai ) {
        if ((UserDataGetGameLink("Timestamps", UserDataInstance("Timestamps", lv_index), "Conversation", 1) == lp_conversation)) {
            if ((UserDataGetInt("Timestamps", UserDataInstance("Timestamps", lv_index), "Wait", 1) == 1)) {
                libWoLC_gf_DisplayTimestamp(UserDataInstance("Timestamps", lv_index), true);
            }
            else {
                libWoLC_gf_DisplayTimestamp(UserDataInstance("Timestamps", lv_index), false);
            }
            return ;
        }

    }
}

void libWoLC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait) {
    // Variable Declarations
    bool lv_cinematicOn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libWoLC_gv_wC_CutsceneTimestamp = lp_timestamp;
    if ((lp_waitDontWait == true)) {
        lv_cinematicOn = libNtve_gf_PlayerInCinematicMode(1);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerExecute(libWoLC_gt_WC_DisplayTimestampSkippable, true, true);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(0.625, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

    }
    else {
        TriggerExecute(libWoLC_gt_WC_DisplayTimestamp, true, false);
    }
}

void libWoLC_gf_HaltTimestamp () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libWoLC_gt_WC_DisplayTimestampSkippable);
    TriggerStop(libWoLC_gt_WC_DisplayTimestamp);
    UIHideTextCrawl(PlayerGroupAll());
}

void libWoLC_gf_WC_DisplayCinematicTimestamp (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
}

string libWoLC_gf_StorySceneMovie (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("Scenes", lp_scene, "SceneFile", 1);
}

string libWoLC_gf_StorySceneCutscene (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

trigger libWoLC_gf_StorySceneCallback (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, ("Kit_SceneCallback|" + (lp_scene)));
}

void libWoLC_gf_RegisterSceneCallback (string lp_scene, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, ("Kit_SceneCallback|" + (lp_scene)), lp_callback);
}

text libWoLC_gf_StorySceneName (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Scenes", lp_scene, "Name", 1);
}

bool libWoLC_gf_StoryScenePlayed (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Scenes", lp_scene, "Played", 1) > 0);
}

void libWoLC_gf_SetStoryScenePlayed (string lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_played == true)) {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    }
    else {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 0);
    }
}

void libWoLC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    CutsceneCreateNew(lp_file, lp_position, 0.0, PlayerGroupAll(), true);
    libWoLC_gv_wC_CurrentCampaignCutscene = CutsceneLastCreated();
    libWoLC_gv_wC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    TriggerExecute(libWoLC_gt_WC_WaitForCutscene, true, lp_waitDontWait);
}

void libWoLC_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libWoLC_gv_wC_CampaignCutsceneDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
    libWoLC_gv_wC_CurrentCampaignCutscene = CutsceneGetTriggerControl(DialogControlLastCreated());
    libWoLC_gv_wC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    CutscenePlay(libWoLC_gv_wC_CurrentCampaignCutscene);
    TriggerExecute(libWoLC_gt_WC_WaitForDialogCutscene, true, lp_waitDontWait);
}

void libWoLC_gf_CampaignStopCutscene () {
    // Automatic Variable Declarations
    // Implementation
    if (((TriggerActiveCount(libWoLC_gt_WC_WaitForCutscene) > 0) || (TriggerActiveCount(libWoLC_gt_WC_WaitForDialogCutscene) > 0))) {
        TriggerStop(libWoLC_gt_WC_WaitForCutscene);
        TriggerStop(libWoLC_gt_WC_WaitForDialogCutscene);
        libWoLC_gf_WC_StatEventAddInt("Completed", 0, libWoLC_gv_wC_SceneStatEvent);
    }

    CutsceneStop(libWoLC_gv_wC_CurrentCampaignCutscene);
    DialogDestroy(libWoLC_gv_wC_CampaignCutsceneDialog);
}

void libWoLC_gf_PlayCinematic (string lp_scene, bool lp_animatic) {
    // Variable Declarations
    bool lv_wasStoryMode;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    libWoLC_gf_WC_StatEventCreate("ScenePlay");
    libWoLC_gf_WC_StatEventAddStr("ID", (lp_scene), libWoLC_gf_WC_StatEventLast());
    libWoLC_gv_wC_SceneStatEvent = StatEventLastCreated();
    if ((libWoLC_gf_StorySceneCallback(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        lv_wasStoryMode = libNtve_gf_PlayerInStoryMode(1);
        libNtve_gf_StoryMode(PlayerGroupAll(), true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        TriggerExecute(libWoLC_gf_StorySceneCallback(lp_scene), true, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        if ((lv_wasStoryMode == false)) {
            libNtve_gf_StoryMode(PlayerGroupAll(), false);
        }

        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        libWoLC_gf_WC_StatEventDone(libWoLC_gv_wC_SceneStatEvent);
        return ;
    }

    if ((libWoLC_gf_StorySceneCutscene(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        lv_wasStoryMode = libNtve_gf_PlayerInStoryMode(1);
        libNtve_gf_StoryMode(PlayerGroupAll(), true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        libWoLC_gf_WC_MovieStartRecording(UserDataGetString("Scenes", lp_scene, "RecordFileName", 1));
        libWoLC_gf_WC_DisplayCinematicTimestamp(lp_scene);
        libWoLC_gf_CampaignPlayCutscene2(libWoLC_gf_StorySceneCutscene(lp_scene), true, true);
        libWoLC_gf_WC_MovieStopRecording();
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        if ((lv_wasStoryMode == false)) {
            libNtve_gf_StoryMode(PlayerGroupAll(), false);
        }

        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        libWoLC_gf_WC_StatEventDone(libWoLC_gv_wC_SceneStatEvent);
        return ;
    }

    if ((libWoLC_gf_StorySceneMovie(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true)) {
            UISetWorldVisible(PlayerGroupAll(), false);
        }

        libWoLC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryMovie, PlayerGroupAll());
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        if ((libWoLC_gv_wC_LoadingComplete == false)) {
            SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
        }

        libWoLC_gv_wC_PlaySceneCurrentScene = lp_scene;
        libWoLC_gf_WC_DisplayCinematicTimestamp(lp_scene);
        TriggerExecute(libWoLC_gt_WC_PlaySceneSkippable, true, true);
        libWoLC_gf_HaltTimestamp();
        TransmissionClearAll();
        libWoLC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryMovie, PlayerGroupAll());
        if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true)) {
            UISetWorldVisible(PlayerGroupAll(), true);
        }

        libWoLC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        libWoLC_gf_WC_StatEventDone(libWoLC_gv_wC_SceneStatEvent);
        return ;
    }

}

void libWoLC_gf_WC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

string libWoLC_gf_GetConscriptionEntryForUnit (string lp_unitType) {
    // Variable Declarations
    string lv_unitConscriptionData;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return null;
}

string libWoLC_gf_EnableUnit (string lp_unitType) {
    // Variable Declarations
    string lv_unitConscriptionData;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return "";
}

string libWoLC_gf_DisableUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string libWoLC_gf_PurchaseUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string libWoLC_gf_RefundUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string libWoLC_gf_ExecuteConscriptionAction (int lp_actionType, string lp_unitType) {
    // Variable Declarations
    string lv_errorString;

    // Automatic Variable Declarations
    int auto979691FF_val;

    // Variable Initialization
    lv_errorString = "";

    // Implementation
    auto979691FF_val = lp_actionType;
    if (auto979691FF_val == libWoLC_ge_ConscriptionActionType_EnableUnit) {
        lv_errorString = libWoLC_gf_EnableUnit(lp_unitType);
    }
    else if (auto979691FF_val == libWoLC_ge_ConscriptionActionType_DisableUnit) {
        lv_errorString = libWoLC_gf_DisableUnit(lp_unitType);
    }
    else if (auto979691FF_val == libWoLC_ge_ConscriptionActionType_PurchaseUnit) {
        lv_errorString = libWoLC_gf_PurchaseUnit(lp_unitType);
    }
    else if (auto979691FF_val == libWoLC_ge_ConscriptionActionType_RefundUnit) {
        lv_errorString = libWoLC_gf_RefundUnit(lp_unitType);
    }
    else {
        return "action type not implemented";
    }
    return lv_errorString;
}

int libWoLC_gf_ParseConscriptionActionType (string lp_actionTypeName) {
    // Automatic Variable Declarations
    string auto130814E7_val;

    // Implementation
    auto130814E7_val = StringCase(lp_actionTypeName, false);
    if (auto130814E7_val == "enable") {
        return libWoLC_ge_ConscriptionActionType_EnableUnit;
    }
    else if (auto130814E7_val == "disable") {
        return libWoLC_ge_ConscriptionActionType_DisableUnit;
    }
    else if (auto130814E7_val == "purchase") {
        return libWoLC_ge_ConscriptionActionType_PurchaseUnit;
    }
    else if (auto130814E7_val == "refund") {
        return libWoLC_ge_ConscriptionActionType_RefundUnit;
    }
    else {
        return libWoLC_ge_ConscriptionActionType_None;
    }
}

string libWoLC_gf_ParseUnitType (string lp_unitTypeName) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringEqual(lp_unitTypeName, "", c_stringNoCase) == true)) {
        return null;
    }
    else {
        lv_unitType = UnitTypeFromString(lp_unitTypeName);
    }
    if (((lv_unitType == null) || (lv_unitType == ""))) {
        return null;
    }

    return lv_unitType;
}

string libWoLC_gf_ExecuteConscriptionActionString (string lp_actionTypeName, string lp_unitTypeName) {
    // Variable Declarations
    int lv_actionType;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actionType = libWoLC_gf_ParseConscriptionActionType(lp_actionTypeName);
    if ((lv_actionType == libWoLC_ge_ConscriptionActionType_None)) {
        return "invalid action type name";
    }

    lv_unitType = libWoLC_gf_ParseUnitType(lp_unitTypeName);
    if ((lv_unitType == null)) {
        return "invalid unit type name";
    }

    return libWoLC_gf_ExecuteConscriptionAction(lv_actionType, lv_unitType);
}

bool libWoLC_gf_CampaignMercenaryStateCheck (string lp_mercenary, string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_WC_MercenaryState(lp_mercenary) == lp_state);
}

string libWoLC_gf_WC_MercenaryState (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_WC_MercenaryPurchased(lp_mercenary) == true)) {
        return "Purchased";
    }
    else if ((libWoLC_gf_WC_ArmyCategoryState(libWoLC_gf_WC_MercenaryBase(lp_mercenary)) == c_armyCategoryStateLocked)) {
        return "Locked";
    }
    else if ((libWoLC_gf_WC_MercenaryCost(lp_mercenary) > libWoLC_gf_CreditsAvailable())) {
        return "Insufficient";
    }
    return "Available";
}

text libWoLC_gf_WC_MercenaryName (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mercenaries", lp_mercenary, "Name", 1);
}

text libWoLC_gf_WC_MercenaryDescription (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mercenaries", lp_mercenary, "Description", 1);
}

text libWoLC_gf_WC_MercenarySquad (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mercenaries", lp_mercenary, "Squad", 1);
}

text libWoLC_gf_WC_MercenaryAvailability (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mercenaries", lp_mercenary, "Availability", 1);
}

text libWoLC_gf_WC_MercenarySpecial (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mercenaries", lp_mercenary, "Special", 1);
}

int libWoLC_gf_WC_MercenaryCost (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Mercenaries", lp_mercenary, "Cost", 1);
}

string libWoLC_gf_WC_MercenaryMovie (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("Mercenaries", lp_mercenary, "Movie", 1);
}

string libWoLC_gf_WC_MercenaryPortrait (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetModel("Mercenaries", lp_mercenary, "Portrait", 1);
}

string libWoLC_gf_WC_MercenaryPortraitStatic (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogModel, libWoLC_gf_WC_MercenaryPortrait(lp_mercenary), "Image", 1));
}

string libWoLC_gf_WC_MercenaryBase (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Mercenaries", lp_mercenary, "Base", 1);
}

string libWoLC_gf_WC_MercenaryArmyCategory (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Mercenaries", lp_mercenary, "Unit", 1);
}

bool libWoLC_gf_WC_MercenaryPurchased (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, (libWoLC_gv_wCC_MercenaryPurchasedKey + (lp_mercenary)));
}

bool libWoLC_gf_WC_AnyMercenaryPurchased () {
    // Variable Declarations
    string lv_indexMercenary;

    // Automatic Variable Declarations
    int auto826FCC1A_ai;
    int auto826FCC1A_ae;

    // Variable Initialization

    // Implementation
    auto826FCC1A_ai = 1;
    auto826FCC1A_ae = UserDataInstanceCount("Mercenaries")+1;
    while (auto826FCC1A_ai < auto826FCC1A_ae) {
        lv_indexMercenary = UserDataInstance("Mercenaries", auto826FCC1A_ai);
        auto826FCC1A_ai = auto826FCC1A_ai+1;
        if ((libWoLC_gf_WC_MercenaryPurchased(lv_indexMercenary) == true)) {
            return true;
        }

    }
    return false;
}

void libWoLC_gf_WC_MercenarySetPurchased (string lp_mercenary, bool lp_purchased) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, (libWoLC_gv_wCC_MercenaryPurchasedKey + (lp_mercenary)), lp_purchased);
}

void libWoLC_gf_WC_SaveMercenaryToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoAAAE77CA_ai;
    int autoAAAE77CA_ae;

    // Variable Initialization

    // Implementation
    autoAAAE77CA_ai = 1;
    autoAAAE77CA_ae = UserDataInstanceCount("Mercenaries")+1;
    while (autoAAAE77CA_ai < autoAAAE77CA_ae) {
        lv_indexCategory = UserDataInstance("Mercenaries", autoAAAE77CA_ai);
        autoAAAE77CA_ai = autoAAAE77CA_ai+1;
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_bank, lp_section, (lv_indexCategory), libWoLC_gf_WC_MercenaryPurchased(lv_indexCategory), false);
    }
}

void libWoLC_gf_WC_LoadMercenaryFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexMercenary;

    // Automatic Variable Declarations
    int autoA0FDC62E_ai;
    int autoA0FDC62E_ae;

    // Variable Initialization

    // Implementation
    autoA0FDC62E_ai = 1;
    autoA0FDC62E_ae = UserDataInstanceCount("Mercenaries")+1;
    while (autoA0FDC62E_ai < autoA0FDC62E_ae) {
        lv_indexMercenary = UserDataInstance("Mercenaries", autoA0FDC62E_ai);
        autoA0FDC62E_ai = autoA0FDC62E_ai+1;
        libWoLC_gf_WC_MercenarySetPurchased(lv_indexMercenary, libWoLC_gf_WC_LoadTransitionVarBoolean(lp_bank, lp_section, (lv_indexMercenary), false));
    }
}

void libWoLC_gf_EnableCampaignMercenary (bool lp_enableDisable, string lp_mercenary) {
    // Variable Declarations
    int lv_indexTech;
    bool lv_allowDisallow;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((libWoLC_gf_WC_MercenaryArmyCategory(lp_mercenary) != null)) {
        libWoLC_gf_EnableCampaignTechUnit(lp_enableDisable, libWoLC_gf_WC_TechUnitOfArmyCategory(libWoLC_gf_WC_MercenaryArmyCategory(lp_mercenary)), 1);
    }

}

void libWoLC_gf_WC_ApplyMercenaryTech () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoC50548DC_ai;
    int autoC50548DC_ae;
    int auto7AD58CEF_ai;
    int auto7AD58CEF_ae;

    // Variable Initialization

    // Implementation
    autoC50548DC_ai = 1;
    autoC50548DC_ae = UserDataInstanceCount("Mercenaries")+1;
    while (autoC50548DC_ai < autoC50548DC_ae) {
        lv_indexCategory = UserDataInstance("Mercenaries", autoC50548DC_ai);
        autoC50548DC_ai = autoC50548DC_ai+1;
        libWoLC_gf_EnableCampaignMercenary(false, lv_indexCategory);
    }
    auto7AD58CEF_ai = 1;
    auto7AD58CEF_ae = UserDataInstanceCount("Mercenaries")+1;
    while (auto7AD58CEF_ai < auto7AD58CEF_ae) {
        lv_indexCategory = UserDataInstance("Mercenaries", auto7AD58CEF_ai);
        auto7AD58CEF_ai = auto7AD58CEF_ai+1;
        if ((libWoLC_gf_WC_MercenaryPurchased(lv_indexCategory) == true)) {
            libWoLC_gf_EnableCampaignMercenary(true, lv_indexCategory);
        }

    }
}

void libWoLC_gf_WC_MercenaryResetAll () {
    // Variable Declarations
    string lv_indexMercenary;

    // Automatic Variable Declarations
    int auto409AE2A9_ai;
    int auto409AE2A9_ae;

    // Variable Initialization

    // Implementation
    auto409AE2A9_ai = 1;
    auto409AE2A9_ae = UserDataInstanceCount("Mercenaries")+1;
    while (auto409AE2A9_ai < auto409AE2A9_ae) {
        lv_indexMercenary = UserDataInstance("Mercenaries", auto409AE2A9_ai);
        auto409AE2A9_ai = auto409AE2A9_ai+1;
        libWoLC_gf_WC_MercenarySetPurchased(lv_indexMercenary, false);
    }
}

string libWoLC_gf_WC_ArmyCategoryUpgrade (string lp_armyCategory, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray[" + IntToString(lp_index) + "]", 1));
}

string libWoLC_gf_WC_TechUpgradeOfArmyUpgrade (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "UserReference", 1));
}

string libWoLC_gf_WC_ArmyUpgradeState (string lp_armyUpgrade) {
    // Variable Declarations
    int lv_user;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_WC_ArmyUpgradePurchased(lp_armyUpgrade) == true)) {
        return "Purchased";
    }

    if ((libWoLC_gf_WC_ArmyUpgradeRequiredMissions(lp_armyUpgrade) > 0) && (libWoLC_gf_WC_ArmyUpgradeRequiredMissions(lp_armyUpgrade) > libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed))) {
        return "Locked";
    }

    if ((libWoLC_gf_WC_ArmyUpgradeCost(lp_armyUpgrade) > libWoLC_gf_CreditsAvailable())) {
        return "Insufficient";
    }

    return "Available";
}

text libWoLC_gf_WC_ArmyUpgradeName (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Name", 1));
}

text libWoLC_gf_WC_ArmyUpgradeDescription (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Description", 1));
}

text libWoLC_gf_WC_ArmyUpgradeTooltip (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Tooltip", 1));
}

int libWoLC_gf_WC_ArmyUpgradeCost (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringToInt(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "Cost", 1));
}

int libWoLC_gf_WC_ArmyUpgradeRequiredMissions (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("TechUpgrade", libWoLC_gf_WC_TechUpgradeOfArmyUpgrade(lp_armyUpgrade), "RequiredMissions", 1);
}

string libWoLC_gf_WC_ArmyUpgradeIcon (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "Icon", 1));
}

string libWoLC_gf_WC_ArmyUpgradeMovie (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "Movie", 1));
}

string libWoLC_gf_WC_ArmyUpgradeImage (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("TechUpgrade", libWoLC_gf_WC_TechUpgradeOfArmyUpgrade(lp_armyUpgrade), "Image", 1);
}

bool libWoLC_gf_WC_ArmyUpgradePurchased (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, (libWoLC_gv_wCC_ArmyUpgradePurchasedKey + (lp_armyUpgrade)));
}

void libWoLC_gf_WC_ArmyUpgradeSetPurchased (string lp_armyUpgrade, bool lp_purchased) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, (libWoLC_gv_wCC_ArmyUpgradePurchasedKey + (lp_armyUpgrade)), lp_purchased);
}

void libWoLC_gf_WC_ArmyUpgradeResetAll () {
    // Variable Declarations
    string lv_upgrade;

    // Automatic Variable Declarations
    int autoDF6D22AD_ae;
    int autoDF6D22AD_ai;

    // Variable Initialization

    // Implementation
    autoDF6D22AD_ae = CatalogEntryCount(c_gameCatalogArmyUpgrade);
    autoDF6D22AD_ai = 1;
    while (autoDF6D22AD_ai <= autoDF6D22AD_ae) {
        lv_upgrade = CatalogEntryGet(c_gameCatalogArmyUpgrade, autoDF6D22AD_ai);
        libWoLC_gf_WC_ArmyUpgradeSetPurchased(lv_upgrade, false);
        autoDF6D22AD_ai = autoDF6D22AD_ai + 1;
    }
}

string libWoLC_gf_WC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", 1));
}

string libWoLC_gf_WC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto0502DF11_ae;
    int auto0502DF11_ai;

    // Variable Initialization

    // Implementation
    auto0502DF11_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0502DF11_ai = 1;
    while (auto0502DF11_ai <= auto0502DF11_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0502DF11_ai);
        if ((libWoLC_gf_WC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

        auto0502DF11_ai = auto0502DF11_ai + 1;
    }
    return null;
}

text libWoLC_gf_WC_ArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", 1));
}

text libWoLC_gf_WC_ArmyCategoryDescription (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Description", 1));
}

text libWoLC_gf_WC_ArmyCategoryDescriptionShort (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libWoLC_gf_WC_TechUnitOfArmyCategory(lp_armyCategory), "DescriptionShort", 1);
}

text libWoLC_gf_WC_ArmyCategoryTitle (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Title", 1));
}

text libWoLC_gf_WC_ArmyCategoryUnitDescription (string lp_armyCategory) {
    // Variable Declarations
    string lv_unitLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitLink = (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Unit", 1));
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, (lv_unitLink), "Description", 1));
}

string libWoLC_gf_WC_ArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

string libWoLC_gf_WC_ArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", 1);
    return (lv_value);
}

string libWoLC_gf_WC_ArmyCategoryUpgradeState (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_upgrade;
    int lv_available;
    int lv_purchased;
    int lv_insufficient;
    int lv_locked;

    // Automatic Variable Declarations
    int auto70506947_ae;
    int auto70506947_ai;
    string auto693DFD41_val;

    // Variable Initialization

    // Implementation
    auto70506947_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyUpgrade, "ArmyUpgradeArray", 1);
    auto70506947_ai = 1;
    while (auto70506947_ai <= auto70506947_ae) {
        lv_upgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyUpgrade, "ArmyUpgradeArray["+IntToString(auto70506947_ai-1)+"]", 1);
        auto693DFD41_val = libWoLC_gf_WC_ArmyUpgradeState(lv_upgrade);
        if (auto693DFD41_val == "Available") {
            lv_available += 1;
        }
        else if (auto693DFD41_val == "Insufficient") {
            lv_insufficient += 1;
        }
        else if (auto693DFD41_val == "Locked") {
            lv_locked += 1;
        }
        else if (auto693DFD41_val == "Purchased") {
            lv_purchased += 1;
        }
        else {
        }
        auto70506947_ai = auto70506947_ai + 1;
    }
    if ((lv_available > 0)) {
        return "Available";
    }

    if ((lv_insufficient > 0)) {
        return "Insufficient";
    }

    if ((lv_purchased > 0)) {
        return "Purchased";
    }

    return "Locked";
}

string libWoLC_gf_WC_ArmyCategoryGroup (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("TechUnit", libWoLC_gf_WC_TechUnitOfArmyCategory(lp_armyCategory), "Group", 1);
}

text libWoLC_gf_WC_ArmyCategoryGroupName (string lp_Group) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechGroup", lp_Group, "Name", 1);
}

string libWoLC_gf_WC_ArmyCategoryGroupUpgradeState (string lp_Group) {
    // Variable Declarations
    string lv_armyCategory;

    // Automatic Variable Declarations
    int autoF96EB32E_ae;
    int autoF96EB32E_ai;

    // Variable Initialization

    // Implementation
    autoF96EB32E_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoF96EB32E_ai = 1;
    while (autoF96EB32E_ai <= autoF96EB32E_ae) {
        lv_armyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoF96EB32E_ai);
        if ((libWoLC_gf_WC_ArmyCategoryGroup(lv_armyCategory) == lp_Group) && (libWoLC_gf_WC_ArmyCategoryUsedInUI(lv_armyCategory) == true) && (libWoLC_gf_WC_ArmyCategoryState(lv_armyCategory) == c_armyCategoryStateUnlocked) && (libWoLC_gf_WC_ArmyCategoryUpgradeState(lv_armyCategory) != "Locked")) {
            return "Available";
        }

        autoF96EB32E_ai = autoF96EB32E_ai + 1;
    }
    return "Locked";
}

int libWoLC_gf_WC_ArmyCategoryState (string lp_armyCategory) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libWoLC_gv_wCC_ArmyCategoryStateKey + (lp_armyCategory)));
    return lv_value;
}

string libWoLC_gf_WC_ArmyStringFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

string libWoLC_gf_WC_ArmyStringFromArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_WC_ArmyCategoryUnitType(lp_armyCategory));
}

string libWoLC_gf_WC_ArmyStringFromArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_WC_StoryArmyUnitUnitType(lp_armyUnit));
}

void libWoLC_gf_WC_SetArmyCategoryState (string lp_armyCategory, int lp_state) {
    // Variable Declarations
    string lv_indexArmyUnit;
    string lv_indexArmyUpgrade;
    string lv_indexMercenary;

    // Automatic Variable Declarations
    int auto28EE512E_ae;
    int auto28EE512E_ai;
    int autoCE9298C1_ae;
    int autoCE9298C1_ai;
    int auto0E144A8A_ai;
    int auto0E144A8A_ae;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_WC_ArmyCategoryState(lp_armyCategory) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, (libWoLC_gv_wCC_ArmyCategoryStateKey + (lp_armyCategory)), (lp_state));
    if ((lp_state == c_armyCategoryStateLocked)) {
        auto28EE512E_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
        auto28EE512E_ai = 1;
        while (auto28EE512E_ai <= auto28EE512E_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto28EE512E_ai-1)+"]", 1);
            libWoLC_gf_WC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
            auto28EE512E_ai = auto28EE512E_ai + 1;
        }
        autoCE9298C1_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
        autoCE9298C1_ai = 1;
        while (autoCE9298C1_ai <= autoCE9298C1_ae) {
            lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(autoCE9298C1_ai-1)+"]", 1);
            libWoLC_gf_WC_ArmyUpgradeSetPurchased(lv_indexArmyUpgrade, false);
            autoCE9298C1_ai = autoCE9298C1_ai + 1;
        }
        auto0E144A8A_ai = 1;
        auto0E144A8A_ae = UserDataInstanceCount("Mercenaries")+1;
        while (auto0E144A8A_ai < auto0E144A8A_ae) {
            lv_indexMercenary = UserDataInstance("Mercenaries", auto0E144A8A_ai);
            auto0E144A8A_ai = auto0E144A8A_ai+1;
            if ((libWoLC_gf_WC_MercenaryBase(lv_indexMercenary) == lp_armyCategory)) {
                libWoLC_gf_WC_MercenarySetPurchased(lv_indexMercenary, false);
            }

        }
    }

}

bool libWoLC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_WC_ArmyCategoryState(lp_armyCategory) == lp_state);
}

string libWoLC_gf_EnabledUnitTypeforArmyCategory (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto325B6519_ae;
    int auto325B6519_ai;

    // Variable Initialization

    // Implementation
    auto325B6519_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto325B6519_ai = 1;
    while (auto325B6519_ai <= auto325B6519_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto325B6519_ai-1)+"]", 1);
        if ((libWoLC_gf_CampaignTechUnitIsEnabled(libWoLC_gf_WC_TechUnitOfArmyUnit(lv_indexArmyUnit)) == true)) {
            return libWoLC_gf_WC_StoryArmyUnitUnitType(lv_indexArmyUnit);
        }

        auto325B6519_ai = auto325B6519_ai + 1;
    }
    return libWoLC_gf_WC_ArmyCategoryUnitType(lp_armyCategory);
}

string libWoLC_gf_WC_ArmyCategoryPurchasedUnit (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto0AC66750_ae;
    int auto0AC66750_ai;

    // Variable Initialization

    // Implementation
    auto0AC66750_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto0AC66750_ai = 1;
    while (auto0AC66750_ai <= auto0AC66750_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto0AC66750_ai-1)+"]", 1);
        if ((libWoLC_gf_WC_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

        auto0AC66750_ai = auto0AC66750_ai + 1;
    }
    return null;
}

void libWoLC_gf_WC_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_indexMercenary;
    string lv_missionCategory3;
    string lv_indexPerk;
    string lv_missionCategory2;
    string lv_indexCategory;
    string lv_indexMission;
    string lv_missionCategory;
    string lv_missionCategoryExtra;
    string lv_requiredMission;
    int lv_index;

    // Automatic Variable Declarations
    int auto28EC32EC_ae;
    int auto28EC32EC_ai;
    int auto4E6D0E2C_ae;
    int auto4E6D0E2C_ai;
    const int autoC9238A4F_ae = 3;
    const int autoC9238A4F_ai = 1;
    int auto7EAAA3CE_ai;
    int auto7EAAA3CE_ae;
    int autoC8E789DF_ae;
    int autoC8E789DF_ai;

    // Variable Initialization

    // Implementation
    auto28EC32EC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto28EC32EC_ai = 1;
    while (auto28EC32EC_ai <= auto28EC32EC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto28EC32EC_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        auto28EC32EC_ai = auto28EC32EC_ai + 1;
    }
    auto4E6D0E2C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4E6D0E2C_ai = 1;
    while (auto4E6D0E2C_ai <= auto4E6D0E2C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4E6D0E2C_ai);
        auto4E6D0E2C_ai = auto4E6D0E2C_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Completed) == true)) {
                lv_missionCategory = libWoLC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                if ((lv_missionCategory != null)) {
                    DataTableSetBool(false, (lv_missionCategory), true);
                }

                lv_index = 1;
                for ( ; ( (autoC9238A4F_ai >= 0 && lv_index <= autoC9238A4F_ae) || (autoC9238A4F_ai < 0 && lv_index >= autoC9238A4F_ae) ) ; lv_index += autoC9238A4F_ai ) {
                    lv_missionCategoryExtra = UserDataGetGameLink("Maps", libWoLC_gf_WC_MapUserDataInstance(lv_indexMission), "ExtraArmyCategoryUnlock", lv_index);
                    if ((lv_missionCategoryExtra != null)) {
                        DataTableSetBool(false, (lv_missionCategoryExtra), true);
                    }

                }
            }

        }    
    }
    auto7EAAA3CE_ai = 1;
    auto7EAAA3CE_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto7EAAA3CE_ai < auto7EAAA3CE_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto7EAAA3CE_ai);
        auto7EAAA3CE_ai = auto7EAAA3CE_ai+1;
        if ((libWoLC_gf_WC_PerkState(lv_indexPerk) == libWoLC_ge_WC_PerkState_Active)) {
            lv_missionCategory2 = UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategory", 1);
            if ((lv_missionCategory2 != null)) {
                DataTableSetBool(false, (lv_missionCategory2), true);
            }

        }

    }
    autoC8E789DF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC8E789DF_ai = 1;
    while (autoC8E789DF_ai <= autoC8E789DF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC8E789DF_ai);
        if ((DataTableGetBool(false, (lv_indexCategory)) == true)) {
            libWoLC_gf_WC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
        }
        else {
            libWoLC_gf_WC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        }
        autoC8E789DF_ai = autoC8E789DF_ai + 1;
    }
}

bool libWoLC_gf_WC_ArmyCategoryUsedInUI (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", 1) == "0");
}

bool libWoLC_gf_WC_ArmyCategoryToastShown (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyCategory == null)) {
        return false;
    }

    return (UserDataGetInt("TechUnit", libWoLC_gf_WC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1) > 0);
}

void libWoLC_gf_WC_SetArmyCategoryToastShown (string lp_armyCategory, bool lp_shown) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libWoLC_gf_WC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1, BoolToInt(lp_shown));
}

bool libWoLC_gf_ArmyHasUnusedTech () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    bool lv_categoryFilled;

    // Automatic Variable Declarations
    int auto06F724AF_ae;
    int auto06F724AF_ai;
    int auto7700F035_ae;
    int auto7700F035_ai;

    // Variable Initialization

    // Implementation
    auto06F724AF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto06F724AF_ai = 1;
    while (auto06F724AF_ai <= auto06F724AF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto06F724AF_ai);
        if ((libWoLC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_WC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryFilled = false;
            auto7700F035_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto7700F035_ai = 1;
            while (auto7700F035_ai <= auto7700F035_ae) {
                lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7700F035_ai-1)+"]", 1);
                if ((libWoLC_gf_WC_StoryArmyUnitState(lv_indexUnit) != c_armyUnitStateLocked) && (libWoLC_gf_WC_StoryArmyUnitState2(lv_indexUnit) == true)) {
                    return true;
                }

                if ((libWoLC_gf_WC_StoryArmyUnitState(lv_indexUnit) == c_armyUnitStatePurchased)) {
                    lv_categoryFilled = true;
                }

                auto7700F035_ai = auto7700F035_ai + 1;
            }
            if ((lv_categoryFilled == false)) {
                return true;
            }

        }

        auto06F724AF_ai = auto06F724AF_ai + 1;
    }
    return false;
}

int libWoLC_gf_NumberOfUnupgradedArmyCategories () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    int lv_unupgradedCategoriesCount;

    // Automatic Variable Declarations
    int auto3E569C64_ae;
    int auto3E569C64_ai;

    // Variable Initialization

    // Implementation
    auto3E569C64_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto3E569C64_ai = 1;
    while (auto3E569C64_ai <= auto3E569C64_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto3E569C64_ai);
        if ((libWoLC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_WC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            if ((libWoLC_gf_WC_StoryArmyUnitState(libWoLC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1)) != c_armyUnitStatePurchased) && (libWoLC_gf_WC_StoryArmyUnitState(libWoLC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2)) != c_armyUnitStatePurchased) && (libWoLC_gf_WC_StoryArmyUnitState(libWoLC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3)) != c_armyUnitStatePurchased)) {
                lv_unupgradedCategoriesCount = (lv_unupgradedCategoriesCount + 1);
            }

        }

        auto3E569C64_ai = auto3E569C64_ai + 1;
    }
    return lv_unupgradedCategoriesCount;
}

string libWoLC_gf_WC_StoryArmyUnitUnitType (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", 1));
}

string libWoLC_gf_WC_ArmyUnitOfTechUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto08EA5277_ae;
    int auto08EA5277_ai;
    int auto53287F0D_ae;
    int auto53287F0D_ai;

    // Variable Initialization

    // Implementation
    auto08EA5277_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto08EA5277_ai = 1;
    while (auto08EA5277_ai <= auto08EA5277_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto08EA5277_ai);
        auto53287F0D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto53287F0D_ai = 1;
        while (auto53287F0D_ai <= auto53287F0D_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto53287F0D_ai-1)+"]", 1);
            if ((libWoLC_gf_WC_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

            auto53287F0D_ai = auto53287F0D_ai + 1;
        }
        auto08EA5277_ai = auto08EA5277_ai + 1;
    }
    return null;
}

text libWoLC_gf_WC_ArmyUnitTitle (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libWoLC_gf_WC_TechUnitOfArmyUnit(lp_armyUnit), "DescriptionShort", 1);
}

string libWoLC_gf_WC_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", 1));
}

string libWoLC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index) {
    // Variable Declarations
    string lv_armyUnitString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armyUnitString = "";

    // Implementation
    lv_armyUnitString = libWoLC_gf_WC_CatalogGetFieldArrayValue(c_gameCatalogArmyCategory, (lp_category), "ArmyUnitArray", lp_index, 1);
    return (lv_armyUnitString);
}

text libWoLC_gf_StoryArmyUnitName (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Name", 1));
}

text libWoLC_gf_WC_ArmyUnitDescription (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", 1));
}

string libWoLC_gf_WC_ArmyUnitIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyCategory), "Icon", c_playerAny));
}

string libWoLC_gf_WC_ArmyUnitMovie (string lp_armyUnit) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Movie", 1);
    return (lv_moviePath);
}

bool libWoLC_gf_WC_ArmyUnitStartsLocked (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libWoLC_gf_WC_TechUnitOfArmyUnit(lp_armyUnit), "StartsLocked", 1) == 1);
}

string libWoLC_gf_WC_ArmyUnitRequiredMission (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("TechUnit", libWoLC_gf_WC_TechUnitOfArmyUnit(lp_armyUnit), "RequiredMission", 1);
}

string libWoLC_gf_WC_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoCE15C86D_ae;
    int autoCE15C86D_ai;
    int auto43B42A5A_ae;
    int auto43B42A5A_ai;

    // Variable Initialization

    // Implementation
    autoCE15C86D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoCE15C86D_ai = 1;
    while (autoCE15C86D_ai <= autoCE15C86D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCE15C86D_ai);
        auto43B42A5A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto43B42A5A_ai = 1;
        while (auto43B42A5A_ai <= auto43B42A5A_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto43B42A5A_ai-1)+"]", 1);
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

            auto43B42A5A_ai = auto43B42A5A_ai + 1;
        }
        autoCE15C86D_ai = autoCE15C86D_ai + 1;
    }
    return null;
}

string libWoLC_gf_WC_ArmyUnitSkin (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyCategory, "Skin", 1));
}

int libWoLC_gf_WC_StoryArmyUnitState (string lp_armyUnit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libWoLC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)));
    return lv_value;
}

bool libWoLC_gf_WC_StoryArmyUnitState2 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libWoLC_gf_WC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1) == 1);
}

void libWoLC_gf_WC_SetArmyUnitState (string lp_armyUnit, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetInt(true, (libWoLC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)), (lp_state));
}

void libWoLC_gf_WC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libWoLC_gf_WC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1, BoolToInt(lp_new));
}

void libWoLC_gf_WC_UpdateArmyUnitStates () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_indexCategory2;
    int lv_armyUnitUnlockCount;
    int lv_completedMissions;
    int lv_rewardIndex;

    // Automatic Variable Declarations
    int auto5C61A5BA_ae;
    int auto5C61A5BA_ai;
    int auto89CF4D4F_ae;
    int auto89CF4D4F_ai;
    int autoFEF42473_ae;
    int autoFEF42473_ai;
    int auto03198141_ae;
    int auto03198141_ai;
    int auto6B214DBC_ae;
    int auto6B214DBC_ai;
    int auto2852A76A_ae;
    int auto2852A76A_ai;

    // Variable Initialization

    // Implementation
    libWoLC_gf_WC_UpdateCompletedMissionArray();
    auto5C61A5BA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5C61A5BA_ai = 1;
    while (auto5C61A5BA_ai <= auto5C61A5BA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5C61A5BA_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        auto5C61A5BA_ai = auto5C61A5BA_ai + 1;
    }
    auto89CF4D4F_ae = libWoLC_gf_NumberOfMissions(2);
    auto89CF4D4F_ai = 1;
    while (auto89CF4D4F_ai <= auto89CF4D4F_ae) {
        lv_indexMission = libWoLC_gv_wC_MissionCompleted[auto89CF4D4F_ai];
        if ((libWoLC_gf_WC_MissionRewardsDynamicArmyUnit(lv_indexMission) == true)) {
            lv_armyUnitUnlockCount += 1;
        }

        auto89CF4D4F_ai += 1;
    }
    autoFEF42473_ae = libWoLC_gf_NumberOfMissions(2);
    autoFEF42473_ai = 1;
    while (autoFEF42473_ai <= autoFEF42473_ae) {
        lv_indexMission = libWoLC_gv_wC_MissionCompleted[autoFEF42473_ai];
        lv_indexCategory2 = libWoLC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
        if ((lv_indexCategory2 != null) && (libWoLC_gf_WC_ArmyCategoryUsedInUI(lv_indexCategory2) == true) && (lv_armyUnitUnlockCount > 0)) {
            auto03198141_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory2, "ArmyUnitArray", 1);
            auto03198141_ai = 1;
            while (auto03198141_ai <= auto03198141_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory2, "ArmyUnitArray["+IntToString(auto03198141_ai-1)+"]", 1);
                if ((libWoLC_gf_WC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && (libWoLC_gf_WC_ArmyUnitRequiredMission(lv_indexArmyUnit) == null)) {
                    lv_armyUnitUnlockCount -= 1;
                    DataTableSetBool(false, (lv_indexCategory2), true);
                    break;
                }

                auto03198141_ai = auto03198141_ai + 1;
            }
        }

        autoFEF42473_ai += 1;
    }
    auto6B214DBC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6B214DBC_ai = 1;
    while (auto6B214DBC_ai <= auto6B214DBC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6B214DBC_ai);
        if ((libWoLC_gf_WC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            auto2852A76A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto2852A76A_ai = 1;
            while (auto2852A76A_ai <= auto2852A76A_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto2852A76A_ai-1)+"]", 1);
                if ((libWoLC_gf_WC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && ((libWoLC_gf_WC_ArmyCategoryState(lv_indexCategory) == c_armyCategoryStateLocked) || ((libWoLC_gf_WC_ArmyUnitRequiredMission(lv_indexArmyUnit) == null) && (DataTableGetBool(false, (lv_indexCategory)) == false)) || ((libWoLC_gf_WC_ArmyUnitRequiredMission(lv_indexArmyUnit) != null) && (libWoLC_gf_MissionStatusCheck(libWoLC_gf_WC_ArmyUnitRequiredMission(lv_indexArmyUnit), libWoLC_ge_MissionStatus_Completed) == false)))) {
                    libWoLC_gf_WC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
                }
                else {
                    if ((libWoLC_gf_WC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStatePurchased)) {
                        libWoLC_gf_WC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked);
                    }

                }
                auto2852A76A_ai = auto2852A76A_ai + 1;
            }
        }

        auto6B214DBC_ai = auto6B214DBC_ai + 1;
    }
}

void libWoLC_gf_WC_SaveArmyCategoryToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto6929ACA3_ae;
    int auto6929ACA3_ai;

    // Variable Initialization

    // Implementation
    auto6929ACA3_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6929ACA3_ai = 1;
    while (auto6929ACA3_ai <= auto6929ACA3_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6929ACA3_ai);
        libWoLC_gf_WC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), (libWoLC_gf_WC_ArmyCategoryState(lv_indexCategory)), 0);
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_bank, lp_section, ((lv_indexCategory) + "New"), libWoLC_gf_WC_ArmyCategoryToastShown(lv_indexCategory), true);
        auto6929ACA3_ai = auto6929ACA3_ai + 1;
    }
}

void libWoLC_gf_WC_SaveArmyUnitsToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int autoC9B820C2_ae;
    int autoC9B820C2_ai;
    int autoA02710CE_ae;
    int autoA02710CE_ai;

    // Variable Initialization

    // Implementation
    autoC9B820C2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC9B820C2_ai = 1;
    while (autoC9B820C2_ai <= autoC9B820C2_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC9B820C2_ai);
        autoA02710CE_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoA02710CE_ai = 1;
        while (autoA02710CE_ai <= autoA02710CE_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoA02710CE_ai-1)+"]", 1);
            libWoLC_gf_WC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), (libWoLC_gf_WC_StoryArmyUnitState(lv_indexUpgrade)), 0);
            libWoLC_gf_WC_SaveTransitionVarBoolean(lp_bank, lp_section, ((lv_indexUpgrade) + "New"), libWoLC_gf_WC_StoryArmyUnitState2(lv_indexUpgrade), true);
            autoA02710CE_ai = autoA02710CE_ai + 1;
        }
        autoC9B820C2_ai = autoC9B820C2_ai + 1;
    }
}

void libWoLC_gf_WC_SaveArmyUpgradesToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto984FF3EA_ae;
    int auto984FF3EA_ai;
    int auto68E64BA4_ae;
    int auto68E64BA4_ai;

    // Variable Initialization

    // Implementation
    auto984FF3EA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto984FF3EA_ai = 1;
    while (auto984FF3EA_ai <= auto984FF3EA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto984FF3EA_ai);
        auto68E64BA4_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto68E64BA4_ai = 1;
        while (auto68E64BA4_ai <= auto68E64BA4_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto68E64BA4_ai-1)+"]", 1);
            libWoLC_gf_WC_SaveTransitionVarBoolean(lp_bank, lp_section, (lv_indexUpgrade), libWoLC_gf_WC_ArmyUpgradePurchased(lv_indexUpgrade), false);
            auto68E64BA4_ai = auto68E64BA4_ai + 1;
        }
        auto984FF3EA_ai = auto984FF3EA_ai + 1;
    }
}

void libWoLC_gf_WC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoA91440CA_ae;
    int autoA91440CA_ai;

    // Variable Initialization

    // Implementation
    autoA91440CA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoA91440CA_ai = 1;
    while (autoA91440CA_ai <= autoA91440CA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoA91440CA_ai);
        lv_stateInt = libWoLC_gf_WC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), 0);
        lv_state = lv_stateInt;
        libWoLC_gf_WC_SetArmyCategoryState(lv_indexCategory, lv_state);
        libWoLC_gf_WC_SetArmyCategoryToastShown(lv_indexCategory, libWoLC_gf_WC_LoadTransitionVarBoolean(lp_bank, lp_section, ((lv_indexCategory) + "New"), true));
        autoA91440CA_ai = autoA91440CA_ai + 1;
    }
}

void libWoLC_gf_WC_LoadArmyUnitsFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoD6E37B85_ae;
    int autoD6E37B85_ai;
    int auto8AEA5648_ae;
    int auto8AEA5648_ai;

    // Variable Initialization
    lv_state = c_armyUnitStateLocked;

    // Implementation
    autoD6E37B85_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoD6E37B85_ai = 1;
    while (autoD6E37B85_ai <= autoD6E37B85_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD6E37B85_ai);
        auto8AEA5648_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto8AEA5648_ai = 1;
        while (auto8AEA5648_ai <= auto8AEA5648_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto8AEA5648_ai-1)+"]", 1);
            lv_stateInt = libWoLC_gf_WC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), 0);
            lv_state = lv_stateInt;
            libWoLC_gf_WC_SetArmyUnitState(lv_indexUpgrade, lv_state);
            libWoLC_gf_WC_ArmyUnitSetNew(lv_indexUpgrade, libWoLC_gf_WC_LoadTransitionVarBoolean(lp_bank, lp_section, ((lv_indexUpgrade) + "New"), true));
            auto8AEA5648_ai = auto8AEA5648_ai + 1;
        }
        autoD6E37B85_ai = autoD6E37B85_ai + 1;
    }
}

void libWoLC_gf_WC_LoadArmyUpgradesFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto5BAC089A_ae;
    int auto5BAC089A_ai;
    int auto0D91E6D5_ae;
    int auto0D91E6D5_ai;

    // Variable Initialization

    // Implementation
    auto5BAC089A_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5BAC089A_ai = 1;
    while (auto5BAC089A_ai <= auto5BAC089A_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5BAC089A_ai);
        auto0D91E6D5_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto0D91E6D5_ai = 1;
        while (auto0D91E6D5_ai <= auto0D91E6D5_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto0D91E6D5_ai-1)+"]", 1);
            libWoLC_gf_WC_ArmyUpgradeSetPurchased(lv_indexUpgrade, libWoLC_gf_WC_LoadTransitionVarBoolean(lp_bank, lp_section, (lv_indexUpgrade), false));
            auto0D91E6D5_ai = auto0D91E6D5_ai + 1;
        }
        auto5BAC089A_ai = auto5BAC089A_ai + 1;
    }
}

void libWoLC_gf_WC_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCategory2;
    string lv_indexUpgrade;
    bool lv_categoryEnableDisable;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto9EF57A55_ae;
    int auto9EF57A55_ai;
    int auto7AD1A88C_ae;
    int auto7AD1A88C_ai;
    int auto96AE43B4_ae;
    int auto96AE43B4_ai;
    int auto1D234705_ae;
    int auto1D234705_ai;
    int autoA7240716_ae;
    int autoA7240716_ai;
    int auto224B01CD_ae;
    int auto224B01CD_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    auto9EF57A55_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9EF57A55_ai = 1;
    while (auto9EF57A55_ai <= auto9EF57A55_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9EF57A55_ai);
        libWoLC_gf_EnableCampaignTechUnit(false, libWoLC_gf_WC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto7AD1A88C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto7AD1A88C_ai = 1;
        while (auto7AD1A88C_ai <= auto7AD1A88C_ae) {
            lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7AD1A88C_ai-1)+"]", 1);
            libWoLC_gf_EnableCampaignTechUnit(false, libWoLC_gf_WC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
            auto7AD1A88C_ai = auto7AD1A88C_ai + 1;
        }
        auto96AE43B4_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto96AE43B4_ai = 1;
        while (auto96AE43B4_ai <= auto96AE43B4_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto96AE43B4_ai-1)+"]", 1);
            libWoLC_gf_EnableCampaignUpgrade(false, lv_indexUpgrade, lp_player);
            auto96AE43B4_ai = auto96AE43B4_ai + 1;
        }
        auto9EF57A55_ai = auto9EF57A55_ai + 1;
    }
    auto1D234705_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1D234705_ai = 1;
    while (auto1D234705_ai <= auto1D234705_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1D234705_ai);
        if ((libWoLC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryEnableDisable = true;
            autoA7240716_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            autoA7240716_ai = 1;
            while (autoA7240716_ai <= autoA7240716_ae) {
                lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoA7240716_ai-1)+"]", 1);
                if ((libWoLC_gf_WC_StoryArmyUnitState(lv_indexCategory2) == c_armyUnitStatePurchased)) {
                    libWoLC_gf_EnableCampaignTechUnit(true, libWoLC_gf_WC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
                    lv_categoryEnableDisable = false;
                }

                autoA7240716_ai = autoA7240716_ai + 1;
            }
            auto224B01CD_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            auto224B01CD_ai = 1;
            while (auto224B01CD_ai <= auto224B01CD_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto224B01CD_ai-1)+"]", 1);
                if ((libWoLC_gf_WC_ArmyUpgradePurchased(lv_indexUpgrade) == true)) {
                    libWoLC_gf_EnableCampaignUpgrade(true, lv_indexUpgrade, lp_player);
                }

                auto224B01CD_ai = auto224B01CD_ai + 1;
            }
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            libWoLC_gf_EnableCampaignTechUnit(true, libWoLC_gf_WC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

        auto1D234705_ai = auto1D234705_ai + 1;
    }
}

void libWoLC_gf_WC_ResetArmyTech () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto7517AB57_ae;
    int auto7517AB57_ai;

    // Variable Initialization

    // Implementation
    libWoLC_gf_WC_ArmyUpgradeResetAll();
    auto7517AB57_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7517AB57_ai = 1;
    while (auto7517AB57_ai <= auto7517AB57_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7517AB57_ai);
        libWoLC_gf_WC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        auto7517AB57_ai = auto7517AB57_ai + 1;
    }
}

void libWoLC_gf_WC_PerkStateSet (string lp_campaignPerk, int lp_state) {
    // Variable Declarations
    string lv_armyCategory;

    // Automatic Variable Declarations
    int auto59C37893_val;

    // Variable Initialization
    lv_armyCategory = UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "ArmyCategory", 1);

    // Implementation
    UserDataSetInt("CampaignPerk", lp_campaignPerk, "State", 1, (lp_state));
    if ((lv_armyCategory != null)) {
        auto59C37893_val = lp_state;
        if (auto59C37893_val == libWoLC_ge_WC_PerkState_Active) {
            libWoLC_gf_WC_SetArmyCategoryState(lv_armyCategory, c_armyCategoryStateUnlocked);
        }
        else {
            libWoLC_gf_WC_SetArmyCategoryState(lv_armyCategory, c_armyCategoryStateLocked);
        }
    }

}

int libWoLC_gf_WC_PerkState (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "State", 1);
}

int libWoLC_gf_WC_PerkUISlot (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "UISlot", 1);
}

bool libWoLC_gf_WC_PerkIsNew (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("CampaignPerk", lp_campaignPerk, "IsNew", 1) > 0);
}

int libWoLC_gf_WC_PerkGroupUIOrderX (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "UIOrderX", 1);
}

int libWoLC_gf_WC_PerkGroupUIOrderY (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "UIOrderY", 1);
}

int libWoLC_gf_WC_PerkGroupCost (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "Cost", 1);
}

string libWoLC_gf_WC_PerkGroupCurrency (string lp_perkGroup) {
    // Automatic Variable Declarations
    int auto2B32A4D0_val;

    // Implementation
    auto2B32A4D0_val = libWoLC_gf_WC_PerkGroupUIOrderX(lp_perkGroup);
    if (auto2B32A4D0_val == 0) {
        return "ProtossResearch";
    }
    else if (auto2B32A4D0_val == 1) {
        return "ZergResearch";
    }
    else {
        return "Credits";
    }
}

bool libWoLC_gf_WC_PerkGroupRequirementsMet (string lp_perkGroup) {
    // Variable Declarations
    int lv_pointsEarned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pointsEarned = libWoLC_gf_RewardTotalEarned(libWoLC_gf_WC_PerkGroupCurrency(lp_perkGroup));

    // Implementation
    return (lv_pointsEarned >= libWoLC_gf_WC_PerkGroupCost(lp_perkGroup));
}

int libWoLC_gf_WC_PerkGroupState (string lp_perkGroup) {
    // Variable Declarations
    string lv_indexPerk;
    int lv_activeCount;
    int lv_unlockedCount;

    // Automatic Variable Declarations
    int autoAD1FFCF2_ai;
    int autoAD1FFCF2_ae;
    int auto9E6B5CB4_val;

    // Variable Initialization

    // Implementation
    autoAD1FFCF2_ai = 1;
    autoAD1FFCF2_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoAD1FFCF2_ai < autoAD1FFCF2_ae) {    
        lv_indexPerk = UserDataInstance("CampaignPerk", autoAD1FFCF2_ai);
        autoAD1FFCF2_ai = autoAD1FFCF2_ai+1;
        if( libWoLC_gf_WC_PerkGroupOfPerk(lv_indexPerk) == lp_perkGroup ) {
            auto9E6B5CB4_val = libWoLC_gf_WC_PerkState(lv_indexPerk);
            if (auto9E6B5CB4_val == libWoLC_ge_WC_PerkState_Active) {
                lv_activeCount += 1;
            }
            else if (auto9E6B5CB4_val == libWoLC_ge_WC_PerkState_Unlocked) {
                lv_unlockedCount += 1;
            }
            else {
            }
        }    
    }
    if ((lv_activeCount > 0)) {
        return libWoLC_ge_WC_PerkState_Active;
    }

    if ((lv_unlockedCount > 0)) {
        return libWoLC_ge_WC_PerkState_Unlocked;
    }

    return libWoLC_ge_WC_PerkState_Locked;
}

string libWoLC_gf_WC_PerkGroupOfPerk (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("CampaignPerk", lp_campaignPerk, "Group", 1);
}

text libWoLC_gf_WC_PerkName (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Name", 1);
}

text libWoLC_gf_WC_PerkDescription (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Description", 1);
}

text libWoLC_gf_WC_PerkTooltip (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Tooltip", 1);
}

string libWoLC_gf_WC_PerkMovie (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("CampaignPerk", lp_campaignPerk, "Movie", 1);
}

string libWoLC_gf_WC_PerkIcon (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("CampaignPerk", lp_campaignPerk, "Icon", 1);
}

string libWoLC_gf_WC_ConvertPerkStateToString (int lp_state) {
    // Automatic Variable Declarations
    int auto927E4A34_val;

    // Implementation
    auto927E4A34_val = lp_state;
    if (auto927E4A34_val == libWoLC_ge_WC_PerkState_Active) {
        return "Active";
    }
    else if (auto927E4A34_val == libWoLC_ge_WC_PerkState_Hidden) {
        return "Hidden";
    }
    else if (auto927E4A34_val == libWoLC_ge_WC_PerkState_Locked) {
        return "Locked";
    }
    else if (auto927E4A34_val == libWoLC_ge_WC_PerkState_Unlocked) {
        return "Unlocked";
    }
    else {
        return "Locked";
    }
}

fixed libWoLC_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Resource[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost." + lp_costType);
        }
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Vital[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost[0].Vital[" + lp_costType + "]");
        }
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (lv_field), 1);
    return StringToFixed(lv_value);
}

void libWoLC_gf_WC_UpdatePerkStates () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int autoBF906CEA_ai;
    int autoBF906CEA_ae;

    // Variable Initialization

    // Implementation
    libWoLC_gf_WC_UpdateCompletedMissionArray();
    autoBF906CEA_ai = 1;
    autoBF906CEA_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoBF906CEA_ai < autoBF906CEA_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoBF906CEA_ai);
        autoBF906CEA_ai = autoBF906CEA_ai+1;
        if ((libWoLC_gf_WC_PerkGroupRequirementsMet(libWoLC_gf_WC_PerkGroupOfPerk(lv_indexPerk)) == true)) {
            if ((libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Active) == false)) {
                libWoLC_gf_WC_PerkStateSet(lv_indexPerk, libWoLC_ge_WC_PerkState_Unlocked);
            }

        }
        else {
            libWoLC_gf_WC_PerkStateSet(lv_indexPerk, libWoLC_ge_WC_PerkState_Locked);
        }
    }
}

void libWoLC_gf_WC_SavePerksToBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSaveType("CampaignPerk", lp_bank, lp_section);
}

void libWoLC_gf_WC_LoadPerksFromBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataLoadType("CampaignPerk", lp_bank, lp_section);
}

void libWoLC_gf_EnableDisableLabResearch (bool lp_enableDisable, string lp_research) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_EnableDisableLabResearchForPlayer(lp_enableDisable, lp_research, 1);
}

void libWoLC_gf_EnableDisableLabResearchForPlayer (bool lp_enableDisable, string lp_research, int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    bool lv_allowDisallow;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    int auto5D72C4A7_ae;
    const int auto5D72C4A7_ai = 1;
    int autoDF893832_ae;
    const int autoDF893832_ai = 1;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        lv_upgradeLevel = 1;
    }
    else {
        lv_allowDisallow = false;
        lv_upgradeLevel = 0;
    }
    auto5D72C4A7_ae = UserDataFieldValueCount("CampaignPerk", "AbilityCommand");
    lv_indexTech = 1;
    for ( ; ( (auto5D72C4A7_ai >= 0 && lv_indexTech <= auto5D72C4A7_ae) || (auto5D72C4A7_ai < 0 && lv_indexTech >= auto5D72C4A7_ae) ) ; lv_indexTech += auto5D72C4A7_ai ) {
        if ((UserDataGetAbilCmd("CampaignPerk", lp_research, "AbilityCommand", lv_indexTech) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("CampaignPerk", lp_research, "AbilityCommand", lv_indexTech), lv_allowDisallow);
        }

    }
    autoDF893832_ae = UserDataFieldValueCount("CampaignPerk", "Upgrade");
    lv_indexTech = 1;
    for ( ; ( (autoDF893832_ai >= 0 && lv_indexTech <= autoDF893832_ae) || (autoDF893832_ai < 0 && lv_indexTech >= autoDF893832_ae) ) ; lv_indexTech += autoDF893832_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_research, "Upgrade", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_research, "Upgrade", lv_indexTech), lv_upgradeLevel);
        }

    }
    if ((UserDataGetGameLink("CampaignPerk", lp_research, "ArmyCategory", 1) != null)) {
        libWoLC_gf_EnableCampaignTechUnit(lp_enableDisable, libWoLC_gf_WC_TechUnitOfArmyCategory(UserDataGetGameLink("CampaignPerk", lp_research, "ArmyCategory", 1)), lp_player);
    }

}

void libWoLC_gf_EnableDisableLabChosenResearch (bool lp_enableDisable) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto66E3F101_ai;
    int auto66E3F101_ae;

    // Variable Initialization

    // Implementation
    auto66E3F101_ai = 1;
    auto66E3F101_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto66E3F101_ai < auto66E3F101_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto66E3F101_ai);
        auto66E3F101_ai = auto66E3F101_ai+1;
        if ((libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Active) == true)) {
            libWoLC_gf_EnableDisableLabResearch(lp_enableDisable, lv_indexPerk);
        }

    }
}

void libWoLC_gf_EnableDisableLabChosenResearchForPlayer (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int autoD9F7885C_ai;
    int autoD9F7885C_ae;

    // Variable Initialization

    // Implementation
    autoD9F7885C_ai = 1;
    autoD9F7885C_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoD9F7885C_ai < autoD9F7885C_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoD9F7885C_ai);
        autoD9F7885C_ai = autoD9F7885C_ai+1;
        if ((libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Active) == true)) {
            libWoLC_gf_EnableDisableLabResearchForPlayer(lp_enableDisable, lv_indexPerk, lp_player);
        }

    }
}

bool libWoLC_gf_LabHasNewProtossResearch () {
    // Variable Declarations
    string lv_indexPerkGroup;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int autoC5C85AD6_ai;
    int autoC5C85AD6_ae;

    // Variable Initialization

    // Implementation
    autoC5C85AD6_ai = 1;
    autoC5C85AD6_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoC5C85AD6_ai < autoC5C85AD6_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoC5C85AD6_ai);
        autoC5C85AD6_ai = autoC5C85AD6_ai+1;
        if ((libWoLC_gf_WC_PerkGroupUIOrderX(libWoLC_gf_WC_PerkGroupOfPerk(lv_indexPerk)) == 0) && (libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Unlocked) == true) && (libWoLC_gf_WC_PerkIsNew(lv_indexPerk) == true)) {
            return true;
        }

    }
    return false;
}

bool libWoLC_gf_LabHasNewZergResearch () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto9FAD2D5A_ai;
    int auto9FAD2D5A_ae;

    // Variable Initialization

    // Implementation
    auto9FAD2D5A_ai = 1;
    auto9FAD2D5A_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto9FAD2D5A_ai < auto9FAD2D5A_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto9FAD2D5A_ai);
        auto9FAD2D5A_ai = auto9FAD2D5A_ai+1;
        if ((libWoLC_gf_WC_PerkGroupUIOrderX(libWoLC_gf_WC_PerkGroupOfPerk(lv_indexPerk)) == 1) && (libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Unlocked) == true) && (libWoLC_gf_WC_PerkIsNew(lv_indexPerk) == true)) {
            return true;
        }

    }
    return false;
}

bool libWoLC_gf_WC_PerkStateCheck (string lp_campaignPerk, int lp_perkState) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("CampaignPerk", lp_campaignPerk, "State", 1) == (lp_perkState));
}

void libWoLC_gf_WC_ApplyPerkTech () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto4F8B51F3_ai;
    int auto4F8B51F3_ae;
    int autoEC0E2BA4_ai;
    int autoEC0E2BA4_ae;

    // Variable Initialization

    // Implementation
    auto4F8B51F3_ai = 1;
    auto4F8B51F3_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto4F8B51F3_ai < auto4F8B51F3_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto4F8B51F3_ai);
        auto4F8B51F3_ai = auto4F8B51F3_ai+1;
        libWoLC_gf_EnableDisableLabResearch(false, lv_indexPerk);
    }
    autoEC0E2BA4_ai = 1;
    autoEC0E2BA4_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoEC0E2BA4_ai < autoEC0E2BA4_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoEC0E2BA4_ai);
        autoEC0E2BA4_ai = autoEC0E2BA4_ai+1;
        if ((libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Active) == true)) {
            libWoLC_gf_EnableDisableLabResearch(true, lv_indexPerk);
        }

    }
}

void libWoLC_gf_WC_ResetPerkTech () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto1667F008_ai;
    int auto1667F008_ae;

    // Variable Initialization

    // Implementation
    auto1667F008_ai = 1;
    auto1667F008_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto1667F008_ai < auto1667F008_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto1667F008_ai);
        auto1667F008_ai = auto1667F008_ai+1;
        libWoLC_gf_WC_PerkStateSet(lv_indexPerk, libWoLC_ge_WC_PerkState_Locked);
    }
}

void libWoLC_gf_WC_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;

    // Automatic Variable Declarations
    playergroup autoE52C82E9_g;

    // Variable Initialization

    // Implementation
    libWoLC_gv_wC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libWoLC_gf_WC_ApplyArmyTech(lp_player);
    libWoLC_gf_WC_ApplyPerkTech();
    libWoLC_gf_WC_ApplyMercenaryTech();
    libWoLC_gv_wC_ApplyingCampaignTech = false;
    libWoLC_gv_wC_CampaignTechApplied = true;
    if ((lp_player == 1)) {
        libWoLC_gf_TS_HelpTechTree_UpdatePanel();
        libWoLC_gf_ZS_HelpUnitsPanel_UpdatePanel();
        libWoLC_gf_TS_HelpTechTree_UpdatePanel2();
    }

    autoE52C82E9_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE52C82E9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "FactionTrainAI", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "Kit@AISmartServos", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }

    }
}

void libWoLC_gf_WC_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_UpdatePerkStates();
    libWoLC_gf_WC_UpdateArmyCategoryStates(lp_player);
    libWoLC_gf_WC_UpdateArmyUnitStates();
}

void libWoLC_gf_WC_ResetTech () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_ResetArmyTech();
    libWoLC_gf_WC_ResetPerkTech();
    libWoLC_gf_WC_MercenaryResetAll();
}

void libWoLC_gf_WC_StoreTechBonusAtMissionBeginning () {
    // Automatic Variable Declarations
    // Implementation
}

int libWoLC_gf_WC_TechConstant (string lp_constant) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignConstants", lp_constant, "Value", 1);
}

int libWoLC_gf_WC_CreditsTotalSpent () {
    // Variable Declarations
    int lv_value;
    string lv_upgrade;
    string lv_mercenary;

    // Automatic Variable Declarations
    int autoD0B712AB_ae;
    int autoD0B712AB_ai;
    int auto60A64B77_ai;
    int auto60A64B77_ae;

    // Variable Initialization

    // Implementation
    autoD0B712AB_ae = CatalogEntryCount(c_gameCatalogArmyUpgrade);
    autoD0B712AB_ai = 1;
    while (autoD0B712AB_ai <= autoD0B712AB_ae) {
        lv_upgrade = CatalogEntryGet(c_gameCatalogArmyUpgrade, autoD0B712AB_ai);
        if ((libWoLC_gf_WC_ArmyUpgradePurchased(lv_upgrade) == true)) {
            lv_value += libWoLC_gf_WC_ArmyUpgradeCost(lv_upgrade);
        }

        autoD0B712AB_ai = autoD0B712AB_ai + 1;
    }
    auto60A64B77_ai = 1;
    auto60A64B77_ae = UserDataInstanceCount("Mercenaries")+1;
    while (auto60A64B77_ai < auto60A64B77_ae) {
        lv_mercenary = UserDataInstance("Mercenaries", auto60A64B77_ai);
        auto60A64B77_ai = auto60A64B77_ai+1;
        if ((libWoLC_gf_WC_MercenaryPurchased(lv_mercenary) == true)) {
            lv_value += libWoLC_gf_WC_MercenaryCost(lv_mercenary);
        }

    }
    return lv_value;
}

int libWoLC_gf_RewardTotalEarned (string lp_type) {
    // Variable Declarations
    int lv_reward;
    string lv_mission;
    int lv_researchPoints;
    int lv_researchCap;

    // Automatic Variable Declarations
    string autoDCF51F5D_val;
    int autoF5520AC1_ae;
    int autoF5520AC1_ai;

    // Variable Initialization

    // Implementation
    autoDCF51F5D_val = lp_type;
    if (autoDCF51F5D_val == "Credits") {
        lv_reward = UserDataGetInt("CampaignConstants", "StartCredits", "Value", 1);
    }
    else if (autoDCF51F5D_val == "ProtossResearch") {
        lv_reward = UserDataGetInt("CampaignConstants", "ResearchStartPointProt", "Value", 1);
    }
    else if (autoDCF51F5D_val == "ZergResearch") {
        lv_reward = UserDataGetInt("CampaignConstants", "ResearchStartPointZerg", "Value", 1);
    }
    else {
    }
    autoF5520AC1_ae = libWoLC_gf_NumberOfMissions(2);
    autoF5520AC1_ai = 1;
    while (autoF5520AC1_ai <= autoF5520AC1_ae) {
        lv_mission = libWoLC_gv_wC_MissionCompleted[autoF5520AC1_ai];
        lv_reward += libWoLC_gf_MissionRewardTotalEarned(lv_mission, lp_type);
        autoF5520AC1_ai += 1;
    }
    if ((lp_type == "Credits")) {
        lv_researchCap = libWoLC_gf_WC_TechConstant("ResearchCap");
        lv_reward += (libWoLC_gf_WC_MathSaturatingSub(libWoLC_gf_RewardTotalEarned("ProtossResearch"), lv_researchCap) * libWoLC_gf_WC_TechConstant("ResearchPointToCredits"));
        lv_reward += (libWoLC_gf_WC_MathSaturatingSub(libWoLC_gf_RewardTotalEarned("ZergResearch"), lv_researchCap) * libWoLC_gf_WC_TechConstant("ResearchPointToCredits"));
    }

    return lv_reward;
}

int libWoLC_gf_CreditsAvailable () {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_RewardTotalEarned("Credits") - libWoLC_gf_WC_CreditsTotalSpent());
}

void libWoLC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_72B16F45", "A", StringToText((lp_unitType)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_72B16F45", "B", libNtve_gf_ConvertBooleanToText(lp_saveInHistory));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_72B16F45"), false);
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        libWoLC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(lp_unitType);
    }

}

string libWoLC_gf_PS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool libWoLC_gf_PS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, libWoLC_gf_PS_HelpUnitsPanel_UnitTypeStringID(lp_unitType));
}

void libWoLC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto7A097FBB_ae;
    int auto7A097FBB_ai;
    int autoE74A5121_ae;
    int autoE74A5121_ai;

    // Variable Initialization

    // Implementation
    if (((libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount == libWoLC_gv_pCC_HelpUnitPanel_EnabledUnitTypeCountMax) || (libWoLC_gf_PS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted(lp_unitType) == true))) {
        return ;
    }

    auto7A097FBB_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7A097FBB_ai = 1;
    while (auto7A097FBB_ai <= auto7A097FBB_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7A097FBB_ai);
        if ((libWoLC_gf_WC_ArmyCategoryUnitType(lv_indexArmyCategory) == lp_unitType) && ((libWoLC_gf_WC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null) || (libWoLC_gf_WC_ArmyCategoryState(lv_indexArmyCategory) != c_armyCategoryStateUnlocked))) {
            return ;
        }

        autoE74A5121_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
        autoE74A5121_ai = 1;
        while (autoE74A5121_ai <= autoE74A5121_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(autoE74A5121_ai-1)+"]", 1);
            if ((libWoLC_gf_WC_StoryArmyUnitUnitType(lv_indexArmyUnit) == lp_unitType) && ((libWoLC_gf_WC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null) || (libWoLC_gf_WC_StoryArmyUnitUnitType(libWoLC_gf_WC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory)) != lp_unitType))) {
                return ;
            }

            autoE74A5121_ai = autoE74A5121_ai + 1;
        }
        auto7A097FBB_ai = auto7A097FBB_ai + 1;
    }
    libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount += 1;
    libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount] = lp_unitType;
    DataTableSetString(true, libWoLC_gf_PS_HelpUnitsPanel_UnitTypeStringID(lp_unitType), IntToString(libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount));
}

void libWoLC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount = 0;
}

void libWoLC_gf_ZS_HelpUnitsPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;
    string lv_unitType;

    // Automatic Variable Declarations
    int autoE68A29AA_ae;
    const int autoE68A29AA_ai = 1;

    // Variable Initialization

    // Implementation
    TechTreeUnitHelpDefault(1, false);
    if ((libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == true)) {
        return ;
    }

    if ((libWoLC_gf_WC_CampaignMapIsZeratul(libWoLC_gf_CurrentMap()) == true)) {
        TechTreeUnitHelp(1, "Probe", true);
    }
    else {
        TechTreeUnitHelp(1, "SCV", true);
    }
    autoE68A29AA_ae = libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (autoE68A29AA_ai >= 0 && lv_index <= autoE68A29AA_ae) || (autoE68A29AA_ai < 0 && lv_index >= autoE68A29AA_ae) ) ; lv_index += autoE68A29AA_ai ) {
        lv_unitType = libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[lv_index];
        TechTreeUnitHelp(1, lv_unitType, true);
    }
}

void libWoLC_gf_TS_HelpTechTree_UpdatePanel () {
    // Automatic Variable Declarations
    string autoE8331962_val;

    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if (((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == false) || (libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == true))) {
        return ;
    }

    autoE8331962_val = libWoLC_gf_CurrentMap();
    if (autoE8331962_val == "TZeratul02") {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
    else if (autoE8331962_val == "TZeratul03") {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
    else if (autoE8331962_val == "TZeratul04") {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
    else {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
}

void libWoLC_gf_EnableCampaignUpgrade (bool lp_enableDisable, string lp_upgrade, int lp_player) {
    // Variable Declarations
    text lv_debugMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUpgrade", libWoLC_gf_WC_TechUpgradeOfArmyUpgrade(lp_upgrade), "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_WoLC_07D42BE8");
    }
    else {
        UserDataSetInt("TechUpgrade", libWoLC_gf_WC_TechUpgradeOfArmyUpgrade(lp_upgrade), "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_WoLC_F4FB11C4");
    }
    libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUpgrade, (lp_upgrade), null, null, lp_player);
    TextExpressionSetToken("Param/Expression/lib_WoLC_F7F7ABD3", "A", lv_debugMessage);
    TextExpressionSetToken("Param/Expression/lib_WoLC_F7F7ABD3", "B", StringToText((lp_upgrade)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_F7F7ABD3"), false);
}

void libWoLC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;
    text lv_debugMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_WoLC_39184915");
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_WoLC_8773302A");
    }
    lv_armyCategory = libWoLC_gf_WC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
        libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech2(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), lp_player);
        CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libWoLC_gf_WC_ArmyCategoryUnitType(lv_armyCategory)), (libWoLC_gf_WC_ArmyCategoryUnitType(lv_armyCategory)));
        TextExpressionSetToken("Param/Expression/lib_WoLC_5D41FBB9", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_WoLC_5D41FBB9", "B", StringToText((lv_armyCategory)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_5D41FBB9"), false);
    }

    lv_armyCategory2 = libWoLC_gf_WC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), null, null, lp_player);
        libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech2(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), lp_player);
        TextExpressionSetToken("Param/Expression/lib_WoLC_66073AC7", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_WoLC_66073AC7", "B", StringToText((lv_armyCategory2)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_66073AC7"), false);
        if ((lp_enableDisable == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libWoLC_gf_WC_ArmyCategoryUnitType(libWoLC_gf_WC_ArmyCategoryOfArmyUnit(lv_armyCategory2))), (libWoLC_gf_WC_StoryArmyUnitUnitType(lv_armyCategory2)));
            PlayerApplySkin(1, libWoLC_gf_WC_ArmyUnitSkin(lv_armyCategory2), true);
        }

    }

    libWoLC_gf_WC_UpdateWeaponArmorUpgrades(lp_player);
    libWoLC_gf_WC_UpdateWeaponArmorUpgrades2(lp_player);
    if ((libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == false)) {
        if ((lp_enableDisable == true)) {
            if ((libWoLC_gv_wC_ApplyingCampaignTech == true)) {
                libWoLC_gf_AddUnitTypeToUnitHelpPanel(libWoLC_gf_WC_CampaignTechUnitType(lp_techUnit), true, lp_player);
            }
            else {
                libWoLC_gf_AddUnitTypeToUnitHelpPanel(libWoLC_gf_WC_CampaignTechUnitType(lp_techUnit), false, lp_player);
            }
        }
        else {
            TechTreeUnitHelp(lp_player, libWoLC_gf_WC_CampaignTechUnitType(lp_techUnit), false);
        }
    }

    libWoLC_gf_TS_HelpTechTree_UpdatePanel2();
}

bool libWoLC_gf_CampaignTechUnitIsEnabled (string lp_techUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", 1) > 0);
}

bool libWoLC_gf_CampaignTechUnitIsEnabled2 (string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUpgrade", libWoLC_gf_WC_TechUpgradeOfArmyUpgrade(lp_upgrade), "Enabled", 1) > 0);
}

string libWoLC_gf_WC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libWoLC_gf_WC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libWoLC_gf_WC_ArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyCategory2 = libWoLC_gf_WC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        return libWoLC_gf_WC_StoryArmyUnitUnitType(lv_armyCategory2);
    }

    return null;
}

void libWoLC_gf_WC_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_infantryWeapon1;
    bool lv_infantryWeapon2;
    bool lv_infantryWeapon3;
    bool lv_infantryArmor1;
    bool lv_infantryArmor2;
    bool lv_infantryArmor3;
    bool lv_mechWeapon1;
    bool lv_mechWeapon2;
    bool lv_mechWeapon3;
    bool lv_mechArmor1;
    bool lv_mechArmor2;
    bool lv_mechArmor3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_infantryWeapon1 = true;
    lv_infantryWeapon2 = true;
    lv_infantryWeapon3 = true;
    lv_infantryArmor1 = true;
    lv_infantryArmor2 = true;
    lv_infantryArmor3 = true;
    lv_mechWeapon1 = true;
    lv_mechWeapon2 = true;
    lv_mechWeapon3 = true;
    lv_mechArmor1 = true;
    lv_mechArmor2 = true;
    lv_mechArmor3 = true;

    // Implementation
    lv_infantryArmor1 = false;
    lv_infantryWeapon1 = false;
    lv_mechWeapon1 = false;
    lv_mechArmor1 = false;
    lv_infantryWeapon2 = false;
    lv_infantryArmor2 = false;
    lv_mechWeapon2 = false;
    lv_mechArmor2 = false;
    lv_infantryWeapon3 = false;
    lv_infantryArmor3 = false;
    lv_mechWeapon3 = false;
    lv_mechArmor3 = false;
    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 2)) {
        lv_infantryArmor1 = true;
        lv_infantryWeapon1 = true;
        if (((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 10)) == true) || (TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 11)) == true))) {
            lv_mechWeapon1 = true;
            lv_mechArmor1 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 2), lv_infantryWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 6), lv_infantryArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 0), lv_mechWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 3), lv_mechArmor1);
    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 9)) {
        if ((lv_infantryWeapon1 == true)) {
            lv_infantryWeapon2 = true;
        }

        if ((lv_infantryArmor1 == true)) {
            lv_infantryArmor2 = true;
        }

        if ((lv_mechWeapon1 == true)) {
            lv_mechWeapon2 = true;
        }

        if ((lv_mechArmor1 == true)) {
            lv_mechArmor2 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 3), lv_infantryWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 7), lv_infantryArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 1), lv_mechWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 4), lv_mechArmor2);
    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 16)) {
        if ((lv_infantryWeapon2 == true)) {
            lv_infantryWeapon3 = true;
        }

        if ((lv_infantryArmor2 == true)) {
            lv_infantryArmor3 = true;
        }

        if ((lv_mechWeapon2 == true)) {
            lv_mechWeapon3 = true;
        }

        if ((lv_mechArmor2 == true)) {
            lv_mechArmor3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 4), lv_infantryWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 8), lv_infantryArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 2), lv_mechWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearchSwarm", 5), lv_mechArmor3);
}

void libWoLC_gf_WC_UpdateWeaponArmorUpgrades2 (int lp_player) {
    // Variable Declarations
    bool lv_infantryWeapon1;
    bool lv_infantryWeapon2;
    bool lv_infantryWeapon3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_infantryWeapon1 = true;
    lv_infantryWeapon2 = true;
    lv_infantryWeapon3 = true;

    // Implementation
    lv_infantryWeapon1 = false;
    lv_infantryWeapon2 = false;
    lv_infantryWeapon3 = false;
    if ((libWoLC_gf_WC_MissionisInstallation(libWoLC_gf_CurrentMap()) == false)) {
        if ((libWoLC_gf_MissionStatusCheck("TRaynor02", libWoLC_ge_MissionStatus_Completed) == true)) {
            lv_infantryWeapon1 = true;
        }

        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 10)) == true)) {
            lv_infantryWeapon2 = true;
        }

        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 11)) == true)) {
            lv_infantryWeapon3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), lv_infantryWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), lv_infantryWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), lv_infantryWeapon3);
}

void libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int autoE9D8EB4A_ae;
    const int autoE9D8EB4A_ai = 1;
    int auto1BF728AC_ae;
    const int auto1BF728AC_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    autoE9D8EB4A_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, 1);
    lv_index = 1;
    for ( ; ( (autoE9D8EB4A_ai >= 0 && lv_index <= autoE9D8EB4A_ae) || (autoE9D8EB4A_ai < 0 && lv_index >= autoE9D8EB4A_ae) ) ; lv_index += autoE9D8EB4A_ai ) {
        lv_upgrade = (libWoLC_gf_WC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto1BF728AC_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, 1);
    lv_index = 1;
    for ( ; ( (auto1BF728AC_ai >= 0 && lv_index <= auto1BF728AC_ae) || (auto1BF728AC_ai < 0 && lv_index >= auto1BF728AC_ae) ) ; lv_index += auto1BF728AC_ai ) {
        lv_abilityCommand = StringToAbilCmd(libWoLC_gf_WC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void libWoLC_gf_WC_EnableUpgradeAndAbilityCommandForTech2 (bool lp_enableDisable, int lp_catalog, string lp_entry, int lp_player) {
    // Variable Declarations
    string lv_unit;
    string lv_uField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uField = "Unit";

    // Implementation
    lv_unit = (libWoLC_gf_WC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, 1, lp_player));
    if ((lp_enableDisable == true)) {
        TechTreeUnitAllow(lp_player, lv_unit, true);
    }
    else {
        TechTreeUnitAllow(lp_player, lv_unit, false);
    }
}

void libWoLC_gf_TS_HelpTechTree_UpdatePanel2 () {
    // Automatic Variable Declarations
    // Implementation
}

void libWoLC_gf_WC_HelpTooltips_SingleUnit (string lp_techUnitCategory, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey) {
    // Variable Declarations
    string lv_fullString;
    string lv_appendedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fullString = "";
    lv_appendedString = "";

    // Implementation
    if ((libWoLC_gf_CampaignTechUnitIsEnabled(libWoLC_gf_WC_TechUnitOfArmyCategory(lp_techUnitCategory)) == true)) {
        lv_appendedString = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategory));
    }

    if ((libWoLC_gf_WC_ArmyCategoryState(lp_techUnitCategory) == c_armyCategoryStateUnlocked)) {
        lv_appendedString = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategory));
    }

    lv_fullString = (lp_baseStringKey + lv_appendedString);
    CatalogFieldValueSet(c_gameCatalogButton, lp_buttonLink, "Tooltip", 1, lv_fullString);
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitLink, "Description", 1, lv_fullString);
}

void libWoLC_gf_WC_HelpTooltips_DoubleUnit (string lp_techUnitCategoryA, string lp_techUnitCategoryB, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey) {
    // Variable Declarations
    string lv_fullString;
    string lv_appendedStringA;
    string lv_appendedStringB;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fullString = "";
    lv_appendedStringA = "";
    lv_appendedStringB = "";

    // Implementation
    if ((libWoLC_gf_CampaignTechUnitIsEnabled(libWoLC_gf_WC_TechUnitOfArmyCategory(lp_techUnitCategoryA)) == true)) {
        lv_appendedStringA = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryA));
    }

    if ((libWoLC_gf_CampaignTechUnitIsEnabled(libWoLC_gf_WC_TechUnitOfArmyCategory(lp_techUnitCategoryB)) == true)) {
        lv_appendedStringB = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryB));
    }

    if ((libWoLC_gf_WC_ArmyCategoryState(lp_techUnitCategoryA) == c_armyCategoryStateUnlocked)) {
        lv_appendedStringA = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryA));
    }

    if ((libWoLC_gf_WC_ArmyCategoryState(lp_techUnitCategoryB) == c_armyCategoryStateUnlocked)) {
        lv_appendedStringB = (libWoLC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryB));
    }

    lv_fullString = (lp_baseStringKey + lv_appendedStringA + lv_appendedStringB);
    CatalogFieldValueSet(c_gameCatalogButton, lp_buttonLink, "Tooltip", 1, lv_fullString);
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitLink, "Description", 1, lv_fullString);
}

void libWoLC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_CurrentMap() == null)) {
        return ;
    }

    GameSetTransitionMap(("Campaign/" + libWoLC_gf_WC_CampaignMapFile("TStory01")));
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_image = libWoLC_gf_WC_CampaignMapLoadingScreenImage(libWoLC_gf_CurrentMap());
    }
    else {
        lv_image = libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage(libWoLC_gf_CurrentMap());
    }
    GameSaveCreate(lp_name, lp_transition, lv_image, true);
}

void libWoLC_gf_ULoadCampaignData (string lp_map) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto421010EF_g;
    playergroup autoF5A711DE_g;

    // Variable Initialization

    // Implementation
    TriggerDebugWindowOpen(true);
    CampaignMode(PlayerGroupAll(), true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    UIUnitColorStyleClearOverride(PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    libWoLC_gf_WC_AutoHeatMapTestMode();
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    TriggerDebugSetTypeFile(13, "CampaignStats.txt");
    libWoLC_gv_wC_CurrentMap = lp_map;
    UserDataSetInt("Maps", libWoLC_gf_WC_MapUserDataInstance(lp_map), "IsCurrent", 1, 1);
    libWoLC_gv_wC_InStoryMode = libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_0DC23CE3"), false);
    libWoLC_gf_PS_LoadAllTransitionData(lp_map);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_8DA2DEAD"), false);
    if ((libWoLC_gf_WC_CampaignIsComplete() == true) && ((libWoLC_gv_wCX_IsSimulation == true) || (libWoLC_gv_wCX_IsVictoryPlayAgain == true))) {
        libWoLC_gf_WC_UpdateSimulationMissionAges(lp_map);
    }

    libWoLC_gf_WC_UpdateCompletedMissionArray();
    libWoLC_gf_PS_UpdatePlanetData();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_5B69E500"), false);
    libWoLC_gf_WC_OpenArmyTechBank();
    libWoLC_gf_WC_OpenStoryBank();
    if ((libWoLC_gf_WC_CampaignIsComplete() == true) && (libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true)) {
        libWoLC_gf_WC_ArchivesBankSyncForLoad();
    }

    if ((libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == false) && (libWoLC_gf_WC_CampaignIsComplete() == true)) {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), false);
    }
    else {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), true);
    }
    libWoLC_gf_WC_CampaignPreload();
    libWoLC_gf_WC_AchievementCategorySet();
    libWCMI_gf_WM_VoidCampaignMissionInit();
    libWoLC_gf_WC_StatRecordMapStart();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_7D5318A6"), false);
    libWoLC_gf_WC_ApplyTech(1);
    libWoLC_gf_WC_StoreTechBonusAtMissionBeginning();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_DD3C0FEA"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto421010EF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto421010EF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        PlayerSetColorIndex(1, libWCMI_gf_CampaignPlayerColor(), true);
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_44175D41"), false);
    autoF5A711DE_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF5A711DE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    if ((libWoLC_gv_wC_InStoryMode == false)) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
        if ((libWoLC_gv_wCX_IsSimulation == true)) {
            UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_WoLC_CE932263"));
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_WoLC_462A52E0"));
        }
        else if ((libWoLC_gf_StoryMapPlanet(lp_map) != "MarSara") && (libWoLC_gf_StoryMapPlanet(lp_map) != "Char")) {
            UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_WoLC_79497E0F"));
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_WoLC_0E47903F"));
        }
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    }
    if ((libWoLC_gf_WC_CampaignMapIsZeratul(lp_map) == true)) {
        UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleProtoss );
    }
    else {
        UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleTerran);
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PlayerData/ProductionPanel");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Race", (PlayerRace(1)));
    libWoLC_gf_WC_PrepareLoadingScreen(lp_map, true);
    TriggerSendEvent(libWoLC_gv_wCC_EVENT_MISSIONSTART);
}

void libWoLC_gf_WC_AutoHeatMapTestMode () {
    // Variable Declarations
    trigger lv_disableTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameTestConfigType() != 1)) {
        return ;
    }

    UnitPauseAll(true);
    libWCMI_gf_GameOver(libWCMI_ge_CampaignMissionGameResultType_Victory);
    while (true) {
        Wait(10.0, c_timeGame);
    }
}

void libWoLC_gf_WC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

bool libWoLC_gf_WC_CampaignIsComplete () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wC_InCompletedCampaign;
}

void libWoLC_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libWoLC_gf_WC_SetCampaignDifficulty(lp_difficulty);
    }

    if ((lp_nextIsVictoryAgain == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(lp_nextMission, c_mapKindStory) == false)) {
        libWoLC_gf_WC_SaveArmyTechBank(lp_nextMission, lp_nextIsSimulation);
    }

    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        libWoLC_gf_DispatchCampaignEvent(libWoLC_ge_WC_Event_CampaignMapTransition, "Mission", "", true);
    }

    libWoLC_gf_PS_SaveAllTransitionData(lp_nextIsSimulation, lp_nextIsVictoryAgain, false);
    libWoLC_gf_WC_PrepareLoadingScreen(lp_nextMission, false);
    GameSetNextMap(("Campaign/" + libWoLC_gf_WC_CampaignMapFile(lp_nextMission)));
}

void libWoLC_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_OpenCampaignBank();
    libWoLC_gf_WC_SaveTransitionVars(libWoLC_gv_wC_CampaignBank, null, false, false, false, false, false);
}

void libWoLC_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty) {
    // Variable Declarations
    string lv_planet;
    bool lv_isActuallyVictory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_isActuallyVictory = ((lp_victoryDefeat == c_gameOverVictory) || libWoLC_gv_wCX_IsVictoryPlayAgain);
    if ((libWoLC_gv_wCX_IsSimulation == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true) && (lv_isActuallyVictory == true)) {
        libWoLC_gv_wCX_LastSuccessfulMission = libWoLC_gf_CurrentMap();
        libWoLC_gf_WC_CompleteMission(libWoLC_gf_CurrentMap());
        libWoLC_gf_WC_CopyWriterStatesToSnapshot();
    }

    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    libWoLC_gf_PS_SaveAllTransitionData(false, false, (lp_victoryDefeat == c_gameOverDefeat));
    libWoLC_gf_WC_PrepareLoadingScreen("TStory01", false);
    GameSetNextMap(("Campaign/" + libWoLC_gf_WC_CampaignMapFile("TStory01")));
    TextExpressionSetToken("Param/Expression/lib_WoLC_02626E2A", "A", StringToText(("Campaign/Void/" + libWoLC_gf_WC_CampaignMapFile("TStory01"))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_02626E2A"), false);
}

void libWoLC_gf_PrepareForStoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_DispatchCampaignEvent(libWoLC_ge_WC_Event_CampaignMapTransition, "Story", "", true);
    libWoLC_gf_PS_SaveAllTransitionData(false, false, false);
    libWoLC_gf_WC_PrepareLoadingScreen(lp_nextMap, false);
    libWoLC_gf_WC_UpdateCampaignScreen(lp_nextMap);
    GameSetNextMap(("Campaign/" + libWoLC_gf_WC_CampaignMapFile(lp_nextMap)));
    GameSetTransitionMap(("Campaign/" + libWoLC_gf_WC_CampaignMapFile(lp_nextMap)));
    TextExpressionSetToken("Param/Expression/lib_WoLC_37BD8C51", "A", libWoLC_gf_WC_CampaignMapName(lp_nextMap));
    GameSaveCreate(TextExpressionAssemble("Param/Expression/lib_WoLC_37BD8C51"), StringToText(""), "", true);
    Wait(0.1, c_timeGame);
}

bool libWoLC_gf_CurrentMissionIsSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gv_wCX_IsSimulation || libWoLC_gv_wCX_IsVictoryPlayAgain);
}

void libWoLC_gf_WC_CompletedSavesEnable () {
    // Automatic Variable Declarations
    // Implementation
    if ((AchievementsDisabled(1) == true)) {
        return ;
    }

    CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
}

void libWoLC_gf_WC_UpdateCampaignScreen (string lp_mission) {
    // Variable Declarations
    int lv_index;
    const string lv_campaignID = "WingsOfLiberty";

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_mission == null)) {
        return ;
    }

    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true)) {
        if ((libWoLC_gf_WC_CampaignIsComplete() == false)) {
            libWoLC_gv_wC_InCompletedCampaign = true;
            libWoLC_gf_WC_ArchiveBankLoad();
        }

        TextExpressionSetToken("Param/Expression/lib_WoLC_8B2DEB44", "SUMMARY", libWoLC_gf_StoryMapHelp2("TValerian03"));
        TextExpressionSetToken("Param/Expression/lib_WoLC_8B2DEB44", "MISSIONSCOMPLETE", IntToText(libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed)));
        TextExpressionSetToken("Param/Expression/lib_WoLC_8B2DEB44", "DIFFICULTY", DifficultyNameCampaign(libWoLC_gv_pCX_CampaignDifficulty));
        CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_WoLC_8B2DEB44"));
        CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, "Assets\\Textures\\ui_battlenet_glue_campaign_mapicon_wings_finish.dds");
        CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_WoLC_B282D0C8", "D", libWoLC_gf_WC_CampaignMapName(lp_mission));
        TextExpressionSetToken("Param/Expression/lib_WoLC_B282D0C8", "A", libWoLC_gf_StoryMapHelp2(lp_mission));
        TextExpressionSetToken("Param/Expression/lib_WoLC_B282D0C8", "B", IntToText(libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed)));
        TextExpressionSetToken("Param/Expression/lib_WoLC_B282D0C8", "C", DifficultyNameCampaign(libWoLC_gv_pCX_CampaignDifficulty));
        CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_WoLC_B282D0C8"));
        CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, false);
        if ((libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage(lp_mission) == null)) {
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libWoLC_gf_WC_CampaignMapLoadingScreenImage(lp_mission));
        }
        else {
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage(lp_mission));
        }
    }
}

void libWoLC_gf_WC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart) {
    // Variable Declarations
    string lv_offsetString;
    int lv_offsetX;
    int lv_offsetY;
    text lv_title;
    text lv_subtitle;
    text lv_body;
    string lv_image;
    bool lv_waitForKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetString = "";

    // Implementation
    if ((lp_restart == true)) {
        UISetRestartLoadingScreen(StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)));
        return ;
    }

    lv_offsetString = CatalogFieldValueGet(c_gameCatalogMap, (lp_nextMap), "LoadingTextOffset", c_playerAny);
    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", 1, c_stringCase);
    lv_waitForKey = !(libWoLC_gf_WC_CampaignMapTypeCheck(lp_nextMap, c_mapKindStory));
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    if ((libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true) && (libWoLC_gf_LastMap() != lp_nextMap)) {
        lv_image = libWoLC_gf_WC_CampaignMapLoadingScreenVictoryImage(libWoLC_gf_CurrentMap());
    }

    lv_offsetX = StringToInt(StringWord(lv_offsetString, 1));
    lv_offsetY = StringToInt(StringWord(lv_offsetString, 2));
    lv_offsetY += 240;
    lv_offsetX += 130;
    if ((lv_image == null)) {
        lv_image = libWoLC_gf_WC_CampaignMapLoadingScreenImage(lp_nextMap);
    }

    UISetNextLoadingScreen(lv_image, StringToText(""), lv_subtitle, lv_body, libWoLC_gf_WC_CampaignMapHelp(lp_nextMap), lv_waitForKey);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, lv_offsetX, lv_offsetY, CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextWidth", c_playerAny), CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextHeight", c_playerAny));
}

string libWoLC_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wCX_LastMap;
}

bool libWoLC_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto0E68E9EB_val;

    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        return libWoLC_gf_LastMissionConditionCheck(lp_condition);
    }

    auto0E68E9EB_val = lp_condition;
    if (auto0E68E9EB_val == libWoLC_ge_MissionCondition_Sucessful) {
        return libWoLC_gv_wCX_LastMapSuccess;
    }
    else {
    }
    return false;
}

string libWoLC_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wCX_LastMission;
}

bool libWoLC_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto2A9AF03D_val;

    // Implementation
    auto2A9AF03D_val = lp_condition;
    if (auto2A9AF03D_val == libWoLC_ge_MissionCondition_Sucessful) {
        return libWoLC_gv_wCX_LastMissionSuccess;
    }
    else if (auto2A9AF03D_val == libWoLC_ge_MissionCondition_Simulation) {
        return libWoLC_gv_wCX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

string libWoLC_gf_LastSuccessfulMission () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wCX_LastSuccessfulMission;
}

int libWoLC_gf_WC_CampaignSaveIndex () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wCC_CampaignWoLIndex;
}

void libWoLC_gf_PS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libWoLC_gf_WC_OpenCampaignBank();
    libWoLC_gv_wCX_LastMap = libWoLC_gf_CurrentMap();
    if ((libWoLC_gv_wCX_IsVictoryPlayAgain == true)) {
        libWoLC_gv_wCX_LastMapSuccess = true;
    }
    else {
        libWoLC_gv_wCX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gv_wCX_LastMap, c_mapKindMission) == true)) {
        libWoLC_gv_wCX_LastMission = libWoLC_gv_wCX_LastMap;
        libWoLC_gv_wCX_LastMissionSuccess = libWoLC_gv_wCX_LastMapSuccess;
        libWoLC_gv_wCX_LastMissionSimulation = libWoLC_gv_wCX_IsSimulation;
    }
    else if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gv_wCX_LastMap, c_mapKindUpgrade) == true)) {
        libWoLC_gv_wCX_LastMissionSimulation = libWoLC_gv_wCX_IsSimulation;
    }
    libWoLC_gf_WC_SaveTransitionVars(libWoLC_gv_wC_CampaignBank, null, lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, libWoLC_gv_wCX_IsSimulation, libWoLC_gv_wCX_IsVictoryPlayAgain);
    libWoLC_gf_WC_SaveCampaignBank();
    libWoLC_gf_WC_SaveCampaignBank2();
}

void libWoLC_gf_PS_LoadAllTransitionData (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_map == "TStory01") && (libWoLC_gf_WC_CampaignLegacyBankExists() == false)) || (libWoLC_gf_WC_CampaignBankExists() == false))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_253EB9C4"), false);
        libWoLC_gf_ResetCampaignData();
        libWoLC_gf_WC_SetCampaignDifficulty(PlayerDifficulty(1));
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_6670EA63"), false);
    libWoLC_gf_WC_OpenCampaignLegacyBank();
    libWoLC_gf_WC_OpenCampaignBank();
    libWoLC_gf_WC_LoadTransitionVars(libWoLC_gv_wC_CampaignBank, null);
    libWoLC_gf_TS_UpdateStoryStates();
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libWoLC_gv_wC_CampaignDataBackup_MissionBestTime = libWoLC_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_WoLC_A0360684"), false);
    libWoLC_gf_WC_LoadMissionSections();
}

void libWoLC_gf_WC_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain) {
    // Variable Declarations
    int lv_indexScene;
    string lv__SectionName;
    int lv_difficulty;
    int lv_index;
    string lv_imagevar;

    // Automatic Variable Declarations
    int autoB8A58551_ae;
    int autoB8A58551_var;
    int auto747DC697_ae;
    const int auto747DC697_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_map == null)) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignLastInfo");
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("Simulation"), lp_nextIsSimulation, false);
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("VictoryPlayAgain"), lp_nextIsVictoryPlayAgain, false);
        libWoLC_gf_WC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMap"), libWoLC_gf_WC_StoryMapBankID(libWoLC_gv_wCX_LastMap), "");
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMapSuccess"), libWoLC_gv_wCX_LastMapSuccess, false);
        libWoLC_gf_WC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMission"), libWoLC_gf_WC_StoryMapBankID(libWoLC_gv_wCX_LastMission), "");
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSuccess"), libWoLC_gv_wCX_LastMissionSuccess, false);
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSimulation"), libWoLC_gv_wCX_LastMissionSimulation, false);
        libWoLC_gf_WC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastSuccessfulMission"), libWoLC_gf_WC_StoryMapBankID(libWoLC_gv_wCX_LastSuccessfulMission), "");
        libWoLC_gf_WC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("Location"), libWoLC_gf_WC_StoryMapBankID2(libWoLC_gv_wCX_CurrentLocation), "");
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignSetting");
        libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MapInstanceID"), libWoLC_gv_wCX_MapInstanceID, 0);
        libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("AchievementsDisabled"), AchievementsDisabled(1), false);
        if ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)) {
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignSetting");
            libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Difficulty"), libWoLC_gf_WC_DifficultyIndex(libWoLC_gv_pCX_CampaignDifficulty), 0);
            libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("DebugProgress"), libWoLC_gv_pCX_DebugProgress, false);
            libWoLC_gf_WC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("UpgradesTaught"), libWoLC_gv_pCX_UpgradesTaught, false);
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignCredits");
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Scenes");
            UserDataSaveType("Scenes", lp_targetBank, lv__SectionName);
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "StoryStates");
            UserDataSaveType("StoryStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignStats");
            libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCount"), libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed), 0);
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignStats");
            libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCountNext"), (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed)+1), 0);
            lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyCategory");
            BankSectionCreate(lp_targetBank, lv__SectionName);
            libWoLC_gf_WC_SaveArmyCategoryToBank(lp_targetBank, lv__SectionName);
            autoB8A58551_ae = libWoLC_gv_wC_PersistentUserTypeCount;
            autoB8A58551_var = 0;
            for ( ; autoB8A58551_var <= autoB8A58551_ae; autoB8A58551_var += 1 ) {
                if ((libWoLC_gv_wC_PersistentUserTypes[autoB8A58551_var] != null)) {
                    UserDataSaveType(libWoLC_gv_wC_PersistentUserTypes[autoB8A58551_var], lp_targetBank, libWoLC_gf_WC_BankSectionName2(libWoLC_gv_wC_PersistentUserTypes[autoB8A58551_var]));
                }

            }
        }

    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((lp_map != null) && (libWoLC_gf_WC_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libWoLC_gf_WC_SetMissionSectionExists(lp_map, true);
    }

    if (((lp_map != null) || ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)))) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyUpgrade");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libWoLC_gf_WC_SaveArmyUpgradesToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyUnit");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libWoLC_gf_WC_SaveArmyUnitsToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Perks");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libWoLC_gf_WC_SavePerksToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Mercenary");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libWoLC_gf_WC_SaveMercenaryToBank(lp_targetBank, lv__SectionName);
    }

    libWoLC_gf_WC_SaveMapToBank(lp_map, lp_targetBank, (lp_resultFromSimulation || lp_resultFromVictoryAgain));
    if (((lp_resultFromSimulation == true) || (lp_resultFromVictoryAgain == true))) {
        return ;
    }

    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "HelpUnitsPanel");
    libWoLC_gf_WC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount, 0);
    auto747DC697_ae = libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (auto747DC697_ai >= 0 && lv_index <= auto747DC697_ae) || (auto747DC697_ai < 0 && lv_index >= auto747DC697_ae) ) ; lv_index += auto747DC697_ai ) {
        libWoLC_gf_WC_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), libWoLC_gf_PS_HelpUnitsPanel_UnitTypeStringID(libWoLC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Tips");
    UserDataSaveType("CampaignTips", lp_targetBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|SceneExtraObjects");
    ConversationDataSaveStateValues("SceneExtraObjects", lp_targetBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Hotspots");
    ConversationDataSaveStateValues("Hotspots", lp_targetBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Arcade");
    ConversationDataSaveStateValues("ArcadeGameVariables", lp_targetBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Conversations");
    libWoLC_gf_WC_SaveAllStoryConversations(lp_targetBank, lv__SectionName);
}

void libWoLC_gf_WC_LoadTransitionVars (bank lp_sourceBank, string lp_map) {
    // Variable Declarations
    int lv_tipvalue;
    string lv_indexScene;
    string lv_indexObjective;
    int lv_kerriganExperience;
    string lv__SectionName;
    int lv_count;
    int lv_index;
    fixed lv_blizzconTiming;

    // Automatic Variable Declarations
    int autoE1BE8001_ae;
    const int autoE1BE8001_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    libWoLC_gf_WC_LoadMapFromBank(lp_map, lp_sourceBank);
    if ((lp_map == null)) {
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignLastInfo");
        libWoLC_gv_wCX_IsSimulation = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("Simulation"), false);
        libWoLC_gv_wCX_IsVictoryPlayAgain = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("VictoryPlayAgain"), false);
        libWoLC_gv_wCX_LastMap = (libWoLC_gf_WC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMap"), ""));
        libWoLC_gv_wCX_LastMapSuccess = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMapSuccess"), false);
        libWoLC_gv_wCX_LastMission = (libWoLC_gf_WC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMission"), ""));
        libWoLC_gv_wCX_LastMissionSuccess = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSuccess"), false);
        libWoLC_gv_wCX_LastMissionSimulation = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSimulation"), false);
        libWoLC_gv_wCX_LastSuccessfulMission = (libWoLC_gf_WC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastSuccessfulMission"), ""));
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignCredits");
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignSetting");
        libWoLC_gv_pCX_CampaignDifficulty = libWoLC_gf_WC_DifficultyFromIndex(libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Difficulty"), 0));
        libWoLC_gv_pCX_DebugProgress = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("DebugProgress"), false);
        libWoLC_gv_pCX_UpgradesTaught = libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("UpgradesTaught"), false);
        libWoLC_gv_wCX_MapInstanceID = libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("MapInstanceID"), 0);
        libWoLC_gv_wCX_MapInstanceID += 1;
        if ((libWoLC_gf_WC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("AchievementsDisabled"), false) == true)) {
            AchievementsDisable(1);
        }

        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Scenes");
        UserDataLoadType("Scenes", lp_sourceBank, lv__SectionName);
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "StoryStates");
        UserDataLoadType("StoryStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "CampaignLastInfo");
        libWoLC_gf_WC_SetLocationActive((libWoLC_gf_WC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("Location"), "")));
        libWoLC_gf_WC_UpdateCampaignScreen(libWoLC_gf_LastSuccessfulMission());
    }

    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyCategory");
    libWoLC_gf_WC_LoadArmyCategoryFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyUpgrade");
    libWoLC_gf_WC_LoadArmyUpgradesFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "ArmyUnit");
    libWoLC_gf_WC_LoadArmyUnitsFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Perks");
    libWoLC_gf_WC_LoadPerksFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Mercenary");
    libWoLC_gf_WC_LoadMercenaryFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "HelpUnitsPanel");
    lv_count = libWoLC_gf_WC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    autoE1BE8001_ae = lv_count;
    lv_index = 1;
    for ( ; ( (autoE1BE8001_ai >= 0 && lv_index <= autoE1BE8001_ae) || (autoE1BE8001_ai < 0 && lv_index >= autoE1BE8001_ae) ) ; lv_index += autoE1BE8001_ai ) {
        libWoLC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(UnitTypeFromString(libWoLC_gf_WC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
    }
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Tips");
    UserDataLoadType("CampaignTips", lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|SceneExtraObjects");
    ConversationDataLoadStateValues("SceneExtraObjects", lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Hotspots");
    ConversationDataLoadStateValues("Hotspots", lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Arcade");
    ConversationDataLoadStateValues("ArcadeGameVariables", lp_sourceBank, lv__SectionName);
    lv__SectionName = libWoLC_gf_WC_BankSectionName(lp_map, "Legacy|Conversations");
    libWoLC_gf_WC_LoadAllStoryConversations(lp_sourceBank, lv__SectionName);
}

void libWoLC_gf_WC_SaveAllStoryConversations (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataSaveNodeState("ArmorySwann", lp_bank, lp_section);
    ConversationDataSaveNodeState("BridgeHanson", lp_bank, lp_section);
    ConversationDataSaveNodeState("BridgeHorner", lp_bank, lp_section);
    ConversationDataSaveNodeState("BridgeTosh", lp_bank, lp_section);
    ConversationDataSaveNodeState("BridgeTychus", lp_bank, lp_section);
    ConversationDataSaveNodeState("CantinafidgetsJukebox", lp_bank, lp_section);
    ConversationDataSaveNodeState("CantinaTosh", lp_bank, lp_section);
    ConversationDataSaveNodeState("CantinaTychus", lp_bank, lp_section);
    ConversationDataSaveNodeState("CharFidgetsArtifact", lp_bank, lp_section);
    ConversationDataSaveNodeState("CharTychus", lp_bank, lp_section);
    ConversationDataSaveNodeState("CharWarfield", lp_bank, lp_section);
    ConversationDataSaveNodeState("LabFidgetsAdjutant", lp_bank, lp_section);
    ConversationDataSaveNodeState("LabFidgetsArtifact", lp_bank, lp_section);
    ConversationDataSaveNodeState("LabHanson", lp_bank, lp_section);
    ConversationDataSaveNodeState("Labresearch", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsArmyphoto", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsBadge", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsEvolutionofrevolution2", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsFreedomposter", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsHeavensDevils", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsHydrahead", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsHydrahunt", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSarafidgetsintro", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsKerriganPhoto", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsLocalhero2", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetsvikingphoto2", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraFidgetswantedposter", lp_bank, lp_section);
    ConversationDataSaveNodeState("MarSaraTychus", lp_bank, lp_section);
    ConversationDataSaveNodeState("Valerian", lp_bank, lp_section);
}

void libWoLC_gf_WC_LoadAllStoryConversations (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataLoadNodeState("ArmorySwann", lp_bank, lp_section);
    ConversationDataLoadNodeState("BridgeHanson", lp_bank, lp_section);
    ConversationDataLoadNodeState("BridgeHorner", lp_bank, lp_section);
    ConversationDataLoadNodeState("BridgeTosh", lp_bank, lp_section);
    ConversationDataLoadNodeState("BridgeTychus", lp_bank, lp_section);
    ConversationDataLoadNodeState("CantinafidgetsJukebox", lp_bank, lp_section);
    ConversationDataLoadNodeState("CantinaTosh", lp_bank, lp_section);
    ConversationDataLoadNodeState("CantinaTychus", lp_bank, lp_section);
    ConversationDataLoadNodeState("CharFidgetsArtifact", lp_bank, lp_section);
    ConversationDataLoadNodeState("CharTychus", lp_bank, lp_section);
    ConversationDataLoadNodeState("CharWarfield", lp_bank, lp_section);
    ConversationDataLoadNodeState("LabFidgetsAdjutant", lp_bank, lp_section);
    ConversationDataLoadNodeState("LabFidgetsArtifact", lp_bank, lp_section);
    ConversationDataLoadNodeState("LabHanson", lp_bank, lp_section);
    ConversationDataLoadNodeState("Labresearch", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsArmyphoto", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsBadge", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsEvolutionofrevolution2", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsFreedomposter", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsHeavensDevils", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsHydrahead", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsHydrahunt", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSarafidgetsintro", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsKerriganPhoto", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsLocalhero2", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetsvikingphoto2", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraFidgetswantedposter", lp_bank, lp_section);
    ConversationDataLoadNodeState("MarSaraTychus", lp_bank, lp_section);
    ConversationDataLoadNodeState("Valerian", lp_bank, lp_section);
}

void libWoLC_gf_ResetCampaignData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;

    // Automatic Variable Declarations
    int auto5F0C6AC9_ai;
    int auto5F0C6AC9_ae;
    int autoF3E471F1_ae;
    int autoF3E471F1_ai;

    // Variable Initialization

    // Implementation
    UserDataResetAll();
    libWoLC_gv_wCX_IsSimulation = false;
    libWoLC_gv_wCX_IsVictoryPlayAgain = false;
    libWoLC_gv_wCX_LastMap = null;
    libWoLC_gv_wCX_LastMapSuccess = false;
    libWoLC_gv_wCX_LastMission = null;
    libWoLC_gv_wCX_LastMissionSimulation = false;
    libWoLC_gv_wCX_LastMissionSuccess = false;
    libWoLC_gv_wCX_LastSuccessfulMission = null;
    libWoLC_gv_wCX_CurrentLocation = "MarSara";
    libWoLC_gv_pCX_UpgradesTaught = false;
    libWoLC_gv_pCX_DebugProgress = false;
    libWoLC_gf_WC_ResetTech();
    auto5F0C6AC9_ai = 1;
    auto5F0C6AC9_ae = UserDataInstanceCount("Scenes")+1;
    while (auto5F0C6AC9_ai < auto5F0C6AC9_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto5F0C6AC9_ai);
        libWoLC_gf_SetStoryScenePlayed(lv_indexScene, false);
        auto5F0C6AC9_ai = auto5F0C6AC9_ai+1;
    }
    autoF3E471F1_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF3E471F1_ai = 1;
    while (autoF3E471F1_ai <= autoF3E471F1_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF3E471F1_ai);
        autoF3E471F1_ai = autoF3E471F1_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libWoLC_gf_WC_MarkMissionAsStatus(lv_indexMission, libWoLC_ge_MissionStatus_Locked);
        }    
    }
    libWoLC_gf_WC_MarkMissionAsStatus("TRaynor01", libWoLC_ge_MissionStatus_Available);
    libWoLC_gf_DispatchCampaignEvent(libWoLC_ge_WC_Event_CampaignDataReset, "", "", false);
    libWoLC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes();
    TriggerExecute(libCamp_gf_StoryModeRoomStates2(), true, true);
}

void libWoLC_gf_TS_UpdateStoryStates () {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    int autoB1F79FD4_ae;
    int autoB1F79FD4_var;
    int auto92BB285E_ae;
    int auto92BB285E_ai;

    // Variable Initialization

    // Implementation
    ConversationDataStateSetValue("MissionCompletedCount", libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed));
    autoB1F79FD4_ae = ConversationDataStateIndexCount("MissionLast");
    autoB1F79FD4_var = 1;
    for ( ; autoB1F79FD4_var <= autoB1F79FD4_ae; autoB1F79FD4_var += 1 ) {
        ConversationDataStateSetValue(ConversationDataStateIndex("MissionLast", autoB1F79FD4_var), 0);
    }
    ConversationDataStateSetValue((("MissionLast|" + (libWoLC_gf_LastSuccessfulMission()))), 1);
    auto92BB285E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto92BB285E_ai = 1;
    while (auto92BB285E_ai <= auto92BB285E_ae) {
        lv_map = CatalogEntryGet(c_gameCatalogMap, auto92BB285E_ai);
        auto92BB285E_ai = auto92BB285E_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_map, "Kind", 1) == "Mission") {
            ConversationDataStateSetValue((("MissionCompleted|" + (lv_map))), BoolToInt(libWoLC_gf_MissionStatusCheck(lv_map, libWoLC_ge_MissionStatus_Completed)));
            ConversationDataStateSetValue((("MissionAvailable|" + (lv_map))), BoolToInt(libWoLC_gf_MissionStatusCheck(lv_map, libWoLC_ge_MissionStatus_Available)));
        }    
    }
    if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && ((libWoLC_gf_LastMission() == "TZeratul02") || (libWoLC_gf_LastMission() == "TZeratul03"))) {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 1);
    }
    else {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 0);
    }
    ConversationDataStateSetValue("StoryState|CantinaOpened", libWoLC_gf_StoryStateInteger("CantinaOpened"));
    ConversationDataStateSetValue("StoryState|CantinaVisited", libWoLC_gf_StoryStateInteger("CantinaVisited"));
    ConversationDataStateSetValue("StoryState|CantinaHornerLinePlayed", libWoLC_gf_StoryStateInteger("CantinaHornerLinePlayed"));
    ConversationDataStateSetValue("StoryState|LabOpened", libWoLC_gf_StoryStateInteger("LabOpened"));
    ConversationDataStateSetValue("StoryState|LabVisited", libWoLC_gf_StoryStateInteger("LabVisited"));
    ConversationDataStateSetValue("StoryState|LabHornerLinePlayed", libWoLC_gf_StoryStateInteger("LabHornerLinePlayed"));
}

void libWoLC_gf_WC_SaveArmyTechBank (string lp_nextMission, bool lp_simulation) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryState;
    int lv_unitIndex;
    string lv_indexUnit;
    int lv_unitState;
    string lv_bankPath;
    string lv_section;
    string lv_key;
    string lv_categorySection;
    string lv_unitSection;

    // Automatic Variable Declarations
    int auto48774C10_ae;
    int auto48774C10_ai;
    int auto8D929E0C_ae;
    int auto8D929E0C_ai;
    int autoCDD6D710_ae;
    int autoCDD6D710_ai;
    int auto69FACFC2_ae;
    int auto69FACFC2_ai;
    int autoE0F96F5D_ae;
    int autoE0F96F5D_ai;
    int autoF698B290_ae;
    int autoF698B290_ai;

    // Variable Initialization
    lv_key = "";

    // Implementation
    libWoLC_gf_WC_OpenArmyTechBank();
    if (((libWoLC_gv_wC_ArmyTechBank == null))) {
        return ;
    }

    auto48774C10_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto48774C10_ai = 1;
    while (auto48774C10_ai <= auto48774C10_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto48774C10_ai);
        lv_section = libWoLC_gf_WC_ArmyCategoryBankSection(lv_indexCategory);
        BankSectionRemove(libWoLC_gv_wC_ArmyTechBank, lv_section);
        auto8D929E0C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto8D929E0C_ai = 1;
        while (auto8D929E0C_ai <= auto8D929E0C_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto8D929E0C_ai-1)+"]", 1);
            lv_section = libWoLC_gf_WC_ArmyUnitBankSection(lv_indexUnit);
            BankSectionRemove(libWoLC_gv_wC_ArmyTechBank, lv_section);
            auto8D929E0C_ai = auto8D929E0C_ai + 1;
        }
        auto48774C10_ai = auto48774C10_ai + 1;
    }
    if ((lp_simulation == true)) {
        libWoLC_gf_WC_OpenCampaignBank();
        lv_categorySection = libWoLC_gf_WC_BankSectionName(null, "ArmyCategory");
        lv_unitSection = libWoLC_gf_WC_BankSectionName(lp_nextMission, "ArmyUnit");
        if (((lp_nextMission == "TRaynor01") || ((BankSectionExists(libWoLC_gv_wC_CampaignBank, lv_categorySection) == true) && (BankSectionExists(libWoLC_gv_wC_CampaignBank, lv_unitSection) == true)))) {
            autoCDD6D710_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            autoCDD6D710_ai = 1;
            while (autoCDD6D710_ai <= autoCDD6D710_ae) {
                lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCDD6D710_ai);
                lv_categoryState = libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_CampaignBank, lv_categorySection, (lv_indexCategory), 0);
                lv_section = libWoLC_gf_WC_ArmyCategoryBankSection(lv_indexCategory);
                lv_key = libWoLC_gf_WC_ArmyCategoryBankKey(lv_indexCategory);
                libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArmyTechBank, lv_section, lv_key, lv_categoryState, 0);
                auto69FACFC2_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
                auto69FACFC2_ai = 1;
                while (auto69FACFC2_ai <= auto69FACFC2_ae) {
                    lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto69FACFC2_ai-1)+"]", 1);
                    lv_unitState = libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_CampaignBank, lv_unitSection, (lv_indexUnit), 0);
                    lv_section = libWoLC_gf_WC_ArmyUnitBankSection(lv_indexUnit);
                    lv_key = libWoLC_gf_WC_ArmyUnitBankKey(lv_indexUnit);
                    libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArmyTechBank, lv_section, lv_key, lv_unitState, 0);
                    auto69FACFC2_ai = auto69FACFC2_ai + 1;
                }
                autoCDD6D710_ai = autoCDD6D710_ai + 1;
            }
            BankSave(libWoLC_gv_wC_ArmyTechBank);
            return ;
        }

    }

    autoE0F96F5D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoE0F96F5D_ai = 1;
    while (autoE0F96F5D_ai <= autoE0F96F5D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoE0F96F5D_ai);
        lv_section = libWoLC_gf_WC_ArmyCategoryBankSection(lv_indexCategory);
        lv_key = libWoLC_gf_WC_ArmyCategoryBankKey(lv_indexCategory);
        libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArmyTechBank, lv_section, lv_key, (libWoLC_gf_WC_ArmyCategoryState(lv_indexCategory)), 0);
        autoF698B290_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoF698B290_ai = 1;
        while (autoF698B290_ai <= autoF698B290_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoF698B290_ai-1)+"]", 1);
            lv_section = libWoLC_gf_WC_ArmyUnitBankSection(lv_indexUnit);
            lv_key = libWoLC_gf_WC_ArmyUnitBankKey(lv_indexUnit);
            libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArmyTechBank, lv_section, lv_key, (libWoLC_gf_WC_StoryArmyUnitState(lv_indexUnit)), 0);
            autoF698B290_ai = autoF698B290_ai + 1;
        }
        autoE0F96F5D_ai = autoE0F96F5D_ai + 1;
    }
    BankSave(libWoLC_gv_wC_ArmyTechBank);
    TextExpressionSetToken("Param/Expression/lib_WoLC_6F0FF8BB", "A", StringToText(lv_bankPath));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_6F0FF8BB"), false);
}

void libWoLC_gf_WC_OpenArmyTechBank () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_bankPath;

    // Automatic Variable Declarations
    int autoC4517888_ae;
    int autoC4517888_ai;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gv_wC_ArmyTechBank != null)) {
        return ;
    }

    autoC4517888_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC4517888_ai = 1;
    while (autoC4517888_ai <= autoC4517888_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC4517888_ai);
        lv_bankPath = libWoLC_gf_WC_ArmyCategoryBankPath(lv_indexCategory);
        BankLoad(lv_bankPath, 1);
        libWoLC_gv_wC_ArmyTechBank = BankLastCreated();
        return ;
        autoC4517888_ai = autoC4517888_ai + 1;
    }
}

string libWoLC_gf_WC_ArmyCategoryBankPath (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.File", 1);
}

string libWoLC_gf_WC_ArmyCategoryBankSection (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Section", 1);
}

string libWoLC_gf_WC_ArmyCategoryBankKey (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Key", 1);
}

string libWoLC_gf_WC_ArmyUnitBankPath (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.File", 1);
}

string libWoLC_gf_WC_ArmyUnitBankSection (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Section", 1);
}

string libWoLC_gf_WC_ArmyUnitBankKey (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Key", 1);
}

void libWoLC_gf_WC_OpenArchiveBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_ArchivesBank != null)) {
        return ;
    }

    BankLoad(libWoLC_gv_wC_ArchiveLotVBankName, 1);
    libWoLC_gv_wC_ArchivesBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

void libWoLC_gf_WC_ArchiveBankObjectiveSave (string lp_objective) {
    // Variable Declarations
    int lv_oldProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldProgress = libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionObjectives"), (lp_objective), 0);
    if ((lv_oldProgress < libWoLC_gf_MissionObjectiveProgress(lp_objective))) {
        libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionObjectives"), (lp_objective), libWoLC_gf_MissionObjectiveProgress(lp_objective), 0);
    }
    else {
        libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionObjectives"), (lp_objective), lv_oldProgress, 0);
    }
}

void libWoLC_gf_WC_ArchiveBankSave () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoACAE0323_ae;
    int autoACAE0323_ai;
    int autoA79FDAA3_ae;
    int autoA79FDAA3_ai;

    // Variable Initialization

    // Implementation
    if (((AchievementsDisabled(1) == true) || (libWoLC_gv_wC_ArchivesReloading == true))) {
        return ;
    }

    libWoLC_gf_WC_OpenArchiveBank();
    autoACAE0323_ae = CatalogEntryCount(c_gameCatalogObjective);
    autoACAE0323_ai = 1;
    while (autoACAE0323_ai <= autoACAE0323_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoACAE0323_ai);
        autoACAE0323_ai = autoACAE0323_ai + 1;
        libWoLC_gf_WC_ArchiveBankObjectiveSave(lv_indexObjective);
    }
    autoA79FDAA3_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA79FDAA3_ai = 1;
    while (autoA79FDAA3_ai <= autoA79FDAA3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA79FDAA3_ai);
        autoA79FDAA3_ai = autoA79FDAA3_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libWoLC_gf_WC_ArchiveBankMissionSave(lv_indexMission);
        }    
    }
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true)) {
        BankValueSetFromFlag(libWoLC_gv_wC_ArchivesBank, "GlobalStates", "CampaignComplete", true);
    }

    if ((libWoLC_gf_WC_CampaignIsComplete() == true) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        BankValueSetFromFlag(libWoLC_gv_wC_ArchivesBank, "GlobalStates", "ArchivesVisited", true);
    }

    BankSave(libWoLC_gv_wC_ArchivesBank);
}

void libWoLC_gf_WC_ArchiveBankLoad () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficultyIndex;
    int lv_archivesBankProgress;

    // Automatic Variable Declarations
    int auto33593E0D_ae;
    int auto33593E0D_ai;
    int autoFF153C1A_ae;
    int autoFF153C1A_ai;
    const int auto5FC905B3_ae = 4;
    const int auto5FC905B3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libWoLC_gf_WC_CampaignIsComplete() == false) || (libWoLC_gv_wC_ArchivesReloading == true))) {
        return ;
    }

    libWoLC_gf_WC_OpenArchiveBank();
    libWoLC_gv_wC_ArchivesVisited = libWoLC_gf_WC_LoadTransitionVarBoolean(libWoLC_gv_wC_ArchivesBank, "GlobalStates", "ArchivesVisited", false);
    auto33593E0D_ae = CatalogEntryCount(c_gameCatalogObjective);
    auto33593E0D_ai = 1;
    while (auto33593E0D_ai <= auto33593E0D_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto33593E0D_ai);
        auto33593E0D_ai = auto33593E0D_ai + 1;
        if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_archivesBankProgress = libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionObjectives"), (lv_indexObjective), 0);
            if ((lv_archivesBankProgress > UserDataGetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1))) {
                UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_archivesBankProgress);
            }

        }

    }
    autoFF153C1A_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFF153C1A_ai = 1;
    while (autoFF153C1A_ai <= autoFF153C1A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFF153C1A_ai);
        autoFF153C1A_ai = autoFF153C1A_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_difficultyIndex = 1;
            for ( ; ( (auto5FC905B3_ai >= 0 && lv_difficultyIndex <= auto5FC905B3_ae) || (auto5FC905B3_ai < 0 && lv_difficultyIndex >= auto5FC905B3_ae) ) ; lv_difficultyIndex += auto5FC905B3_ai ) {
                libWoLC_gf_WC_SetMissionCompletionBestTime(lv_indexMission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex), libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionBestTime"), libWoLC_gf_WC_BankMissionDifficultyKey(lv_indexMission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)), -1));
            }
        }    
    }
}

void libWoLC_gf_WC_ArchiveBankMissionSave (string lp_mission) {
    // Variable Declarations
    int lv_oldTime;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    const int auto1E4EDA69_ae = 4;
    const int auto1E4EDA69_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((libWoLC_gf_CurrentMap() != lp_mission) || (libWoLC_gf_CurrentMissionIsSimulation() == false)) && (libWoLC_gf_MissionStatusCheck(lp_mission, libWoLC_ge_MissionStatus_Completed) == false))) {
        return ;
    }

    lv_difficultyIndex = 1;
    for ( ; ( (auto1E4EDA69_ai >= 0 && lv_difficultyIndex <= auto1E4EDA69_ae) || (auto1E4EDA69_ai < 0 && lv_difficultyIndex >= auto1E4EDA69_ae) ) ; lv_difficultyIndex += auto1E4EDA69_ai ) {
        lv_oldTime = libWoLC_gf_WC_LoadTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionBestTime"), libWoLC_gf_WC_BankMissionDifficultyKey(lp_mission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        if (((lv_oldTime <= 0) || ((libWoLC_gf_MissionCompleteBestTime(lp_mission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)) > 0) && (lv_oldTime > libWoLC_gf_MissionCompleteBestTime(lp_mission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)))))) {
            libWoLC_gf_WC_SaveTransitionVarInteger(libWoLC_gv_wC_ArchivesBank, libWoLC_gf_WC_BankSectionName(null, "MissionBestTime"), libWoLC_gf_WC_BankMissionDifficultyKey(lp_mission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)), libWoLC_gf_MissionCompleteBestTime(lp_mission, libWoLC_gf_WC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        }

    }
}

void libWoLC_gf_WC_ArchivesBankSyncForLoad () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_OpenArchiveBank();
    BankReload(libWoLC_gv_wC_ArchivesBank);
    libWoLC_gv_wC_ArchivesReloading = true;
    TriggerExecute(libWoLC_gt_WC_ArchivesBankLoadSyncComplete, true, false);
}

void libWoLC_gf_WC_ArchivesBankSyncForSave () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_OpenArchiveBank();
    BankReload(libWoLC_gv_wC_ArchivesBank);
    libWoLC_gv_wC_ArchivesReloading = true;
    TriggerExecute(libWoLC_gt_WC_ArchivesBankSaveSyncComplete, true, false);
}

bool libWoLC_gf_WC_ArchivesMasterVisited () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wC_ArchivesVisited;
}

void libWoLC_gf_WC_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_CampaignBank != null)) {
        return ;
    }

    BankLoad(libWoLC_gv_wC_CampaignWoLBankName, 1);
    libWoLC_gv_wC_CampaignBank = BankLastCreated();
}

void libWoLC_gf_WC_OpenCampaignLegacyBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_CampaignBank2 != null)) {
        return ;
    }

    BankLoad(libWoLC_gv_wC_CampaignWoLBankNameLegacy, 1);
    libWoLC_gv_wC_CampaignBank2 = BankLastCreated();
}

bool libWoLC_gf_WC_CampaignBankExists () {
    // Automatic Variable Declarations
    // Implementation
    if ((BankExists(libWoLC_gv_wC_CampaignWoLBankName, 1) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libWoLC_gf_WC_CampaignLegacyBankExists () {
    // Automatic Variable Declarations
    // Implementation
    if ((BankExists(libWoLC_gv_wC_CampaignWoLBankNameLegacy, 1) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libWoLC_gf_WC_SaveCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_CampaignBank == null)) {
        return ;
    }

    BankSave(libWoLC_gv_wC_CampaignBank);
}

void libWoLC_gf_WC_SaveCampaignBank2 () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_CampaignBank2 == null)) {
        return ;
    }

    BankSave(libWoLC_gv_wC_CampaignBank2);
}

bool libWoLC_gf_WC_MissionSectionExists (string lp_mission) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libWoLC_gv_wC_CampaignBank == null)) {
        libWoLC_gf_WC_OpenCampaignBank();
    }

    return libWoLC_gf_WC_LoadTransitionVarBoolean(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", false);
}

void libWoLC_gf_WC_SetMissionSectionExists (string lp_mission, bool lp_exist) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libWoLC_gv_wC_CampaignBank == null)) {
        libWoLC_gf_WC_OpenCampaignBank();
    }

    libWoLC_gf_WC_SaveTransitionVarBoolean(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", lp_exist, false);
}

void libWoLC_gf_WC_LoadMissionSections () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto931DD63A_ae;
    int auto931DD63A_ai;

    // Variable Initialization

    // Implementation
    auto931DD63A_ae = CatalogEntryCount(c_gameCatalogMap);
    auto931DD63A_ai = 1;
    while (auto931DD63A_ai <= auto931DD63A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto931DD63A_ai);
        auto931DD63A_ai = auto931DD63A_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == libWoLC_gf_CurrentMap())) {
                if (((GameIsTransitionMap() == false) || (libWoLC_gv_wCX_IsSimulation == true) || (libWoLC_gv_wCX_IsVictoryPlayAgain == true)) && (libWoLC_gf_WC_MissionSectionExists(lv_indexMission) == true)) {
                    TextExpressionSetToken("Param/Expression/lib_WoLC_A265CE09", "A", StringToText(libWoLC_gf_WC_CampaignMapFile(lv_indexMission)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WoLC_A265CE09"), false);
                    libWoLC_gf_WC_LoadTransitionVars(libWoLC_gv_wC_CampaignBank, lv_indexMission);
                    if ((libWoLC_gf_WC_CampaignIsComplete() == false)) {
                        libWoLC_gf_WC_ClampProgressToMission(lv_indexMission);
                    }

                }
                else {
                    if ((libWoLC_gf_WC_MissionSectionExists(lv_indexMission) == true)) {
                        libWoLC_gf_WC_SaveArmyTechBank(libWoLC_gf_CurrentMap(), libWoLC_gv_wCX_IsSimulation);
                        BankSave(libWoLC_gv_wC_ArmyTechBank);
                    }
                    else {
                        if ((libWoLC_gv_wCX_IsSimulation == true)) {
                            libWoLC_gf_WC_ClampProgressToMission(lv_indexMission);
                        }

                    }
                    libWoLC_gf_WC_SaveTransitionVars(libWoLC_gv_wC_CampaignBank, lv_indexMission, false, false, false, false, false);
                }
            }

        }    
    }
}

void libWoLC_gf_WC_ClampProgressToMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexPerk;
    string lv_possibleAltPerk;
    string lv_indexPerkGroup;
    int lv_completedAge;

    // Automatic Variable Declarations
    string auto4E1C7AD5_val;
    int auto25F254A2_ae;
    int auto25F254A2_ai;

    // Variable Initialization

    // Implementation
    auto4E1C7AD5_val = lp_mission;
    if (auto4E1C7AD5_val == "THanson03A") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("THanson03A", "THanson03B", libWoLC_ge_MissionStatus_Completed);
    }
    else if (auto4E1C7AD5_val == "THanson03B") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("THanson03A", "THanson03B", libWoLC_ge_MissionStatus_Completed);
    }
    else if (auto4E1C7AD5_val == "TTosh03A") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("TTosh03A", "TTosh03B", libWoLC_ge_MissionStatus_Completed);
    }
    else if (auto4E1C7AD5_val == "TTosh03B") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("TTosh03A", "TTosh03B", libWoLC_ge_MissionStatus_Completed);
    }
    else if (auto4E1C7AD5_val == "TValerian02A") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("TValerian02A", "TValerian02B", libWoLC_ge_MissionStatus_Completed);
    }
    else if (auto4E1C7AD5_val == "TValerian02B") {
        lv_completedAge = libWoLC_gf_SplitMissionStatusAge("TValerian02A", "TValerian02B", libWoLC_ge_MissionStatus_Completed);
    }
    else {
        lv_completedAge = libWoLC_gf_MissionStatusAge(lp_mission, libWoLC_ge_MissionStatus_Completed);
    }
    auto25F254A2_ae = CatalogEntryCount(c_gameCatalogMap);
    auto25F254A2_ai = 1;
    while (auto25F254A2_ai <= auto25F254A2_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto25F254A2_ai);
        auto25F254A2_ai = auto25F254A2_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Available) == true)) {
                libWoLC_gf_WC_MarkMissionAsStatus(lv_indexMission, libWoLC_ge_MissionStatus_Locked);
            }
            else if ((libWoLC_gf_MissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Completed) < lv_completedAge)) {
                libWoLC_gf_WC_MarkMissionAsStatus(lv_indexMission, libWoLC_ge_MissionStatus_Locked);
            }
            else if ((lv_indexMission != lp_mission)) {
                libWoLC_gf_WC_SetMissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Completed, (libWoLC_gf_MissionStatusAge(lv_indexMission, libWoLC_ge_MissionStatus_Completed)-lv_completedAge));
            }
        }    
    }
    libWoLC_gf_WC_MarkMissionAsStatus(lp_mission, libWoLC_ge_MissionStatus_Available);
    libWoLC_gf_WC_UpdateCompletedMissionArray();
    libWoLC_gf_WC_UpdateTechStates(1);
    libWoLC_gf_WC_ApplyTech(1);
}

void libWoLC_gf_WC_OpenStoryBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_StoryBank != null)) {
        return ;
    }

    BankLoad(libWoLC_gv_wC_StoryBankName, 1);
    libWoLC_gv_wC_StoryBank = BankLastCreated();
}

void libWoLC_gf_WC_CopyWriterStatesToSnapshot () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_OpenStoryBank();
    BankSave(libWoLC_gf_StoryBank());
}

bank libWoLC_gf_StoryBank () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_OpenStoryBank();
    return libWoLC_gv_wC_StoryBank;
}

string libWoLC_gf_WC_BankMissionDifficultyKey (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gf_WC_StoryMapBankID(lp_mission) + "-" + IntToString(libWoLC_gf_WC_DifficultyIndex(lp_difficulty)));
}

string libWoLC_gf_WC_BankSectionName (string lp_map, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return ("WCampaign" + "|" + (lp_section));
    }

    return (libWoLC_gf_WC_StoryMapBankID(lp_map) + "|" + (lp_section));
}

string libWoLC_gf_WC_BankSectionName2 (string lp_userType) {
    // Automatic Variable Declarations
    // Implementation
    return ("WCampaign|UserType|" + (lp_userType));
}

int libWoLC_gf_WC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libWoLC_gf_WC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libWoLC_gf_WC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libWoLC_gf_WC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libWoLC_gf_WC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libWoLC_gf_WC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libWoLC_gf_StorySetSimulationMission (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_pS_StorySimulationMission != null)) {
        libWoLC_gf_StorySimulationEnd();
    }

    BankLoad(libWoLC_gv_wC_StoryBankName2, 1);
    libWoLC_gv_pS_StorySimulationOriginalBank = BankLastCreated();
    libWoLC_gv_pS_StorySimulationMission = lp_mission;
    libWoLC_gf_WC_SaveMapToBank(null, libWoLC_gv_pS_StorySimulationOriginalBank, false);
    libWoLC_gf_WC_SaveTransitionVarString(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "CampaignLastInfo"), ("Location"), libWoLC_gf_WC_StoryMapBankID2(libWoLC_gv_wCX_CurrentLocation), "");
    libWoLC_gf_WC_SaveArmyCategoryToBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyCategory"));
    libWoLC_gf_WC_SaveArmyUpgradesToBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyUpgrade"));
    libWoLC_gf_WC_SaveArmyUnitsToBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyUnit"));
    libWoLC_gf_WC_SavePerksToBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "Perks"));
    libWoLC_gf_WC_SaveMercenaryToBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "Mercenary"));
    libWoLC_gf_WC_OpenCampaignBank();
    if ((libWoLC_gf_WC_MissionSectionExists(lp_mission) == true)) {
        if ((libWoLC_gf_WC_CampaignIsComplete() == false)) {
            libWoLC_gf_WC_LoadMapFromBank(lp_mission, libWoLC_gv_wC_CampaignBank);
        }

        libWoLC_gf_WC_LoadArmyUnitsFromBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "ArmyUnit"));
        libWoLC_gf_WC_LoadArmyUpgradesFromBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "ArmyUpgrade"));
        libWoLC_gf_WC_LoadPerksFromBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "Perks"));
        libWoLC_gf_WC_LoadMercenaryFromBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(lp_mission, "Mercenary"));
    }

    if ((libWoLC_gf_WC_CampaignIsComplete() == true)) {
        libWoLC_gf_WC_UpdateSimulationMissionAges(lp_mission);
    }
    else {
        libWoLC_gf_WC_ClampProgressToMission(lp_mission);
    }
}

void libWoLC_gf_StorySimulationEnd () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_SetMissionSectionExists(libWoLC_gv_pS_StorySimulationMission, true);
    libWoLC_gf_WC_SaveArmyUpgradesToBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(libWoLC_gv_pS_StorySimulationMission, "ArmyUpgrade"));
    libWoLC_gf_WC_SaveArmyUnitsToBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(libWoLC_gv_pS_StorySimulationMission, "ArmyUnit"));
    libWoLC_gf_WC_SavePerksToBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(libWoLC_gv_pS_StorySimulationMission, "Perks"));
    libWoLC_gf_WC_SaveMercenaryToBank(libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName(libWoLC_gv_pS_StorySimulationMission, "Mercenary"));
    libWoLC_gv_pS_StorySimulationMission = null;
    libWoLC_gf_WC_LoadMapFromBank(null, libWoLC_gv_pS_StorySimulationOriginalBank);
    libWoLC_gf_WC_SetLocationActive((libWoLC_gf_WC_LoadTransitionVarString(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "CampaignLastInfo"), ("Location"), "")));
    libWoLC_gf_WC_LoadArmyCategoryFromBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyCategory"));
    libWoLC_gf_WC_LoadArmyUnitsFromBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyUnit"));
    libWoLC_gf_WC_LoadArmyUpgradesFromBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "ArmyUpgrade"));
    libWoLC_gf_WC_LoadPerksFromBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "Perks"));
    libWoLC_gf_WC_LoadMercenaryFromBank(libWoLC_gv_pS_StorySimulationOriginalBank, libWoLC_gf_WC_BankSectionName(null, "Mercenary"));
    libWoLC_gf_UpdateMissionFlow();
    libWoLC_gf_WC_UpdateTechStates(1);
    libWoLC_gf_WC_ApplyTech(1);
    BankRemove(libWoLC_gv_pS_StorySimulationOriginalBank);
}

bool libWoLC_gf_StoryInSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libWoLC_gv_pS_StorySimulationMission != null);
}

string libWoLC_gf_WC_StorySimulationMission () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_pS_StorySimulationMission;
}

bool libWoLC_gf_StoryState (string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("StoryStates", lp_state, "Value", 1) > 0);
}

int libWoLC_gf_StoryStateInteger (string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("StoryStates", lp_state, "Value", 1);
}

void libWoLC_gf_SetStoryStateInteger (string lp_state, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("StoryStates", lp_state, "Value", 1, lp_value);
}

void libWoLC_gf_SetStoryStateBoolean (string lp_state, bool lp_value) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("StoryStates", lp_state, "Value", 1, BoolToInt(lp_value));
}

void libWoLC_gf_RegisterPersistentUserType (string lp_userType) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_PersistentUserTypes[libWoLC_gv_wC_PersistentUserTypeCount] = lp_userType;
    libWoLC_gv_wC_PersistentUserTypeCount += 1;
    UserDataLoadType(lp_userType, libWoLC_gv_wC_CampaignBank, libWoLC_gf_WC_BankSectionName2(lp_userType));
}

text libWoLC_gf_WC_FormatReward (int lp_value, string lp_type) {
    // Automatic Variable Declarations
    string auto757A6891_val;

    // Implementation
    auto757A6891_val = lp_type;
    if (auto757A6891_val == "Credits") {
        TextExpressionSetToken("Param/Expression/lib_WoLC_37BF7BAE", "A", FormatNumber(lp_value));
        return TextExpressionAssemble("Param/Expression/lib_WoLC_37BF7BAE");
    }
    else if (auto757A6891_val == "ProtossResearch") {
        TextExpressionSetToken("Param/Expression/lib_WoLC_4532F180", "A", IntToText(lp_value));
        return TextExpressionAssemble("Param/Expression/lib_WoLC_4532F180");
    }
    else if (auto757A6891_val == "ZergResearch") {
        TextExpressionSetToken("Param/Expression/lib_WoLC_6DA02ADC", "A", IntToText(lp_value));
        return TextExpressionAssemble("Param/Expression/lib_WoLC_6DA02ADC");
    }
    else {
    }
    return null;
}

int libWoLC_gf_WC_MathSaturatingSub (int lp_a, int lp_b) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_a > lp_b)) {
        return (lp_a - lp_b);
    }
    else {
        return 0;
    }
}

int libWoLC_gf_WC_StatEventLast () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gv_wC_StatEventLastCampaign;
}

void libWoLC_gf_WC_StatEventCreate (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(13, StringToText(lp_name), false);
}

void libWoLC_gf_WC_StatEventAddStr (string lp_key, string lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_7C661C09", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_WoLC_7C661C09", "B", StringToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_WoLC_7C661C09"), false);
}

void libWoLC_gf_WC_StatEventAddInt (string lp_key, int lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_BBF0E9B7", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_WoLC_BBF0E9B7", "B", IntToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_WoLC_BBF0E9B7"), false);
}

void libWoLC_gf_WC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_WoLC_AD1ED9A3", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_WoLC_AD1ED9A3", "B", FixedToText(lp_value, c_fixedPrecisionAny));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_WoLC_AD1ED9A3"), false);
}

void libWoLC_gf_WC_StatEventDone (int lp_statEvent) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(13, StringToText(""), false);
    if ((lp_statEvent == libWoLC_gv_wC_StatEventLastCampaign)) {
        libWoLC_gv_wC_StatEventLastCampaign = -1;
    }

}

void libWoLC_gf_WC_StatRecordMapStart () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_StatEventCreate("MapStart");
    libWoLC_gf_WC_StatEventAddStr("ID", (libWoLC_gf_CurrentMap()), libWoLC_gf_WC_StatEventLast());
    if ((libWoLC_gf_LastSuccessfulMission() == null)) {
        libWoLC_gf_WC_StatEventAddStr("LastMission", "None", libWoLC_gf_WC_StatEventLast());
    }
    else {
        libWoLC_gf_WC_StatEventAddStr("LastMission", (libWoLC_gf_LastSuccessfulMission()), libWoLC_gf_WC_StatEventLast());
    }
    libWoLC_gf_WC_StatEventAddInt("MissionCount", libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("Version", libWoLC_gv_wCC_DataVersion, libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
}

void libWoLC_gf_WC_StatRecordMiscAbilities () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_StatRecordMiscAbilitySingle(AbilityCommandGetAbility(AbilityCommand("Stimpack", 0)));
    libWoLC_gf_WC_StatRecordMiscAbilitySingle(AbilityCommandGetAbility(AbilityCommand("TimeWarp", 0)));
}

void libWoLC_gf_WC_StatRecordMiscAbilitySingle (string lp_ability) {
    // Variable Declarations
    string lv_abilityID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = "";

    // Implementation
    lv_abilityID = (lp_ability);
    libWoLC_gf_WC_StatEventCreate("AbilityStats");
    libWoLC_gf_WC_StatEventAddStr("AbilityID", lv_abilityID, libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("TimesUsed", DataTableGetInt(true, ("AbilUsed_" + lv_abilityID)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("DamageDone", DataTableGetInt(true, ("DmgDone_" + lv_abilityID)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
}

void libWoLC_gf_WC_StatRecordMiscUnits () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_StatRecordMiscUnitSingle("Gateway");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("Pylon");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("Forge");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("CyberneticsCore");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("Stargate");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("RoboticsFacility");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("DarkShrine");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("FleetBeacon");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("RoboticsBay");
    libWoLC_gf_WC_StatRecordMiscUnitSingle("TemplarArchive");
}

void libWoLC_gf_WC_StatRecordMiscUnitSingle (string lp_unit) {
    // Variable Declarations
    string lv_unitID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitID = "";

    // Implementation
    lv_unitID = (lp_unit);
    libWoLC_gf_WC_StatEventCreate("UnitStats");
    libWoLC_gf_WC_StatEventAddStr("UnitID", lv_unitID, libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("UnitsMade", DataTableGetInt(true, ("UnitMade_" + lv_unitID)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("UnitsLost", DataTableGetInt(true, ("UnitDied_" + lv_unitID)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
}

void libWoLC_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    libWoLC_gv_wC_TimeAIPaused = lp_pauseUnpause;
}

void libWoLC_gf_WC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    libWoLC_gv_wC_TimeAIOverrideCount += 1;
    lv_originalPauseState = libWoLC_gv_wC_TimeAIPaused;
    libWoLC_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libWoLC_gv_wC_TimeAIPaused = lv_originalPauseState;
}

void libWoLC_gf_WC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gv_wC_TimeAIOverrideCount -= 1;
    if ((libWoLC_gv_wC_TimeAIOverrideCount <= 0)) {
        libWoLC_gf_PauseAITimeCampaign(libWoLC_gv_wC_TimeAIPaused);
    }

}

void libWoLC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libWoLC_gv_wC_TimeMissionPaused = lp_pauseUnpause;
}

void libWoLC_gf_WC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libWoLC_gv_wC_TimeMissionPaused;
    libWoLC_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libWoLC_gv_wC_TimeMissionPaused = lv_originalPauseState;
}

void libWoLC_gf_WC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_PauseMissionTimeCampaign(libWoLC_gv_wC_TimeMissionPaused);
}

void libWoLC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv_wC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libWoLC_gv_wC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libWoLC_gv_wC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libWoLC_gv_wC_WorldCoverDlg, PlayerGroupAll(), lp_showHide);
}

void libWoLC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libWoLC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libWoLC_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libWoLC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libWoLC_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libWoLC_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libWoLC_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libWoLC_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libWoLC_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libWoLC_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libWoLC_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libWoLC_gf_CinematicFade4_Trigger = null;
bool auto_libWoLC_gf_CinematicFade4_lp_fadeIn;
fixed auto_libWoLC_gf_CinematicFade4_lp_duration;
color auto_libWoLC_gf_CinematicFade4_lp_color;

void libWoLC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libWoLC_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libWoLC_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libWoLC_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libWoLC_gf_CinematicFade4_Trigger == null) {
        auto_libWoLC_gf_CinematicFade4_Trigger = TriggerCreate("auto_libWoLC_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libWoLC_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libWoLC_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libWoLC_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libWoLC_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libWoLC_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libWoLC_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libWoLC_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libWoLC_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libWoLC_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

actor libWoLC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    return libNtve_gf_AttachModelToUnitInheritVisibility(lp_unit, lp_model, lp_attachPoint);
}

void libWoLC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void libWoLC_gf_WC_ClearAnimationFromActor (string lp_identifier, actor lp_actor, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(lp_actor, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

string libWoLC_gf_WC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

string libWoLC_gf_WC_GetDataIDFromUIID (int lp_type, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libWoLC_gf_WC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    return DataTableGetString(true, lv_name);
}

int libWoLC_gf_WC_GetUIIDFromDataID (int lp_type, string lp_dataID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libWoLC_gf_WC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    return DataTableGetInt(true, lv_name);
}

void libWoLC_gf_WC_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libWoLC_gf_WC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    DataTableSetInt(true, lv_name, lp_uIItemID);
    lv_name = libWoLC_gf_WC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    DataTableSetString(true, lv_name, lp_dataID);
}

string libWoLC_gf_WC_StoryDataTableName (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("SS_" + IntToString((lp_type)) + libWoLC_gv_wC_GameUIDataTableConnector + lp_name);
}

string libWoLC_gf_WC_ClickableConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string auto14CACF2E_val;

    // Implementation
    auto14CACF2E_val = lp_characterInstance;
    if (auto14CACF2E_val == "Kerrigan") {
        return "char_Kerrigan";
    }
    else if (auto14CACF2E_val == "Artanis") {
        return "char_Artanis";
    }
    else if (auto14CACF2E_val == "DTLeader") {
        return "char_DTLeader";
    }
    else if (auto14CACF2E_val == "Preserver") {
        return "char_Preserver";
    }
    else if (auto14CACF2E_val == "ProtossAI") {
        return "char_ProtossAI";
    }
    else if (auto14CACF2E_val == "Smith") {
        return "char_Smith";
    }
    else if (auto14CACF2E_val == "TaldarimHero") {
        return "char_TaldarimHero";
    }
    else if (auto14CACF2E_val == "Zeratul") {
        return "char_Zeratul";
    }
    else if (auto14CACF2E_val == "Selendis") {
        return "char_SelendisVoid";
    }
    else if (auto14CACF2E_val == "Raynor") {
        return "char_Raynor";
    }
    else {
    }
    return "char_TerranAdjutant";
}

text libWoLC_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_WoLC_A4F1A203"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_WoLC_4E67BE7A"), lp_second);
    }
}

string libWoLC_gf_WC_ChampResAbility (string lp_champion) {
    // Variable Declarations
    string lv_indexChampion;

    // Automatic Variable Declarations
    string auto1EC13B9D_val;

    // Variable Initialization

    // Implementation
    auto1EC13B9D_val = lp_champion;
    if (auto1EC13B9D_val == "Alarak") {
        return "Abil/ChampionWarpTrain4";
    }
    else if (auto1EC13B9D_val == "Mohandar") {
        return "Abil/ChampionWarpTrain2";
    }
    else if (auto1EC13B9D_val == "Fenix") {
        return "Abil/ChampionWarpTrain1";
    }
    else if (auto1EC13B9D_val == "Karax") {
        return "Abil/ChampionWarpTrain6";
    }
    else if (auto1EC13B9D_val == "Artanis") {
        return "Abil/ChampionWarpTrain7";
    }
    else if (auto1EC13B9D_val == "Mohandar") {
        return "Abil/ChampionWarpTrain8";
    }
    else {
    }
    return "";
}

void libWoLC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto2970F052_val;

    // Implementation
    auto2970F052_val = lp_mode;
    if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Game) {
        libWoLC_gv_wC_VolumeChannelModeInSpeech = false;
        if ((libWoLC_gv_wC_VolumeChannelModeInLowHP == true)) {
            libWoLC_gf_SetAllSoundChannelVolumesCampaign(libWoLC_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libWoLC_gv_wC_VolumeChannelModeInLowHP = true;
        if ((libWoLC_gv_wC_VolumeChannelModeInSpeech == true)) {
            libWoLC_gf_SetAllSoundChannelVolumesCampaign(libWoLC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libWoLC_gv_wC_VolumeChannelModeInLowHP = false;
        if ((libWoLC_gv_wC_VolumeChannelModeInSpeech == true)) {
            libWoLC_gf_SetAllSoundChannelVolumesCampaign(libWoLC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Speech) {
        libWoLC_gv_wC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_Victory) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 1.0);
    }
    else if (auto2970F052_val == libWoLC_ge_VolumeChannelModeCampaign_VictoryInstant) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.0);
    }
    else {
    }
}

void libWoLC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libWoLC_gf_WC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

void libWoLC_gf_WC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Debug Cheat
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_DebugCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_DebugCheat_Init () {
    libWoLC_gt_DebugCheat = TriggerCreate("libWoLC_gt_DebugCheat_Func");
    TriggerAddEventChatMessage(libWoLC_gt_DebugCheat, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FootageRecording
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_ZS_FootageRecording_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gv_zS_FootageRecordingCallback != null)) {
        libWoLC_gf_ZS_FootageRecording();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_WoLC_1AEBEC50"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_ZS_FootageRecording_Init () {
    libWoLC_gt_ZS_FootageRecording = TriggerCreate("libWoLC_gt_ZS_FootageRecording_Func");
    TriggerAddEventChatMessage(libWoLC_gt_ZS_FootageRecording, 1, "INTRO", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_DisplayTimestamp
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_DisplayTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "Title", 1);
    Wait(UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("UI_Void_TextCallout", -1));
    Wait(UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_DisplayTimestamp_Init () {
    libWoLC_gt_WC_DisplayTimestamp = TriggerCreate("libWoLC_gt_WC_DisplayTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_DisplayTimestampSkippable
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_DisplayTimestampSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "Title", 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("Timestamps", libWoLC_gv_wC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_DisplayTimestampSkippable_Init () {
    libWoLC_gt_WC_DisplayTimestampSkippable = TriggerCreate("libWoLC_gt_WC_DisplayTimestampSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_WaitForDialogCutscene
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_WaitForDialogCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gv_wC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libWoLC_gt_WC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libWoLC_gv_wC_CurrentCampaignCutscene);
    libWoLC_gf_WC_StatEventAddInt("Completed", 1, libWoLC_gv_wC_SceneStatEvent);
    DialogDestroy(libWoLC_gv_wC_CampaignCutsceneDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_WaitForDialogCutscene_Init () {
    libWoLC_gt_WC_WaitForDialogCutscene = TriggerCreate("libWoLC_gt_WC_WaitForDialogCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_WaitForCutscene
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_WaitForCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gv_wC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libWoLC_gt_WC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libWoLC_gv_wC_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_WaitForCutscene_Init () {
    libWoLC_gt_WC_WaitForCutscene = TriggerCreate("libWoLC_gt_WC_WaitForCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_CampaignCutsceneEnded
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_CampaignCutsceneEnded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libWoLC_gt_WC_CampaignCutsceneEnded, false);
    libWoLC_gf_WC_StatEventAddInt("Completed", 0, libWoLC_gv_wC_SceneStatEvent);
    CutsceneStop(libWoLC_gv_wC_CurrentCampaignCutscene);
    DialogDestroy(libWoLC_gv_wC_CampaignCutsceneDialog);
    TriggerStop(libWoLC_gt_WC_WaitForCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_CampaignCutsceneEnded_Init () {
    libWoLC_gt_WC_CampaignCutsceneEnded = TriggerCreate("libWoLC_gt_WC_CampaignCutsceneEnded_Func");
    TriggerEnable(libWoLC_gt_WC_CampaignCutsceneEnded, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_PlaySceneSkippable
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_PlaySceneSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_StorySceneMovie(libWoLC_gv_wC_PlaySceneCurrentScene) != null)) {
        lv_movieSource = TransmissionSourceFromMovie(libWoLC_gf_StorySceneMovie(libWoLC_gv_wC_PlaySceneCurrentScene), true);
        TriggerExecute(libWoLC_gt_WC_CinematicDetectSkipping, true, false);
        TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
        TransmissionSourceSetPauseAllowed(lv_movieSource, true);
        TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, true);
        TriggerStop(libWoLC_gt_WC_CinematicDetectSkipping);
        TriggerStop(libWoLC_gt_WC_SceneSkipped);
        libWoLC_gf_WC_StatEventAddInt("Completed", 1, libWoLC_gv_wC_SceneStatEvent);
    }
    else {
        TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
        while (true) {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_PlaySceneSkippable_Init () {
    libWoLC_gt_WC_PlaySceneSkippable = TriggerCreate("libWoLC_gt_WC_PlaySceneSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_CinematicDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_CinematicDetectSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libWoLC_gt_WC_SceneSkipped, true, false);
    while (true) {
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_CinematicDetectSkipping_Init () {
    libWoLC_gt_WC_CinematicDetectSkipping = TriggerCreate("libWoLC_gt_WC_CinematicDetectSkipping_Func");
    TriggerEnable(libWoLC_gt_WC_CinematicDetectSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_SceneSkipped
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_SceneSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_WC_FadeAllSoundsExceptMusic(0.8, false);
    libWoLC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    libWoLC_gf_WC_StatEventAddInt("Completed", 0, libWoLC_gv_wC_SceneStatEvent);
    TriggerStop(libWoLC_gt_WC_PlaySceneSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_SceneSkipped_Init () {
    libWoLC_gt_WC_SceneSkipped = TriggerCreate("libWoLC_gt_WC_SceneSkipped_Func");
    TriggerEnable(libWoLC_gt_WC_SceneSkipped, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_TrackLoadingComplete
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_TrackLoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libWoLC_gv_wC_LoadingComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_TrackLoadingComplete_Init () {
    libWoLC_gt_WC_TrackLoadingComplete = TriggerCreate("libWoLC_gt_WC_TrackLoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_TrackLoadingFromSave
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_TrackLoadingFromSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gv_wC_LoadingComplete2 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_TrackLoadingFromSave_Init () {
    libWoLC_gt_WC_TrackLoadingFromSave = TriggerCreate("libWoLC_gt_WC_TrackLoadingFromSave_Func");
    TriggerAddEventLoadGameDone(libWoLC_gt_WC_TrackLoadingFromSave);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_ArchivesBankLoadSyncComplete
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_ArchivesBankLoadSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libWoLC_gv_wC_ArchivesBank);
    libWoLC_gv_wC_ArchivesReloading = false;
    libWoLC_gf_WC_ArchiveBankLoad();
    libWoLC_gf_DispatchCampaignEvent(libWoLC_ge_WC_Event_CampaignArchivesSynced, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_ArchivesBankLoadSyncComplete_Init () {
    libWoLC_gt_WC_ArchivesBankLoadSyncComplete = TriggerCreate("libWoLC_gt_WC_ArchivesBankLoadSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_ArchivesBankSaveSyncComplete
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_ArchivesBankSaveSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libWoLC_gv_wC_ArchivesBank);
    libWoLC_gv_wC_ArchivesReloading = false;
    libWoLC_gf_WC_ArchiveBankSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_ArchivesBankSaveSyncComplete_Init () {
    libWoLC_gt_WC_ArchivesBankSaveSyncComplete = TriggerCreate("libWoLC_gt_WC_ArchivesBankSaveSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_ArchivesHandleMissionLoad
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_ArchivesHandleMissionLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gv_wC_InLoadedMission = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_ArchivesHandleMissionLoad_Init () {
    libWoLC_gt_WC_ArchivesHandleMissionLoad = TriggerCreate("libWoLC_gt_WC_ArchivesHandleMissionLoad_Func");
    TriggerAddEventLoadGameDone(libWoLC_gt_WC_ArchivesHandleMissionLoad);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_StatUnitCreated
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_StatUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_iD;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) != "Larva"))) {
            return false;
        }

        if (!(((EventUnitCreatedAbil() != null) || (EventUnitCreatedBehavior() != null)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = libWoLC_gf_WC_ArmyStringFromUnitType(UnitGetType(EventUnitCreatedUnit()));
    if ((lv_iD == null)) {
        if ((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            lv_iD = (UnitGetType(EventUnitCreatedUnit()));
        }
        else {
            return true;
        }
    }

    lv_previousValue = DataTableGetInt(true, ("UnitMade_" + lv_iD));
    lv_previousValue += 1;
    DataTableSetInt(true, ("UnitMade_" + lv_iD), lv_previousValue);
    lv_previousValue = DataTableGetInt(true, ("MinSpent_" + lv_iD));
    DataTableSetInt(true, ("MinSpent_" + lv_iD), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnitCreatedUnit()), c_unitCostMinerals)));
    lv_previousValue = DataTableGetInt(true, ("VesSpent_" + lv_iD));
    DataTableSetInt(true, ("VesSpent_" + lv_iD), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnitCreatedUnit()), c_unitCostVespene)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_StatUnitCreated_Init () {
    libWoLC_gt_WC_StatUnitCreated = TriggerCreate("libWoLC_gt_WC_StatUnitCreated_Func");
    TriggerEnable(libWoLC_gt_WC_StatUnitCreated, false);
    TriggerAddEventUnitCreated(libWoLC_gt_WC_StatUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_StatDamageTaken
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_StatDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringArmyString;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;
    string lv_indexPerk;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringArmyString = "";

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libWCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 1)) {
        lv_triggeringArmyString = libWoLC_gf_WC_ArmyStringFromUnitType(UnitGetType(EventUnit()));
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("DmgTaken_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("DmgTaken_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(EventUnitDamageAmount())));
            return true;
        }

    }
    else if ((EventUnitDamageSourcePlayer() == 1)) {
        lv_triggeringArmyString = libWoLC_gf_WC_ArmyStringFromUnitType(UnitGetType(EventUnitDamageSourceUnit()));
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("DmgDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("DmgDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(EventUnitDamageAmount())));
            lv_mineralValue = (EventUnitDamageAmount()*UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals)/UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent));
            lv_previousValue = DataTableGetInt(true, ("MinDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("MinDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(lv_mineralValue)));
            lv_vespeneValue = (EventUnitDamageAmount()*UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)/UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent));
            lv_previousValue = DataTableGetInt(true, ("VesDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("VesDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(lv_vespeneValue)));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_StatDamageTaken_Init () {
    libWoLC_gt_WC_StatDamageTaken = TriggerCreate("libWoLC_gt_WC_StatDamageTaken_Func");
    TriggerEnable(libWoLC_gt_WC_StatDamageTaken, false);
    TriggerAddEventUnitDamaged(libWoLC_gt_WC_StatDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_StatDamageHealed
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_StatDamageHealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_previousValue;
    string lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Conditions
    if (testConds) {
        if (!((EventUnitHealLaunchPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = ("UnitHeal_" + libWoLC_gf_WC_ArmyStringFromUnitType(UnitGetType(EventUnitHealLaunchUnit())));
    if ((lv_iD != null)) {
        lv_previousValue = DataTableGetInt(true, lv_iD);
        DataTableSetInt(true, lv_iD, (lv_previousValue+FixedToInt(EventUnitHealAmount())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_StatDamageHealed_Init () {
    libWoLC_gt_WC_StatDamageHealed = TriggerCreate("libWoLC_gt_WC_StatDamageHealed_Func");
    TriggerEnable(libWoLC_gt_WC_StatDamageHealed, false);
    TriggerAddEventUnitHealed(libWoLC_gt_WC_StatDamageHealed, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_StatUnitDies
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_StatUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringArmyString;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringArmyString = "";

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libWCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1)) {
        lv_triggeringArmyString = libWoLC_gf_WC_ArmyStringFromUnitType(UnitGetType(EventUnit()));
        if ((lv_triggeringArmyString == null) && (UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            lv_triggeringArmyString = (UnitGetType(EventUnit()));
        }
        else {
            return true;
        }
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("UnitDied_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("UnitDied_" + lv_triggeringArmyString), (lv_previousValue+1));
            lv_previousValue = DataTableGetInt(true, ("MinLost_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("MinLost_" + lv_triggeringArmyString), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals)));
            lv_previousValue = DataTableGetInt(true, ("VesLost_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("VesLost_" + lv_triggeringArmyString), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_StatUnitDies_Init () {
    libWoLC_gt_WC_StatUnitDies = TriggerCreate("libWoLC_gt_WC_StatUnitDies_Func");
    TriggerEnable(libWoLC_gt_WC_StatUnitDies, false);
    TriggerAddEventUnitDied(libWoLC_gt_WC_StatUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WC_StatAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libWoLC_gt_WC_StatAbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitAbility() == AbilityCommand("Blink", 0)) || (EventUnitAbility() == AbilityCommand("TimeWarp", 0)))) {
        DataTableSetInt(true, ("AbilUsed_" + (AbilityCommandGetAbility(EventUnitAbility()))), (DataTableGetInt(true, ("AbilUsed_" + (AbilityCommandGetAbility(EventUnitAbility()))))+1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWoLC_gt_WC_StatAbilityUsed_Init () {
    libWoLC_gt_WC_StatAbilityUsed = TriggerCreate("libWoLC_gt_WC_StatAbilityUsed_Func");
    TriggerEnable(libWoLC_gt_WC_StatAbilityUsed, false);
    TriggerAddEventUnitAbility(libWoLC_gt_WC_StatAbilityUsed, null, null, c_unitAbilStageComplete, false);
}

void libWoLC_InitTriggers () {
    libWoLC_gt_DebugCheat_Init();
    libWoLC_gt_ZS_FootageRecording_Init();
    libWoLC_gt_WC_DisplayTimestamp_Init();
    libWoLC_gt_WC_DisplayTimestampSkippable_Init();
    libWoLC_gt_WC_WaitForDialogCutscene_Init();
    libWoLC_gt_WC_WaitForCutscene_Init();
    libWoLC_gt_WC_CampaignCutsceneEnded_Init();
    libWoLC_gt_WC_PlaySceneSkippable_Init();
    libWoLC_gt_WC_CinematicDetectSkipping_Init();
    libWoLC_gt_WC_SceneSkipped_Init();
    libWoLC_gt_WC_TrackLoadingComplete_Init();
    libWoLC_gt_WC_TrackLoadingFromSave_Init();
    libWoLC_gt_WC_ArchivesBankLoadSyncComplete_Init();
    libWoLC_gt_WC_ArchivesBankSaveSyncComplete_Init();
    libWoLC_gt_WC_ArchivesHandleMissionLoad_Init();
    libWoLC_gt_WC_StatUnitCreated_Init();
    libWoLC_gt_WC_StatDamageTaken_Init();
    libWoLC_gt_WC_StatDamageHealed_Init();
    libWoLC_gt_WC_StatUnitDies_Init();
    libWoLC_gt_WC_StatAbilityUsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libWoLC_InitLib_completed = false;

void libWoLC_InitLib () {
    if (libWoLC_InitLib_completed) {
        return;
    }

    libWoLC_InitLib_completed = true;

    libWoLC_InitLibraries();
    libWoLC_InitVariables();
    libWoLC_InitTriggers();
}

include "LibCamp"
include "LibWCMI"

