include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibWoLC_h"
include "LibWCUI_h"

include "LibWCMI_h"

//--------------------------------------------------------------------------------------------------
// Library: Mission (WoL)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libWCMI_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libHots_InitVariables();
    libWoLC_InitVariables();
    libWCUI_InitVariables();
}

// Variable Initialization
bool libWCMI_InitVariables_completed = false;

void libWCMI_InitVariables () {
    int init_i;

    if (libWCMI_InitVariables_completed) {
        return;
    }

    libWCMI_InitVariables_completed = true;

    libWCMI_gv_wM_ScreenMode = c_uiModeConsole;
    libWCMI_gv_fenixChargeEnergyCost = libNtve_gf_CostOfAbility("FenixCharge", "Energy");
    libWCMI_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("PsiStrikeBlink", "Energy");
    libWCMI_gv_kerriganAstralShiftEnergyCost = libNtve_gf_CostOfAbility("KerriganEpilogue03LineDashAttack", "Energy");
    libWCMI_gv_wM_GameCheat_DialogWidth = 300;
    libWCMI_gv_wM_GameCheat_DialogHeight = 400;
    libWCMI_gv_wM_GameCheat_Dialog = c_invalidDialogId;
    libWCMI_gv_wM_GameCheat_Minimize = c_invalidDialogControlId;
    libWCMI_gv_wM_GameCheat_OpenMissionCheat = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 25; init_i += 1) {
        libWCMI_gv_wM_GameCheat_CheckBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libWCMI_gv_pMC_MissionCheat_MaxCheats; init_i += 1) {
        libWCMI_gv_wM_MissionCheat_Cheats[init_i].lv_titleString = "";
        libWCMI_gv_wM_MissionCheat_Cheats[init_i].lv_buttonDialog = c_invalidDialogControlId;
        libWCMI_gv_wM_MissionCheat_Cheats[init_i].lv_editBoxDialog = c_invalidDialogControlId;
    }
    libWCMI_gv_wM_MissionCheat_Dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libWCMI_gv_pMC_MissionCheat_PanelCountMAX; init_i += 1) {
        libWCMI_gv_wM_MissionCheat_Panel[init_i] = c_invalidDialogControlId;
    }
    libWCMI_gv_wM_MissionCheat_CloseButton = c_invalidDialogControlId;
    libWCMI_gv_wM_PlanetPortrait = c_invalidPortraitId;
    libWCMI_gv_wM_NeedPylonEnabled = true;
    libWCMI_gv_wM_NeedPylonFoodRequired = 1;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libWCMI_gv_wM_MissionTipType[init_i] = libNtve_ge_TipType_NormalTip;
    }
    libWCMI_gv_wM_MissionHelpButton = c_invalidDialogControlId;
    libWCMI_gv_wM_MissionHelpButtonTipPanel = c_invalidDialogControlId;
    libWCMI_gv_wM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libWCMI_gv_wM_SendTransmissionCampaignPlayingTick = 3;
    libWCMI_gv_wM_SendTransmissionCampaignChatBubbleOn = true;
    libWCMI_gv_wM_DamageStat_TimerEncounter = TimerCreate();
    libWCMI_gv_wM_DamageStat_TimerUI = TimerCreate();
    libWCMI_gv_wM_DropPod_TP_Units = UnitGroupEmpty();
    libWCMI_gv_wM_UpgradeTextTag = c_textTagNone;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: TacticalAIGalaxy
//--------------------------------------------------------------------------------------------------
include "Scripts/TacticalAI/tactical_ai"

//--------------------------------------------------------------------------------------------------
// Custom Script: WM_DamageStat_Galaxy
//--------------------------------------------------------------------------------------------------
include "Scripts/UI/damage_stat.galaxy"

void libWCMI_InitCustomScript () {
}

// Presets
// Functions
void libWCMI_gf_WM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libWCMI_gv_wM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_WCMI_87B2D44D", "A", libWoLC_gf_WC_CampaignMapName(libWoLC_gf_CurrentMap()));
    lv_name = TextExpressionAssemble("Param/Expression/lib_WCMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libWCMI_gv_wM_MissionAutoSaveDone = true;
}

void libWCMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libWoLC_gf_CurrentMap() == null)) {
        return ;
    }

    libWCMI_gv_wM_MissionAutoSaveDone = false;
    libWCMI_gf_WM_MissionAutoSave(lp_description);
}

bool libWCMI_gf_PlayerInCinematicModeCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_PlayerInCinematicMode(1);
}

string libWCMI_gf_WM_SoundDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return (libWCMI_gv_pMC_SoundDataTableIdentifier + IntToString(libWCMI_gv_wM_SoundDataTableIndex));
}

void libWCMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoEDCAAF8F_g;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoEDCAAF8F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libWCMI_gv_wM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libWCMI_gf_WM_SoundDataTableName(), SoundLastPlayed());
}

void libWCMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libWCMI_gv_wM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libWCMI_gf_WM_SoundDataTableName()), true);
        libWCMI_gv_wM_SoundDataTableIndex -= 1;
    }
}

void libWCMI_gf_SetScreenModeCampaign (int lp_mode, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    UISetMode(PlayerGroupAll(), lp_mode, lp_duration);
    libWCMI_gv_wM_ScreenMode = lp_mode;
}

void libWCMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libWCMI_gv_wM_InCinematic = true;
    }
    else {
        libWCMI_gv_wM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libWCMI_gf_WM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libWCMI_gf_WM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libWCMI_gf_WM_CinematicModeNoWait_Trigger = null;
bool auto_libWCMI_gf_WM_CinematicModeNoWait_lp_onOff;
fixed auto_libWCMI_gf_WM_CinematicModeNoWait_lp_duration;

void libWCMI_gf_WM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libWCMI_gf_WM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libWCMI_gf_WM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libWCMI_gf_WM_CinematicModeNoWait_Trigger == null) {
        auto_libWCMI_gf_WM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libWCMI_gf_WM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_WM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libWCMI_gf_WM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libWCMI_gf_WM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libWCMI_gf_WM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    libWCMI_gf_WM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libWCMI_gf_WM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        if ((lp_duration != c_transitionDurationImmediate)) {
            UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        }

        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        libNtve_gf_GlobalCinematicSetting(true);
        libWoLC_gv_wC_TimeMissionPaused = true;
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        libWoLC_gv_wC_TimeMissionPaused = false;
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libWCMI_gf_ApplyCellularReactor (string lp_unit, int lp_player) {
    // Variable Declarations
    fixed lv_energyCurrent;
    fixed lv_energyMax;

    // Automatic Variable Declarations
    unitgroup auto892F699B_g;
    int auto892F699B_u;
    unit auto892F699B_var;

    // Variable Initialization

    // Implementation
    if ((lp_unit != null) && (UnitTypeGetProperty(lp_unit, c_unitPropEnergyMax) > 0.0) && (UnitTypeTestAttribute(lp_unit, c_unitAttributeStructure) == false)) {
        CatalogFieldValueModify(c_gameCatalogUnit, lp_unit, "EnergyMax", lp_player, "100", c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogUnit, lp_unit, "EnergyStart", lp_player, "100", c_upgradeOperationAdd);
        auto892F699B_g = UnitGroup(lp_unit, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto892F699B_u = UnitGroupCount(auto892F699B_g, c_unitCountAll);
        for (;; auto892F699B_u -= 1) {
            auto892F699B_var = UnitGroupUnitFromEnd(auto892F699B_g, auto892F699B_u);
            if (auto892F699B_var == null) { break; }
            lv_energyCurrent = UnitGetPropertyFixed(auto892F699B_var, c_unitPropEnergy, c_unitPropCurrent);
            lv_energyMax = UnitGetPropertyFixed(auto892F699B_var, c_unitPropEnergyMax, c_unitPropCurrent);
            UnitSetPropertyFixed(auto892F699B_var, c_unitPropEnergy, libNtve_gf_ArithmeticRealClamp((lv_energyCurrent + 100.0), 0.0, lv_energyMax));
        }
    }

}

void libWCMI_gf_ApplyRegenerativeBioSteel (string lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit != null) && (UnitTypeTestAttribute(lp_unit, c_unitAttributeMechanical) == true) && (UnitTypeTestAttribute(lp_unit, c_unitAttributeStructure) == false)) {
        CatalogFieldValueModify(c_gameCatalogUnit, lp_unit, "LifeRegenRate", lp_player, "2", c_upgradeOperationAdd);
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lp_unit, "LifeRegenDelay", lp_player) == 0.0)) {
            CatalogFieldValueModify(c_gameCatalogUnit, lp_unit, "LifeRegenDelay", lp_player, "10", c_upgradeOperationAdd);
        }

    }

}

trigger auto_libWCMI_gf_HandleMercCompound_Trigger = null;
unit auto_libWCMI_gf_HandleMercCompound_lp_mercCompound;

void libWCMI_gf_HandleMercCompound (unit lp_mercCompound) {
    auto_libWCMI_gf_HandleMercCompound_lp_mercCompound = lp_mercCompound;

    if (auto_libWCMI_gf_HandleMercCompound_Trigger == null) {
        auto_libWCMI_gf_HandleMercCompound_Trigger = TriggerCreate("auto_libWCMI_gf_HandleMercCompound_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_HandleMercCompound_Trigger, false, false);
}

bool auto_libWCMI_gf_HandleMercCompound_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mercCompound = auto_libWCMI_gf_HandleMercCompound_lp_mercCompound;

    // Variable Declarations
    unit lv_primaryCommandCenter;
    string lv_cooldownLink;
    int lv_cooldownTime;

    // Automatic Variable Declarations
    int auto5C448351_ae;
    int auto5C448351_var;

    // Variable Initialization
    lv_cooldownLink = "";

    // Implementation
    if ((libWoLC_gf_WC_AnyMercenaryPurchased() == false)) {
        UnitRemove(lp_mercCompound);
        return true;
    }

    Wait(0.1, c_timeGame);
    while (!((libWCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitFilterMatch(lp_mercCompound, 1, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), (1 << (c_targetFilterHidden - 32)))) == true))) {
        Wait(0.1, c_timeGame);
    }
    auto5C448351_ae = CatalogFieldValueCount(c_gameCatalogAbil, "SummonMercenaries", "InfoArray", c_playerAny);
    auto5C448351_var = 0;
    for ( ; auto5C448351_var <= auto5C448351_ae; auto5C448351_var += 1 ) {
        lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "SummonMercenaries", "InfoArray[" + IntToString(auto5C448351_var) + "].Cooldown.Link", 1);
        lv_cooldownTime = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SummonMercenaries", "InfoArray[" + IntToString(auto5C448351_var) + "].Cooldown.TimeStart", 1);
        libNtve_gf_GameRemoveCooldown(lv_cooldownLink);
        GameAddCooldown(lv_cooldownLink, lv_cooldownTime);
    }
    return true;
}

void libWCMI_gf_WM_AddAlarakAvatarUpgrade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_player, "AlarakAvatar", 1);
}

void libWCMI_gf_WM_RemoveAlarakAvatarUpgrade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_player, "AlarakAvatar", -1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AlarakAvatar", 0);
}

point libWCMI_gf_AlarakKnockbackOffsetFindPoint (fixed lp_angle, point lp_startingPoint, fixed lp_distance) {
    // Variable Declarations
    fixed lv_i;
    bool lv_pathGood;
    point lv_lastGoodPoint;

    // Automatic Variable Declarations
    fixed auto50F82DCD_ae;
    const fixed auto50F82DCD_ai = 0.5;

    // Variable Initialization
    lv_pathGood = true;

    // Implementation
    lv_lastGoodPoint = lp_startingPoint;
    auto50F82DCD_ae = lp_distance;
    lv_i = 0.0;
    for ( ; ( (auto50F82DCD_ai >= 0 && lv_i <= auto50F82DCD_ae) || (auto50F82DCD_ai < 0 && lv_i >= auto50F82DCD_ae) ) ; lv_i += auto50F82DCD_ai ) {
        if ((lv_pathGood == true)) {
            if ((PathingType(PointWithOffsetPolar(lp_startingPoint, lv_i, lp_angle)) == c_pathingGround)) {
                lv_lastGoodPoint = PointWithOffsetPolar(lp_startingPoint, lv_i, lp_angle);
            }
            else {
                lv_pathGood = false;
            }
        }

    }
    return lv_lastGoodPoint;
}

void libWCMI_gf_WM_DetectionUpgradesApply () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto4CF9774B_ae = 15;
    const int auto4CF9774B_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "DetectionFriendly", 1);
    lv_i = 2;
    for ( ; ( (auto4CF9774B_ai >= 0 && lv_i <= auto4CF9774B_ae) || (auto4CF9774B_ai < 0 && lv_i >= auto4CF9774B_ae) ) ; lv_i += auto4CF9774B_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "DetectionEnemy", 1);
        }

    }
}

void libWCMI_gf_WM_MissionCheat_UpdateButtonEnabled () {
    // Variable Declarations
    int lv_arrayIter;

    // Automatic Variable Declarations
    int auto0D8B4302_ae;
    const int auto0D8B4302_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libWCMI_gv_wM_MissionCheat_Dialog == c_invalidDialogId)) {
        return ;
    }

    auto0D8B4302_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
    lv_arrayIter = 1;
    for ( ; ( (auto0D8B4302_ai >= 0 && lv_arrayIter <= auto0D8B4302_ae) || (auto0D8B4302_ai < 0 && lv_arrayIter >= auto0D8B4302_ae) ) ; lv_arrayIter += auto0D8B4302_ai ) {
        if ((TriggerIsEnabled(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_trigger) == false)) {
            DialogControlSetEnabled(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, PlayerGroupAll(), false);
            TextExpressionSetToken("Param/Expression/lib_WCMI_9BF57690", "Button Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_titleText);
            libNtve_gf_SetDialogItemText(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, TextExpressionAssemble("Param/Expression/lib_WCMI_9BF57690"), PlayerGroupAll());
            if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_uIType == libWCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DialogControlSetEnabled(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_editBoxDialog, PlayerGroupAll(), false);
            }

        }
        else {
            DialogControlSetEnabled(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_WCMI_80CEDAC6", "Button Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_titleText);
            libNtve_gf_SetDialogItemText(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, TextExpressionAssemble("Param/Expression/lib_WCMI_80CEDAC6"), PlayerGroupAll());
            if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_uIType == libWCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DialogControlSetEnabled(libWCMI_gv_wM_MissionCheat_Cheats[lv_arrayIter].lv_editBoxDialog, PlayerGroupAll(), true);
            }

        }
    }
}

void libWCMI_gf_WM_MissionCheat_ButtonTextInit () {
    // Variable Declarations
    int lv_cheatIndex01;
    int lv_cheatIndex02;

    // Automatic Variable Declarations
    int auto6A612C5A_ae;
    const int auto6A612C5A_ai = 1;
    int autoDF102A18_ae;
    const int autoDF102A18_ai = 1;
    int auto5B343B0C_ae;
    const int auto5B343B0C_ai = 1;

    // Variable Initialization

    // Implementation
    auto6A612C5A_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
    lv_cheatIndex01 = 1;
    for ( ; ( (auto6A612C5A_ai >= 0 && lv_cheatIndex01 <= auto6A612C5A_ae) || (auto6A612C5A_ai < 0 && lv_cheatIndex01 >= auto6A612C5A_ae) ) ; lv_cheatIndex01 += auto6A612C5A_ai ) {
        libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString);
    }
    autoDF102A18_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
    lv_cheatIndex01 = 1;
    for ( ; ( (autoDF102A18_ai >= 0 && lv_cheatIndex01 <= autoDF102A18_ae) || (autoDF102A18_ai < 0 && lv_cheatIndex01 >= autoDF102A18_ae) ) ; lv_cheatIndex01 += autoDF102A18_ai ) {
        if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger == null)) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_BB000415", "Button Text", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
            TextExpressionSetToken("Param/Expression/lib_WCMI_BB000415", "Error Text", StringToText("Error"));
            libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_WCMI_BB000415");
            TextExpressionSetToken("Param/Expression/lib_WCMI_CA1103D4", "Tip Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
            TextExpressionSetToken("Param/Expression/lib_WCMI_CA1103D4", "Error Text", StringToText("Error: Trigger not set for this Button"));
            libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_WCMI_CA1103D4");
        }
        else {
            auto5B343B0C_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
            lv_cheatIndex02 = (lv_cheatIndex01 + 1);
            for ( ; ( (auto5B343B0C_ai >= 0 && lv_cheatIndex02 <= auto5B343B0C_ae) || (auto5B343B0C_ai < 0 && lv_cheatIndex02 >= auto5B343B0C_ae) ) ; lv_cheatIndex02 += auto5B343B0C_ai ) {
                if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger == libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_trigger)) {
                    TextExpressionSetToken("Param/Expression/lib_WCMI_345DFBBA", "Button Text", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_345DFBBA", "Error Text", StringToText("Error"));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_WCMI_345DFBBA");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_E29A6B4F", "Desc Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_WCMI_E29A6B4F", "trigname", StringToText(TriggerGetFunction(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger)));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_E29A6B4F", "command", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_WCMI_E29A6B4F");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_60CA52DA", "Button Text", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_60CA52DA", "Error Text", StringToText("Error"));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleText = TextExpressionAssemble("Param/Expression/lib_WCMI_60CA52DA");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_B57553DC", "Desc Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_WCMI_B57553DC", "trigname", StringToText(TriggerGetFunction(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_trigger)));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_B57553DC", "command", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_description = TextExpressionAssemble("Param/Expression/lib_WCMI_B57553DC");
                }

                if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString == libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString)) {
                    TextExpressionSetToken("Param/Expression/lib_WCMI_3E2FD972", "Button Text", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_3E2FD972", "Error Text", StringToText("Error"));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_WCMI_3E2FD972");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_BF425BB2", "Desc Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_WCMI_BF425BB2", "command", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_WCMI_BF425BB2");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_84AF9873", "Button Text", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_WCMI_84AF9873", "Error Text", StringToText("Error"));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleText = TextExpressionAssemble("Param/Expression/lib_WCMI_84AF9873");
                    TextExpressionSetToken("Param/Expression/lib_WCMI_53441A0B", "Desc Text", libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_WCMI_53441A0B", "command", StringToText(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex02].lv_description = TextExpressionAssemble("Param/Expression/lib_WCMI_53441A0B");
                }

            }
        }
    }
}

void libWCMI_gf_AddMissionCheat (string lp_command, string lp_description, trigger lp_trigger, int lp_cheatType, int lp_uIType) {
    // Variable Declarations
    string lv_stageString;
    int lv_stage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stageString = "";

    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        return ;
    }

    if ((libWCMI_gv_wM_MissionCheat_ArrayCount == libWCMI_gv_pMC_MissionCheat_MaxCheats)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_C3493724", "ErrorMessage", StringToText("Maximum Mission Cheats reached!"));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WCMI_C3493724"), true);
        return ;
    }

    libWCMI_gv_wM_MissionCheat_ArrayCount += 1;
    libWCMI_gv_wM_MissionCheat_Cheats[libWCMI_gv_wM_MissionCheat_ArrayCount].lv_titleString = StringReplaceWord(lp_command, " ", "", c_stringReplaceAll, c_stringCase);
    libWCMI_gv_wM_MissionCheat_Cheats[libWCMI_gv_wM_MissionCheat_ArrayCount].lv_description = StringToText(lp_description);
    libWCMI_gv_wM_MissionCheat_Cheats[libWCMI_gv_wM_MissionCheat_ArrayCount].lv_trigger = lp_trigger;
    libWCMI_gv_wM_MissionCheat_Cheats[libWCMI_gv_wM_MissionCheat_ArrayCount].lv_cheatType = lp_cheatType;
    libWCMI_gv_wM_MissionCheat_CategoryUsed[lp_cheatType] = true;
    libWCMI_gv_wM_MissionCheat_Cheats[libWCMI_gv_wM_MissionCheat_ArrayCount].lv_uIType = lp_uIType;
}

int libWCMI_gf_MissionCheatEditBoxValueInteger (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("PS_" + TriggerGetFunction(lp_cheatTrigger)));
    return StringToInt(lv_returnValue);
}

fixed libWCMI_gf_MissionCheatEditBoxValueReal (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("PS_" + TriggerGetFunction(lp_cheatTrigger)));
    return StringToFixed(lv_returnValue);
}

string libWCMI_gf_MissionCheatEditBoxValueString (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("PS_" + TriggerGetFunction(lp_cheatTrigger)));
    return lv_returnValue;
}

void libWCMI_gf_GameOver (int lp_gameOverType) {
    // Automatic Variable Declarations
    // Implementation
    libWCMI_gv_wM_GameOverResult = lp_gameOverType;
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
}

bool libWCMI_gf_GameIsOver () {
    // Automatic Variable Declarations
    // Implementation
    return (libWCMI_gv_wM_GameOverResult != libWCMI_ge_CampaignMissionGameResultType_None);
}

void libWCMI_gf_WM_PostMissionVictoryUpdate () {
    // Variable Declarations
    int lv_missionDifficulty;
    int lv_bestTime;
    string lv_indexObjective;
    string lv_mostDamageDealtByUnit;

    // Automatic Variable Declarations
    int auto29898FAE_ae;
    int auto29898FAE_ai;

    // Variable Initialization
    lv_missionDifficulty = 1;

    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    lv_missionDifficulty = PlayerDifficulty(1);
    libWCMI_gv_wM_MissionCompleteTime = FixedToInt(libNtve_gf_GamePlayTime(1));
    lv_bestTime = libWoLC_gf_MissionCompleteBestTime(libWoLC_gf_CurrentMap(), lv_missionDifficulty);
    if (((lv_bestTime <= 0) || (libWCMI_gv_wM_MissionCompleteTime < lv_bestTime))) {
        libWoLC_gf_WC_SetMissionCompletionBestTime(libWoLC_gf_CurrentMap(), lv_missionDifficulty, libWCMI_gv_wM_MissionCompleteTime);
    }

    auto29898FAE_ae = CatalogFieldValueCount(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray", 1);
    auto29898FAE_ai = 1;
    while (auto29898FAE_ai <= auto29898FAE_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto29898FAE_ai-1)+"]", 1);
        auto29898FAE_ai = auto29898FAE_ai + 1;
        if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            if ((libWoLC_gf_MissionObjectiveProgress(lv_indexObjective) > libWoLC_gf_PS_MissionObjectivePreviousProgress(lv_indexObjective))) {
                libWoLC_gf_PS_MissionObjectivePreviousProgressSet(lv_indexObjective, libWoLC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

        }

    }
    lv_mostDamageDealtByUnit = libWCMI_gf_MostDamageDealtUnitType();
    if ((lv_mostDamageDealtByUnit != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_7553B7CF", "A", UnitTypeGetName(lv_mostDamageDealtByUnit));
        TextExpressionSetToken("Param/Expression/lib_WCMI_7553B7CF", "B", FixedToTextAdvanced((libWCMI_gf_TotalDamageDealtbyUnitType(lv_mostDamageDealtByUnit) / libWCMI_gf_TotalDamageDealt()), c_formatNumberStylePercent, true, 0, 1));
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/lib_WCMI_DBD19B1F"), TextExpressionAssemble("Param/Expression/lib_WCMI_7553B7CF"));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/lib_WCMI_A0790CA6"), StringExternal("Param/Value/lib_WCMI_93DF3877"));
    }
    VictoryPanelAddTrackedStatistic("DamageDealt");
    VictoryPanelAddTrackedStatistic("DamageTaken");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
}

void libWCMI_gf_WM_MissionEndStats (int lp_type) {
    // Variable Declarations
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;
    string lv_indexPerk;
    string lv_indexSoAUpgrade;
    string lv_indexObjective;
    string lv_purchasedUnit;

    // Automatic Variable Declarations
    int autoD86639D2_ae;
    int autoD86639D2_ai;
    int autoD74C5D59_ae;
    int autoD74C5D59_ai;
    int autoC085A94F_ae;
    int autoC085A94F_ai;
    int autoA40095C7_ae;
    int autoA40095C7_ai;
    int auto1132B9C5_ai;
    int auto1132B9C5_ae;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_CurrentMap() == null)) {
        return ;
    }

    if ((libWCMI_gv_wM_MissionEndStatsRecorded == true)) {
        return ;
    }

    libWCMI_gv_wM_MissionEndStatsRecorded = true;
    libWoLC_gf_WC_StatEventCreate("MissionEnd");
    if ((lp_type == c_gameOverVictory)) {
        libWoLC_gf_WC_StatEventAddInt("Victory", 1, libWoLC_gf_WC_StatEventLast());
    }
    else {
        libWoLC_gf_WC_StatEventAddInt("Victory", 0, libWoLC_gf_WC_StatEventLast());
    }
    libWoLC_gf_WC_StatEventAddInt("MissionTime", FixedToInt(libNtve_gf_GamePlayTime(1)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventAddInt("Difficulty", libWoLC_gf_WC_DifficultyIndex(PlayerDifficulty(1)), libWoLC_gf_WC_StatEventLast());
    libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
    if ((libWoLC_gf_CurrentMap() != "PMoebius01") && (libWoLC_gf_CurrentMap() != "PAiur01") && (libWoLC_gf_CurrentMap() != "PAiur02") && (libWoLC_gf_CurrentMap() != "PAiur03") && (libWoLC_gf_CurrentMap() != "SC2Epilogue01") && (libWoLC_gf_CurrentMap() != "SC2Epilogue02") && (libWoLC_gf_CurrentMap() != "SC2Epilogue03")) {
        libWoLC_gf_WC_StatEventCreate("ArmyChoices");
        autoD86639D2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        autoD86639D2_ai = 1;
        while (autoD86639D2_ai <= autoD86639D2_ae) {
            lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD86639D2_ai);
            autoD86639D2_ai = autoD86639D2_ai + 1;
            if ((libWoLC_gf_ArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true)) {
                lv_purchasedUnit = libWoLC_gf_WC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory);
                if ((lv_purchasedUnit == null)) {
                    libWoLC_gf_WC_StatEventAddStr((lv_indexArmyCategory), "None", libWoLC_gf_WC_StatEventLast());
                }
                else {
                    libWoLC_gf_WC_StatEventAddStr((lv_indexArmyCategory), (lv_purchasedUnit), libWoLC_gf_WC_StatEventLast());
                }
            }

        }
        libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
    }

    libWoLC_gf_WC_StatEventCreate("Objectives");
    autoD74C5D59_ae = CatalogFieldValueCount(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray", 1);
    autoD74C5D59_ai = 1;
    while (autoD74C5D59_ai <= autoD74C5D59_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libWoLC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoD74C5D59_ai-1)+"]", 1);
        autoD74C5D59_ai = autoD74C5D59_ai + 1;
        if ((libWoLC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            libWoLC_gf_WC_StatEventAddInt((lv_indexObjective), libWoLC_gf_MissionObjectiveProgress(lv_indexObjective), libWoLC_gf_WC_StatEventLast());
        }

    }
    libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
    autoC085A94F_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC085A94F_ai = 1;
    while (autoC085A94F_ai <= autoC085A94F_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC085A94F_ai);
        autoC085A94F_ai = autoC085A94F_ai + 1;
        if ((libWoLC_gf_WC_TechUnitOfArmyCategory(lv_indexArmyCategory) != null) && (libWoLC_gf_WC_ArmyCategoryUnitType(lv_indexArmyCategory) != null)) {
            libWoLC_gf_WC_StatEventCreate("UnitStats");
            libWoLC_gf_WC_StatEventAddStr("UnitID", (libWoLC_gf_WC_ArmyCategoryUnitType(lv_indexArmyCategory)), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("UnitsMade", DataTableGetInt(true, ("UnitMade_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("UnitsLost", DataTableGetInt(true, ("UnitDied_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("DamageDone", DataTableGetInt(true, ("DmgDone_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("DamageTaken", DataTableGetInt(true, ("DmgTaken_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("DamageHealed", DataTableGetInt(true, ("UnitHeal_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("MineralsDone", DataTableGetInt(true, ("MinDone_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("VespeneDone", DataTableGetInt(true, ("VesDone_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("MineralsSpent", DataTableGetInt(true, ("MinSpent_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("VespeneSpent", DataTableGetInt(true, ("VesSpent_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("MineralsLost", DataTableGetInt(true, ("MinLost_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventAddInt("VespeneLost", DataTableGetInt(true, ("VesLost_" + libWoLC_gf_WC_ArmyStringFromArmyCategory(lv_indexArmyCategory))), libWoLC_gf_WC_StatEventLast());
            libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
            autoA40095C7_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
            autoA40095C7_ai = 1;
            while (autoA40095C7_ai <= autoA40095C7_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(autoA40095C7_ai-1)+"]", 1);
                libWoLC_gf_WC_StatEventCreate("UnitStats");
                libWoLC_gf_WC_StatEventAddStr("UnitID", (libWoLC_gf_WC_StoryArmyUnitUnitType(lv_indexArmyUnit)), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("UnitsMade", DataTableGetInt(true, ("UnitMade_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("UnitsLost", DataTableGetInt(true, ("UnitDied_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("DamageDone", DataTableGetInt(true, ("DmgDone_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("DamageTaken", DataTableGetInt(true, ("DmgTaken_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("DamageHealed", DataTableGetInt(true, ("UnitHeal_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("MineralsDone", DataTableGetInt(true, ("MinDone_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("VespeneDone", DataTableGetInt(true, ("VesDone_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("MineralsSpent", DataTableGetInt(true, ("MinSpent_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("VespeneSpent", DataTableGetInt(true, ("VesSpent_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("MineralsLost", DataTableGetInt(true, ("MinLost_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventAddInt("VespeneLost", DataTableGetInt(true, ("VesLost_" + libWoLC_gf_WC_ArmyStringFromArmyUnit(lv_indexArmyUnit))), libWoLC_gf_WC_StatEventLast());
                libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
                autoA40095C7_ai = autoA40095C7_ai + 1;
            }
        }

    }
    libWoLC_gf_WC_StatRecordMiscUnits();
    auto1132B9C5_ai = 1;
    auto1132B9C5_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto1132B9C5_ai < auto1132B9C5_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto1132B9C5_ai);
        auto1132B9C5_ai = auto1132B9C5_ai+1;
        libWoLC_gf_WC_StatEventCreate("AbilityStats");
        libWoLC_gf_WC_StatEventAddStr("AbilityID", (lv_indexPerk), libWoLC_gf_WC_StatEventLast());
        libWoLC_gf_WC_StatEventAddInt("TimesUsed", DataTableGetInt(true, ("AbilUsed_" + (lv_indexPerk))), libWoLC_gf_WC_StatEventLast());
        libWoLC_gf_WC_StatEventAddInt("DamageDone", DataTableGetInt(true, ("DmgDone_" + (lv_indexPerk))), libWoLC_gf_WC_StatEventLast());
        libWoLC_gf_WC_StatEventDone(libWoLC_gf_WC_StatEventLast());
    }
    libWoLC_gf_WC_StatRecordMiscAbilities();
}

void libWCMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libWCMI_gf_GameOver(libWCMI_ge_CampaignMissionGameResultType_Victory);
    libWCMI_gf_WM_PostMissionVictoryUpdate();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libWCMI_gv_wM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libWCMI_gv_wM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libWCMI_gf_EndCampaignMission (int lp_player, int lp_type) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    libWCMI_gf_WM_MissionEndStats(lp_type);
    if ((lp_type != c_gameOverVictory)) {
        GameOver(lp_player, lp_type, true, false);
        return ;
    }

    GameCheatAllow(c_gameCheatProgress, false);
    AITimePause(true);
    UnitPauseAll(true);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Destroy Immediate");
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
    SoundStopAllTriggerSounds(false);
    libWoLC_gf_PrepareForStoryMode(c_gameOverVictory, libWoLC_gv_pCX_CampaignDifficulty);
    if ((libWoLC_gv_wC_InLoadedMission == true)) {
        libWoLC_gf_WC_ArchivesBankSyncForSave();
    }

    if ((libWoLC_gv_wCX_IsSimulation == false)) {
        libWoLC_gf_WC_UpdateCampaignScreen(libWoLC_gf_CurrentMap());
    }

    TextExpressionSetToken("Param/Expression/lib_WCMI_20839488", "A", libWoLC_gf_WC_CampaignMapName(libWoLC_gf_CurrentMap()));
    libWoLC_gf_CreateStoryModeTransitionSave(TextExpressionAssemble("Param/Expression/lib_WCMI_20839488"), StringToText(""));
    libWCUI_gf_DisplayCampaignVictoryScoreScreen(libWoLC_gf_CurrentMap());
    if ((libWoLC_gv_wCX_IsSimulation == true)) {
        libWoLC_gf_WC_OpenCampaignBank();
        libWoLC_gf_WC_LoadTransitionVars(BankLastCreated(), libWoLC_gf_CurrentMap());
    }

    libWoLC_gf_WC_AchievementAwardMission(libWoLC_gf_CurrentMap());
}

void libWCMI_gf_PU_CampaignVictory2 () {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    if ((libWoLC_gv_wCX_IsSimulation == false)) {
        GameSetNextMap("");
    }

    GameOver(1, c_gameOverVictory, false, false);
}

void libWCMI_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    // Automatic Variable Declarations
    string autoC182DE42_val;

    // Implementation
    if ((libWCMI_gv_wM_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        libWCMI_gv_wM_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(libWCMI_gv_wM_PlanetPortrait, true);
        PortraitSetBackgroundVisible(libWCMI_gv_wM_PlanetPortrait, false);
        PortraitSetBorderVisible(libWCMI_gv_wM_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(libWCMI_gv_wM_PlanetPortrait);
    }
    else {
        PortraitSetModel(libWCMI_gv_wM_PlanetPortrait, lp_model, true);
    }
    autoC182DE42_val = lp_model;
    {
    }
    PortraitSetLight(libWCMI_gv_wM_PlanetPortrait, lp_light);
    GameSetLighting(lp_light, 0.0);
    PortraitSetPosition(libWCMI_gv_wM_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(libWCMI_gv_wM_PlanetPortrait, true);
    PortraitSetOffscreen(libWCMI_gv_wM_PlanetPortrait, false);
    PortraitSetVisible(libWCMI_gv_wM_PlanetPortrait, PlayerGroupAll(), true, true);
    libWoLC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    libWoLC_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    libWCMI_gv_wM_PlanetPortraitPlayerCamera = lp_camera;
    CameraApplyInfo(1, lp_camera, 0.0, -1, 10, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void libWCMI_gf_ZoomInPlanetPortrait () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(libWCMI_gv_wM_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(libWCMI_gv_wM_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    Wait(1.5, c_timeGame);
}

trigger auto_libWCMI_gf_HidePlanetPortrait_Trigger = null;

void libWCMI_gf_HidePlanetPortrait () {
    if (auto_libWCMI_gf_HidePlanetPortrait_Trigger == null) {
        auto_libWCMI_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_libWCMI_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_libWCMI_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    PortraitSetOffscreen(libWCMI_gv_wM_PlanetPortrait, true);
    ActorSend(ActorFromPortrait(libWCMI_gv_wM_PlanetPortrait), "AnimClear Custom 0.000000");
    return true;
}

void libWCMI_gf_StartAIPersonalityForPlayerCampaign (int lp_player, string lp_personality) {
    // Automatic Variable Declarations
    // Deprecated
}

void libWCMI_gf_StartAIPersonalitiesForAllPlayersCampaign () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    CampaignInitAI();
}

void libWCMI_gf_StartCampaignAIForAllPlayersVoid () {
    // Automatic Variable Declarations
    // Deprecated
    CampaignInitAI();
}

void libWCMI_gf_StartCampaignAIForPlayerVoid (int lp_player) {
    // Automatic Variable Declarations
    // Deprecated
    AICampaignStart(lp_player);
}

void libWCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoDF48CB2F_g;

    // Variable Initialization

    // Implementation
    autoDF48CB2F_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDF48CB2F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeComputer)) {
            libWCMI_gf_EnableVoidCampaignAIBehaviorForPlayer(lv_indexPlayer);
        }

    }
}

void libWCMI_gf_EnableVoidCampaignAIBehaviorForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    AISetDifficulty(lp_player, c_diffAvoidMindControlled, false);
    AICombatDiffFlagTieBreakHealers (lp_player, c_combatFlagDisable);
}

void libWCMI_gf_EnableDisableNeedPylonInfo (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    libWCMI_gv_wM_NeedPylonEnabled = lp_enableDisable;
    if ((libWCMI_gv_wM_NeedPylonEnabled == false)) {
        if ((libWCMI_gv_wM_NeedPylonAbilityHighlightOn == true)) {
            libWCMI_gv_wM_NeedPylonAbilityHighlightOn = false;
            UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), false);
            CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Button/Tooltip/Pylon");
        }

    }

}

bool libWCMI_gf_NeedPylonHighlightOn () {
    // Automatic Variable Declarations
    // Implementation
    return libWCMI_gv_wM_NeedPylonAbilityHighlightOn;
}

int libWCMI_gf_CampaignPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 2;
}

bool libWCMI_gf_PlayerIsInCombat (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libWCMI_gv_wM_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

void libWCMI_gf_SetPlayerMinimapColor (int lp_player, int lp_color) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(0) + "].Value[" + IntToString(0) + "]", lp_player, CatalogFieldValueGet(c_gameCatalogGame, "Dflt", "TeamColors[" + IntToString(lp_color) + "].Value[" + IntToString(0) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(0) + "].Value[" + IntToString(1) + "]", lp_player, CatalogFieldValueGet(c_gameCatalogGame, "Dflt", "TeamColors[" + IntToString(lp_color) + "].Value[" + IntToString(1) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(0) + "].Value[" + IntToString(2) + "]", lp_player, CatalogFieldValueGet(c_gameCatalogGame, "Dflt", "TeamColors[" + IntToString(lp_color) + "].Value[" + IntToString(2) + "]", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(0) + "].Value[" + IntToString(3) + "]", lp_player, CatalogFieldValueGet(c_gameCatalogGame, "Dflt", "TeamColors[" + IntToString(lp_color) + "].Value[" + IntToString(3) + "]", c_playerAny));
}

void libWCMI_gf_UpdateObjectiveCampaign (string lp_objective) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    text lv_baseText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective) == null)) {
        return ;
    }

    if (((libWoLC_gf_MissionObjectiveItemCount(lp_objective) == 1) || (libWoLC_gf_MissionObjectiveItemCount(lp_objective) == 0))) {
        lv_baseText = UserDataGetText("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "FormatTextSingle", 1);
    }
    else {
        lv_baseText = UserDataGetText("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1);
    }
    lv_name = TextReplaceWord(lv_baseText, StringExternal("Param/Value/lib_WCMI_90EC773D"), libWoLC_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_WCMI_F72DF09B"), IntToText(libWoLC_gf_MissionObjectiveProgress(lp_objective)), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_WCMI_7AA38B9D"), IntToText(libWoLC_gf_MissionObjectiveItemCount(lp_objective)), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_WCMI_C6FA40A0"), libWoLC_gf_MissionObjectiveSpecial(lp_objective), c_stringReplaceAll, c_stringCase);
    if ((libWoLC_gf_MissionObjectiveStateCheck(lp_objective, libWoLC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_BEDEFD56", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_WCMI_BEDEFD56");
    }

    lv_bonusText = libWoLC_gf_PS_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_5966D169", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_WCMI_5966D169", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_WCMI_5966D169");
    }

    if ((libWoLC_gf_MissionObjectiveStateCheck(lp_objective, libWoLC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_E3BF1656", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_WCMI_E3BF1656");
    }

    ObjectiveSetName(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), lv_name);
}

void libWCMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current);
    libWCMI_gf_UpdateObjectiveCampaign(lp_objective);
}

void libWCMI_gf_SetMissionObjectiveProgress2 (string lp_objective, text lp_special) {
    // Automatic Variable Declarations
    // Implementation
    libWoLC_gf_WC_MissionObjectiveSpecialDataSet(lp_objective, lp_special);
    libWCMI_gf_UpdateObjectiveCampaign(lp_objective);
}

void libWCMI_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_name = libWoLC_gf_MissionObjectiveName(lp_objectiveData);
    ObjectiveCreate(lv_name, libWoLC_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, libWoLC_gf_PS_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    libWCMI_gf_ZS_SetMissionObjectiveState(lp_objectiveData, libWoLC_ge_MissionObjectiveState_Available);
    if ((libWoLC_gf_PS_ObjectiveCountsDown(lp_objectiveData) == false)) {
        libWCMI_gf_SetMissionObjectiveProgress(lp_objectiveData, 0);
    }
    else {
        libWCMI_gf_SetMissionObjectiveProgress(lp_objectiveData, libWoLC_gf_MissionObjectiveItemCount(lp_objectiveData));
    }
}

void libWCMI_gf_HideObjectiveCampaign (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    ObjectiveSetState(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objectiveData)), c_objectiveStateHidden);
}

void libWCMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    int autoD2FFF70D_val;

    // Implementation
    autoD2FFF70D_val = lp_state;
    if (autoD2FFF70D_val == libWoLC_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoD2FFF70D_val == libWoLC_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_WCMI_0B6E0658", "A", ObjectiveGetName(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_WCMI_0B6E0658"));
        libWoLC_gf_ZS_SetObjectiveProgressData(lp_objective, libWoLC_gf_MissionObjectiveItemCount(lp_objective));
    }
    else if (autoD2FFF70D_val == libWoLC_ge_MissionObjectiveState_Undiscovered) {
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoD2FFF70D_val == libWoLC_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", libWoLC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libWoLC_gf_PS_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void libWCMI_gf_AddMissionTipCampaign (string lp_tipData) {
    // Variable Declarations
    int lv_createdCount;
    text lv_tipName;
    text lv_tipDescription;
    string lv_tipIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("CampaignTips", lp_tipData, "Created", 1) >= UserDataGetInt("CampaignTips", lp_tipData, "Display Limit", 1)) && (UserDataGetInt("CampaignTips", lp_tipData, "Display Limit", 1) != 0)) {
        return ;
    }

    libWCMI_gv_wM_MissionTipCount += 1;
    libWCMI_gv_wM_MissionTip[libWCMI_gv_wM_MissionTipCount] = lp_tipData;
    lv_createdCount = UserDataGetInt("CampaignTips", lp_tipData, "Created", 1);
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, (lv_createdCount + 1));
    lv_tipName = UserDataGetText("CampaignTips", lp_tipData, "Name", 1);
    lv_tipDescription = UserDataGetText("CampaignTips", lp_tipData, "Description", 1);
    lv_tipIcon = UserDataGetImagePath("CampaignTips", lp_tipData, "Icon", 1);
    libWCUI_gf_WU_AddTip(lv_tipName, libNtve_ge_TipType_NormalTip, lv_tipDescription, lv_tipName, lv_tipIcon);
}

trigger auto_libWCMI_gf_DisplayMissionTip_Trigger = null;

void libWCMI_gf_DisplayMissionTip () {
    if (auto_libWCMI_gf_DisplayMissionTip_Trigger == null) {
        auto_libWCMI_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_libWCMI_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_libWCMI_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HelpTipCallout");
        libWCMI_gv_wM_MissionHelpButtonTipPanel = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
        libWCMI_gv_wM_MissionHelpButton = DialogControlLastCreated();
        DialogControlSetVisible(libWCMI_gv_wM_MissionHelpButtonTipPanel, PlayerGroupAll(), true);
        TriggerEnable(libWCMI_gt_WM_MissionTipClicked, true);
    }

    Wait(6.0, c_timeReal);
    if ((libWCMI_gv_wM_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlSetVisible(libWCMI_gv_wM_MissionHelpButtonTipPanel, PlayerGroupAll(), false);
    }

    return true;
}

void libWCMI_gf_WM_RefreshTip () {
    // Variable Declarations
    int lv_index;
    text lv_tipName;
    text lv_tipDescription;
    string lv_tipIcon;

    // Automatic Variable Declarations
    const int auto8FF5A5CB_ae = 1;
    const int auto8FF5A5CB_ai = -1;

    // Variable Initialization

    // Implementation
    HelpPanelDestroyAllTips();
    lv_index = libWCMI_gv_wM_MissionTipCount;
    for ( ; ( (auto8FF5A5CB_ai >= 0 && lv_index <= auto8FF5A5CB_ae) || (auto8FF5A5CB_ai < 0 && lv_index >= auto8FF5A5CB_ae) ) ; lv_index += auto8FF5A5CB_ai ) {
        if ((UserDataGetText("CampaignTips", libWCMI_gv_wM_MissionTip[lv_index], "Name", 1) != null)) {
            lv_tipName = UserDataGetText("CampaignTips", libWCMI_gv_wM_MissionTip[lv_index], "Name", 1);
        }
        else {
            lv_tipName = StringExternal("Param/Value/lib_WCMI_758AA553");
        }
        if ((UserDataGetText("CampaignTips", libWCMI_gv_wM_MissionTip[lv_index], "Description", 1) != null)) {
            lv_tipDescription = UserDataGetText("CampaignTips", libWCMI_gv_wM_MissionTip[lv_index], "Description", 1);
        }
        else {
            lv_tipDescription = StringExternal("Param/Value/lib_WCMI_4837CBD0");
        }
        lv_tipIcon = UserDataGetImagePath("CampaignTips", libWCMI_gv_wM_MissionTip[lv_index], "Icon", 1);
        libWCUI_gf_WU_AddTip(lv_tipName, libNtve_ge_TipType_NormalTip, lv_tipDescription, lv_tipName, lv_tipIcon);
    }
}

void libWCMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libWCMI_gf_WM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libWCMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libWCMI_ge_MissionTransmissionOptions_ChatBubble) {
        libWCMI_gv_wM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

void libWCMI_gf_WM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libWCMI_gv_wM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libWCMI_gv_wM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libWCMI_gv_wM_SendTransmissionCampaignSpeaker;
    libWCMI_gv_wM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libWCMI_gv_wM_SendTransmissionCampaignTrigger;
    libWCMI_gv_wM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libWCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libWCMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libWCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libWCMI_gv_wM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libWCMI_gv_wM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libWCMI_gv_wM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libWCMI_gv_wM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libWCMI_gv_wM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((UnitGetOwner(lp_unit) == 1)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libWCMI_gv_wM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconRing {Origin 0} 0.000000,0.000000,0.100000");
            lv_talkRing = ActorFrom("::LastCreatedActual");
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libWCMI_gf_WM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        libWCMI_gf_WM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}

trigger auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libWCMI_gf_WM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libWCMI_gf_WM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libWCMI_gv_wM_SendTransmissionCampaignIndex)) {
        if ((libWCMI_gv_wM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libWCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        if ((lp_talkIcon != null)) {
            libNtve_gf_KillModel(lp_talkIcon);
        }

        if ((lp_talkRing != null)) {
            libNtve_gf_KillModel(lp_talkRing);
        }

        return true;
    }

    libWCMI_gv_wM_SendTransmissionCampaignIndex = 0;
    libWCMI_gv_wM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libWCMI_gt_WM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libWCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libWCMI_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

fixed libWCMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libWCMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    unit lv_actualUnit;
    string lv_actualModel;
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string auto41A5E975_val;
    string autoFFDC7B44_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    lv_actualUnit = lp_unit;
    lv_actualModel = lp_model;
    if ((lp_unit != null) && (UnitIsAlive(lp_unit) == false)) {
        if (true) {
        }
        else {
            lv_actualUnit = null;
            lv_actualModel = "KerriganReviveCocoon";
        }
    }

    auto41A5E975_val = UnitGetType(lv_actualUnit);
    if (auto41A5E975_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganEpilogue03") {
        lv_portraitActor = "KerriganEpilogue03Portrait";
    }
    else {
    }
    autoFFDC7B44_val = lp_model;
    if (autoFFDC7B44_val == "VorazunEx2Portrait") {
        lv_portraitActor = "VorazunEx2Portrait";
    }
    else if (autoFFDC7B44_val == "ArtanisEx2Portrait") {
        lv_portraitActor = "ArtanisEx2Portrait";
    }
    else if (autoFFDC7B44_val == "AlarakEx2Portrait") {
        lv_portraitActor = "AlarakEx2Portrait";
    }
    else if (autoFFDC7B44_val == "KaraxEx2Portrait") {
        lv_portraitActor = "KaraxEx2Portrait";
    }
    else if (autoFFDC7B44_val == "RohanaEx2Portrait") {
        lv_portraitActor = "RohanaEx2Portrait";
    }
    else if (autoFFDC7B44_val == "FenixEx2Portrait") {
        lv_portraitActor = "FenixEx2Portrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libWCMI_gf_WM_SendTransmissionCampaignInternal(true, lv_actualUnit, lv_actualModel, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_WCMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libWCMI_gf_WM_DamageStat_SortEncounter () {
    // Variable Declarations
    int lv_i;
    string lv_temp_unit;
    fixed lv_temp_damage;
    bool lv_swapped;

    // Automatic Variable Declarations
    const int auto66DC6375_ae = libWCMI_gv_wMC_DamageStat_UnitTypeCount;
    const int auto66DC6375_ai = 1;

    // Variable Initialization

    // Implementation
    do {
        lv_swapped = false;
        lv_i = 2;
        for ( ; ( (auto66DC6375_ai >= 0 && lv_i <= auto66DC6375_ae) || (auto66DC6375_ai < 0 && lv_i >= auto66DC6375_ae) ) ; lv_i += auto66DC6375_ai ) {
            if ((libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_unitType == null)) {
                break;
            }

            if ((libWCMI_gv_wM_DamageStat_Encounter[(lv_i - 1)].lv_damage < libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_damage)) {
                lv_temp_unit = libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_unitType;
                lv_temp_damage = libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_damage;
                libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_unitType = libWCMI_gv_wM_DamageStat_Encounter[(lv_i - 1)].lv_unitType;
                libWCMI_gv_wM_DamageStat_Encounter[lv_i].lv_damage = libWCMI_gv_wM_DamageStat_Encounter[(lv_i - 1)].lv_damage;
                libWCMI_gv_wM_DamageStat_Encounter[(lv_i - 1)].lv_unitType = lv_temp_unit;
                libWCMI_gv_wM_DamageStat_Encounter[(lv_i - 1)].lv_damage = lv_temp_damage;
                lv_swapped = true;
            }

        }
    }while ((lv_swapped == true));
}

bool libWCMI_gf_WM_DamageStat_ShouldDisplayEncounter () {
    // Automatic Variable Declarations
    // Implementation
    return true;
}

string libWCMI_gf_WM_DamageStat_LeaderAlias (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "LeaderAlias", c_playerAny));
}

fixed libWCMI_gf_TotalDamageDealtbyUnitType (string lp_unit) {
    // Variable Declarations
    string lv_leader;

    // Automatic Variable Declarations
    const int auto44EBDAC5_ae = libWCMI_gv_wMC_DamageStat_UnitTypeCount;
    int auto44EBDAC5_var;

    // Variable Initialization
    lv_leader = libWCMI_gf_WM_DamageStat_LeaderAlias(lp_unit);

    // Implementation
    auto44EBDAC5_var = 1;
    for ( ; auto44EBDAC5_var <= auto44EBDAC5_ae; auto44EBDAC5_var += 1 ) {
        if ((libWCMI_gv_wM_DamageStat_Total[auto44EBDAC5_var].lv_unitType == lv_leader)) {
            return libWCMI_gv_wM_DamageStat_Total[auto44EBDAC5_var].lv_damage;
        }

    }
    return 0.0;
}

fixed libWCMI_gf_TotalDamageDealt () {
    // Variable Declarations
    fixed lv_damage;

    // Automatic Variable Declarations
    const int auto01FFE9C1_ae = libWCMI_gv_wMC_DamageStat_UnitTypeCount;
    int auto01FFE9C1_var;

    // Variable Initialization

    // Implementation
    auto01FFE9C1_var = 1;
    for ( ; auto01FFE9C1_var <= auto01FFE9C1_ae; auto01FFE9C1_var += 1 ) {
        lv_damage += libWCMI_gv_wM_DamageStat_Total[auto01FFE9C1_var].lv_damage;
    }
    return lv_damage;
}

string libWCMI_gf_MostDamageDealtUnitType () {
    // Variable Declarations
    string lv_unit;
    fixed lv_damage;

    // Automatic Variable Declarations
    const int auto48FBABBA_ae = libWCMI_gv_wMC_DamageStat_UnitTypeCount;
    int auto48FBABBA_var;

    // Variable Initialization

    // Implementation
    auto48FBABBA_var = 1;
    for ( ; auto48FBABBA_var <= auto48FBABBA_ae; auto48FBABBA_var += 1 ) {
        if ((libWCMI_gv_wM_DamageStat_Total[auto48FBABBA_var].lv_damage > lv_damage)) {
            lv_damage = libWCMI_gv_wM_DamageStat_Total[auto48FBABBA_var].lv_damage;
            lv_unit = libWCMI_gv_wM_DamageStat_Total[auto48FBABBA_var].lv_unitType;
        }

    }
    return lv_unit;
}

void libWCMI_gf_WM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto29D5EF81_g;
    int auto29D5EF81_u;
    unitgroup auto5CF90E73_g;
    int auto5CF90E73_u;
    unitgroup auto7E0D3E3B_g;
    int auto7E0D3E3B_u;

    // Variable Initialization

    // Implementation
    auto29D5EF81_g = lp_units;
    auto29D5EF81_u = UnitGroupCount(auto29D5EF81_g, c_unitCountAll);
    for (;; auto29D5EF81_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto29D5EF81_g, auto29D5EF81_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        auto5CF90E73_g = lp_units;
        auto5CF90E73_u = UnitGroupCount(auto5CF90E73_g, c_unitCountAll);
        for (;; auto5CF90E73_u -= 1) {
            lv_chosenUnit = UnitGroupUnitFromEnd(auto5CF90E73_g, auto5CF90E73_u);
            if (lv_chosenUnit == null) { break; }
            UnitRemove(lv_chosenUnit);
        }
        return ;
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto7E0D3E3B_g = lp_units;
    auto7E0D3E3B_u = UnitGroupCount(auto7E0D3E3B_g, c_unitCountAll);
    for (;; auto7E0D3E3B_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto7E0D3E3B_g, auto7E0D3E3B_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libWCMI_gf_WM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup autoB56D9329_g;
    int autoB56D9329_u;
    unitgroup auto2AE26FD9_g;
    int auto2AE26FD9_u;
    unit auto2AE26FD9_var;
    unitgroup auto7DD6500F_g;
    int auto7DD6500F_u;

    // Variable Initialization

    // Implementation
    autoB56D9329_g = lp_units;
    autoB56D9329_u = UnitGroupCount(autoB56D9329_g, c_unitCountAll);
    for (;; autoB56D9329_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB56D9329_g, autoB56D9329_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        auto2AE26FD9_g = lp_units;
        auto2AE26FD9_u = UnitGroupCount(auto2AE26FD9_g, c_unitCountAll);
        for (;; auto2AE26FD9_u -= 1) {
            auto2AE26FD9_var = UnitGroupUnitFromEnd(auto2AE26FD9_g, auto2AE26FD9_u);
            if (auto2AE26FD9_var == null) { break; }
            UnitRemove(auto2AE26FD9_var);
        }
        return ;
    }

    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    if ((UnitIsValid(lv_dropPod) == true)) {
        lv_dropPodLocation = UnitGetPosition(lv_dropPod);
        lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
        lv_subIndex = 1;
        lv_angleStart = 225.0;
        lv_angle = lv_angleStart;
        auto7DD6500F_g = lp_units;
        auto7DD6500F_u = UnitGroupCount(auto7DD6500F_g, c_unitCountAll);
        for (;; auto7DD6500F_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto7DD6500F_g, auto7DD6500F_u);
            if (lv_indexUnit == null) { break; }
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
            SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
            Wait(0.125, c_timeGame);
            UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
            libNtve_gf_ShowHideUnit(lv_indexUnit, true);
            libNtve_gf_PauseUnit(lv_indexUnit, false);
            lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
            UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
            if ((lv_subIndex == lv_countPerLine)) {
                lv_subIndex = 1;
                lv_angle = lv_angleStart;
                lv_distance -= 0.8;
            }
            else {
                lv_subIndex += 1;
                lv_angle += 10.0;
            }
        }
        UnitKill(lv_dropPod);
    }

}

void libWCMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto30FEF00B_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libWCMI_gf_WM_DropPod_LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto30FEF00B_val = lp_race;
    if (auto30FEF00B_val == libWCMI_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libWCMI_gf_WM_DropPod_Terran_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libWCMI_gv_wM_DropPod_TP_Location = lv_dropLocation;
            libWCMI_gv_wM_DropPod_TP_Units = lv_dropUnits;
            libWCMI_gv_wM_DropPod_TP_Player = lp_player;
            TriggerExecute(libWCMI_gt_WM_DropPod_Terran_DontWait, true, false);
        }
    }
    else if (auto30FEF00B_val == libWCMI_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libWCMI_gf_WM_DropPod_Zerg_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libWCMI_gv_wM_DropPod_TP_Location = lv_dropLocation;
            libWCMI_gv_wM_DropPod_TP_Units = lv_dropUnits;
            libWCMI_gv_wM_DropPod_TP_Player = lp_player;
            TriggerExecute(libWCMI_gt_WM_DropPod_Zerg_DontWait, true, false);
        }
    }
    else {
    }
}

void libWCMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool autoFAF09496_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libWCMI_gv_wM_DropPod_TP_ZergBuilding = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libWCMI_gf_WM_DropPod_LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoFAF09496_val = lp_waitDontWait;
    if (autoFAF09496_val == true) {
        libWCMI_gf_WM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoFAF09496_val == false) {
        libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_Trigger = null;
string auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
point auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
int auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_player;

void libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_buildingType = lp_buildingType;
    auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_landingPoint = lp_landingPoint;
    auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_player = lp_player;

    if (auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_Trigger == null) {
        auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_Trigger = TriggerCreate("auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_Trigger, false, false);
}

bool auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
    point lp_landingPoint = auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
    int lp_player = auto_libWCMI_gf_WM_DropPodCreateZergBuilding_DontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libWCMI_gf_WM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libWCMI_gf_WM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_dropPod;

    // Automatic Variable Declarations
    unitgroup auto5CF01D86_g;
    int auto5CF01D86_u;
    unit auto5CF01D86_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_dropPod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        UnitRemove(libWCMI_gv_wM_DropPod_TP_ZergBuilding);
        return ;
    }

    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        UnitRemove(libWCMI_gv_wM_DropPod_TP_ZergBuilding);
        return ;
    }

    auto5CF01D86_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CF01D86_u = UnitGroupCount(auto5CF01D86_g, c_unitCountAll);
    for (;; auto5CF01D86_u -= 1) {
        auto5CF01D86_var = UnitGroupUnitFromEnd(auto5CF01D86_g, auto5CF01D86_u);
        if (auto5CF01D86_var == null) { break; }
        if ((UnitGetType(auto5CF01D86_var) != "ZergDropPodLarge") && (auto5CF01D86_var != UnitLastCreated())) {
            if (((UnitGetOwner(auto5CF01D86_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(auto5CF01D86_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(auto5CF01D86_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(auto5CF01D86_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(auto5CF01D86_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(libWCMI_gv_wM_DropPod_TP_ZergBuilding, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_dropPod);
}

string libWCMI_gf_WM_DropPod_LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libWCMI_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, libWCMI_gf_WM_DropPod_LastDroppedUnitsDataTableName());
}

unit libWCMI_gf_WM_NexusBestWorkerRallyMineral (unit lp_nexus) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    unit lv_indexResource;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup autoEC5BF080_g;
    int autoEC5BF080_u;
    unitgroup auto956D9CE4_g;
    int auto956D9CE4_u;
    unitgroup auto226EA3E5_g;
    int auto226EA3E5_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_nexus), 10.0);
    lv_mineralGroup = UnitGroup(null, c_playerAny, lv_searchArea, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEC5BF080_g = lv_mineralGroup;
    autoEC5BF080_u = UnitGroupCount(autoEC5BF080_g, c_unitCountAll);
    for (;; autoEC5BF080_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(autoEC5BF080_g, autoEC5BF080_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) != "Minerals")) {
            UnitGroupRemove(lv_mineralGroup, lv_indexResource);
        }

    }
    auto956D9CE4_g = lv_mineralGroup;
    auto956D9CE4_u = UnitGroupCount(auto956D9CE4_g, c_unitCountAll);
    for (;; auto956D9CE4_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(auto956D9CE4_g, auto956D9CE4_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto226EA3E5_g = lv_mineralGroup;
        auto226EA3E5_u = UnitGroupCount(auto226EA3E5_g, c_unitCountAll);
        for (;; auto226EA3E5_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto226EA3E5_g, auto226EA3E5_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libWCMI_gf_SetWorkerRallyPointforNexus (unit lp_nexus) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = libWCMI_gf_WM_NexusBestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        if ((PlayerDifficulty(UnitGetOwner(lp_nexus)) == 1)) {
            UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 1), lv_bestMineral), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lv_bestMineral), c_orderQueueReplace);
        }
    }

}

void libWCMI_gf_SetWorkerRallyPointforNexus2 (unit lp_nexus) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = libWCMI_gf_WM_NexusBestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lv_bestMineral), c_orderQueueReplace);
    }

}

void libWCMI_gf_SetWorkerRallyPointsPlayersNexuses (int lp_player) {
    // Variable Declarations
    unitgroup lv_nexusGroup;

    // Automatic Variable Declarations
    unitgroup autoDA9B6FF0_g;
    int autoDA9B6FF0_u;
    unit autoDA9B6FF0_var;
    string auto2C52107B_val;

    // Variable Initialization
    lv_nexusGroup = UnitGroupEmpty();

    // Implementation
    lv_nexusGroup = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA9B6FF0_g = lv_nexusGroup;
    autoDA9B6FF0_u = UnitGroupCount(autoDA9B6FF0_g, c_unitCountAll);
    for (;; autoDA9B6FF0_u -= 1) {
        autoDA9B6FF0_var = UnitGroupUnitFromEnd(autoDA9B6FF0_g, autoDA9B6FF0_u);
        if (autoDA9B6FF0_var == null) { break; }
        auto2C52107B_val = UnitGetType(autoDA9B6FF0_var);
        if (auto2C52107B_val == "Nexus") {
            libWCMI_gf_SetWorkerRallyPointforNexus(autoDA9B6FF0_var);
        }
        else if (auto2C52107B_val == "CommandCenter") {
            libWCMI_gf_SetWorkerRallyPointforNexus2(autoDA9B6FF0_var);
        }
        else if (auto2C52107B_val == "OrbitalCommand") {
            libWCMI_gf_SetWorkerRallyPointforNexus2(autoDA9B6FF0_var);
        }
        else if (auto2C52107B_val == "PlanetaryFortress") {
            libWCMI_gf_SetWorkerRallyPointforNexus2(autoDA9B6FF0_var);
        }
        else {
        }
    }
}

void libWCMI_gf_WM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Variable Declarations
    text lv_tip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tip = UnitTypeGetName(UnitGetType(lp_unit));

    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    if ((UnitGetType(lp_unit) == "SupplyDepotLowered")) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_DF7AB916", "A", lv_tip);
        lv_tip = TextExpressionAssemble("Param/Expression/lib_WCMI_DF7AB916");
    }

    TextExpressionSetToken("Param/Expression/lib_WCMI_49C4F513", "A", lv_tip);
    lv_tip = TextExpressionAssemble("Param/Expression/lib_WCMI_49C4F513");
    UnitSetInfoTip(lp_unit, lv_tip);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libWCMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_WCMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_WCMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libWCMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_WCMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_WCMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libWCMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

void libWCMI_gf_BurrowUnburrowZergUnitGroup (unitgroup lp_unitGroup, int lp_burrowUnburrow) {
    // Automatic Variable Declarations
    unitgroup autoE783BF51_g;
    int autoE783BF51_u;
    unit autoE783BF51_var;
    string autoDFCA4B63_val;
    unitgroup autoB0B5B76D_g;
    int autoB0B5B76D_u;
    unit autoB0B5B76D_var;
    string auto210433CB_val;

    // Implementation
    if ((lp_burrowUnburrow == libWCMI_ge_BurrowUnburrowOption_Burrow)) {
        autoB0B5B76D_g = lp_unitGroup;
        autoB0B5B76D_u = UnitGroupCount(autoB0B5B76D_g, c_unitCountAll);
        for (;; autoB0B5B76D_u -= 1) {
            autoB0B5B76D_var = UnitGroupUnitFromEnd(autoB0B5B76D_g, autoB0B5B76D_u);
            if (autoB0B5B76D_var == null) { break; }
            auto210433CB_val = UnitGetType(autoB0B5B76D_var);
            if (auto210433CB_val == "SwarmHost") {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("MorphToSwarmHostBurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "SwarmHostSplitA") {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("MorphToSwarmHostSplitABurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "SwarmHostSplitB") {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("MorphToSwarmHostSplitBBurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "Lurker") {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "Impaler") {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("BurrowImpaler", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoB0B5B76D_var, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
            }
        }
    }
    else {
        autoE783BF51_g = lp_unitGroup;
        autoE783BF51_u = UnitGroupCount(autoE783BF51_g, c_unitCountAll);
        for (;; autoE783BF51_u -= 1) {
            autoE783BF51_var = UnitGroupUnitFromEnd(autoE783BF51_g, autoE783BF51_u);
            if (autoE783BF51_var == null) { break; }
            autoDFCA4B63_val = UnitGetType(autoE783BF51_var);
            if (autoDFCA4B63_val == "SwarmHostBurrowed") {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("MorphToSwarmHost", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "SwarmHostSplitABurrowed") {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("MorphToSwarmHostSplitA", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "SwarmHostSplitBBurrowed") {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("MorphToSwarmHostSplitB", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "LurkerBurrowed") {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "ImpalerBurrowed") {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("UnburrowImpaler", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoE783BF51_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            }
        }
    }
}

void libWCMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libWCMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libWCMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libWCMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto8ED25223_val;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libWCMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libWCMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libWCMI_ge_CacheResourceType_Solarite) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_WCMI_E1D6FEA3"), true);
        return ;
    }
    else {
    }
    libWCMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libWCMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Initialization

    // Implementation
    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libWCMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libWCMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_WCMI_261E2441", "A", StringToText(("Kicker_Protoss")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_WCMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libWCMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libWCMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_WCMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_WCMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_WCMI_A8624C75");
    }

    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    if ((lp_resourceType == libWCMI_ge_CacheResourceType_CustomResource)) {
    }

    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void libWCMI_gf_DisplayMissionObjectiveRewardFloatingText (point lp_location, string lp_objective) {
    // Variable Declarations
    int lv_zergPerItem;
    int lv_zergComplete;
    int lv_protossPerItem;
    int lv_protossComplete;
    int lv_creditsPerItem;
    int lv_creditsComplete;
    text lv_floatingText;
    int lv_objectiveAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zergPerItem = libWoLC_gf_MissionObjectiveRewards(lp_objective, "ZergResearch");
    lv_zergComplete = libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ZergResearch");
    lv_protossPerItem = libWoLC_gf_MissionObjectiveRewards(lp_objective, "ProtossResearch");
    lv_protossComplete = libWoLC_gf_MissionObjectiveRewards2(lp_objective, "ProtossResearch");
    lv_creditsPerItem = libWoLC_gf_MissionObjectiveRewards(lp_objective, "Credits");
    lv_creditsComplete = libWoLC_gf_MissionObjectiveRewards2(lp_objective, "Credits");

    // Implementation
    if (((lv_zergPerItem > 0) || (lv_zergComplete > 0))) {
        lv_objectiveAmount = lv_zergPerItem;
        lv_objectiveAmount += lv_zergComplete;
        TextExpressionSetToken("Param/Expression/lib_WCMI_6743CDD8", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_6743CDD8", "B", IntToText(lv_objectiveAmount));
        lv_floatingText = TextExpressionAssemble("Param/Expression/lib_WCMI_6743CDD8");
    }
    else if (((lv_protossPerItem > 0) || (lv_protossComplete > 0))) {
        lv_objectiveAmount = lv_protossPerItem;
        lv_objectiveAmount += lv_protossComplete;
        TextExpressionSetToken("Param/Expression/lib_WCMI_F3807F49", "A", StringToText(("Kicker_Protoss")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_F3807F49", "B", IntToText(lv_objectiveAmount));
        lv_floatingText = TextExpressionAssemble("Param/Expression/lib_WCMI_F3807F49");
    }
    else if (((lv_creditsPerItem > 0) || (lv_creditsComplete > 0))) {
        lv_objectiveAmount = lv_creditsPerItem;
        lv_objectiveAmount += lv_creditsComplete;
        TextExpressionSetToken("Param/Expression/lib_WCMI_33B580A2", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_WCMI_33B580A2", "B", IntToText(lv_objectiveAmount));
        lv_floatingText = TextExpressionAssemble("Param/Expression/lib_WCMI_33B580A2");
    }
    else if (true) {
        return ;
    }
    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(1), 100.0, 0.0);
    TextTagCreate(lv_floatingText, 24, lp_location, (PointGetHeight(lp_location)+2.0), true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

bool libWCMI_gf_WM_StartingWorkerAutoHarvestEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void libWCMI_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Automatic Variable Declarations
    unitgroup autoA8D4E691_g;
    int autoA8D4E691_u;
    unitgroup auto7A456887_g;
    int auto7A456887_u;
    unitgroup auto219ADB5D_g;
    int auto219ADB5D_u;
    unitgroup auto85EF0FC7_g;
    int auto85EF0FC7_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((libWCMI_gf_WM_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, 1, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((((PlayerRace(1) == "Zerg") && (TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) || ((PlayerRace(1) == "Terr") && (TechTreeUpgradeCount(1, "AutoHarvester", c_techCountQueuedOrBetter) > 0)) || ((PlayerRace(1) == "Prot") && (TechTreeUpgradeCount(1, "SOAAutoAssimilator", c_techCountQueuedOrBetter) > 0)))) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoA8D4E691_g = lv_unitGroupHarvestMinerals;
        autoA8D4E691_u = UnitGroupCount(autoA8D4E691_g, c_unitCountAll);
        for (;; autoA8D4E691_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoA8D4E691_g, autoA8D4E691_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto7A456887_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7A456887_u = UnitGroupCount(auto7A456887_g, c_unitCountAll);
            for (;; auto7A456887_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto7A456887_g, auto7A456887_u);
                if (lv_indexResource == null) { break; }
                if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto219ADB5D_g = lv_unitGroupHarvestGas;
        auto219ADB5D_u = UnitGroupCount(auto219ADB5D_g, c_unitCountAll);
        for (;; auto219ADB5D_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(auto219ADB5D_g, auto219ADB5D_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto85EF0FC7_g = UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85EF0FC7_u = UnitGroupCount(auto85EF0FC7_g, c_unitCountAll);
            for (;; auto85EF0FC7_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto85EF0FC7_g, auto85EF0FC7_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

}

text libWCMI_gf_UnitAbilityHotkeyText (string lp_unitType, string lp_abilityButton) {
    // Variable Declarations
    int lv_row;
    int lv_column;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int autoCD238B57_ae;
    const int autoCD238B57_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD238B57_ae = CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny);
    lv_buttonIndex = 0;
    for ( ; ( (autoCD238B57_ai >= 0 && lv_buttonIndex <= autoCD238B57_ae) || (autoCD238B57_ai < 0 && lv_buttonIndex >= autoCD238B57_ae) ) ; lv_buttonIndex += autoCD238B57_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Face", c_playerAny) == (lp_abilityButton))) {
            lv_row = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Row", c_playerAny));
            lv_column = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Column", c_playerAny));
            TextExpressionSetToken("Param/Expression/lib_WCMI_7545F4E8", "UNIT", StringToText((lp_unitType)));
            TextExpressionSetToken("Param/Expression/lib_WCMI_7545F4E8", "BTN", StringToText((lp_abilityButton)));
            TextExpressionSetToken("Param/Expression/lib_WCMI_7545F4E8", "ROW", IntToText(lv_row));
            TextExpressionSetToken("Param/Expression/lib_WCMI_7545F4E8", "COL", IntToText(lv_column));
            return TextExpressionAssemble("Param/Expression/lib_WCMI_7545F4E8");
        }

    }
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        return StringExternal("Param/Value/lib_WCMI_A53A2400");
    }

    return StringToText("");
}

void libWCMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto859F408A_val;

    // Implementation
    if ((lp_formatOrNot == libWCMI_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto859F408A_val = lp_messageType;
        if (auto859F408A_val == libWCMI_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_64DF7A24", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_64DF7A24"));
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_C1624255", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_C1624255"));
            SoundPlay(SoundLink("TUISecret", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_A49EDD0B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_A49EDD0B"));
            SoundPlay(SoundLink("UI_TerranNewUnitAcquired", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_BA0BF873", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_BA0BF873"));
            SoundPlay(SoundLink("UI_TerranNewUnitAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_39320B7C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_39320B7C"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_D6A0DA61", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_D6A0DA61"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_19CBF466", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_19CBF466"));
            SoundPlay(SoundLink("UI_ZergWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libWCMI_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_WCMI_A4179B16", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_WCMI_A4179B16"));
            SoundPlay(SoundLink("UI_TerranMissionFailed", 1), lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

void libWCMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;

    // Automatic Variable Declarations
    bool autoF871CA08_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    autoF871CA08_val = lp_objectiveType;
    if (autoF871CA08_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
    }
    else if (autoF871CA08_val == false) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.6;
        lv_model = "PingBonus";
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, 270.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libWCMI_gt_VoidPingSound, true, false);
}

trigger auto_libWCMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libWCMI_gf_PingMinimapCampaign_lp_players;
point auto_libWCMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libWCMI_gf_PingMinimapCampaign_lp_dur;
color auto_libWCMI_gf_PingMinimapCampaign_lp_color;

void libWCMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libWCMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libWCMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libWCMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libWCMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libWCMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libWCMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libWCMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libWCMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libWCMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libWCMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libWCMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libWCMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libWCMI_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup autoC51461E9_g;
    int autoC51461E9_var;
    string autoC47256CC_val;

    // Implementation
    autoC51461E9_g = lp_players;
    autoC51461E9_var = -1;
    while (true) {
        autoC51461E9_var = PlayerGroupNextPlayer(autoC51461E9_g, autoC51461E9_var);
        if (autoC51461E9_var < 0) { break; }
        autoC47256CC_val = PlayerRace(autoC51461E9_var);
        if (autoC47256CC_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoC51461E9_var), 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoC51461E9_var), 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(autoC51461E9_var), 100.0, 0.0);
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(lp_players, "PingAlert", lp_pos, lp_color, lp_dur, 270.0);
    Wait(lp_dur, c_timeGame);
    PingDestroy(PingLastCreated());
    return true;
}

string libWCMI_gf_WM_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoCDEF28CD_val;
    int autoBEC58E6C_val;
    int auto993B9915_val;
    int auto1B271D82_val;

    // Variable Initialization

    // Implementation
    autoCDEF28CD_val = lp_size;
    if (autoCDEF28CD_val == libWCMI_ge_CampaginReticleSize_Large) {
        autoBEC58E6C_val = lp_type;
        if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoBEC58E6C_val == libWCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libWCMI_ge_CampaginReticleSize_Medium) {
        auto993B9915_val = lp_type;
        if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto993B9915_val == libWCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libWCMI_ge_CampaginReticleSize_Small) {
        auto1B271D82_val = lp_type;
        if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1B271D82_val == libWCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libWCMI_gf_WM_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto4C012C4E_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto4C012C4E_val = lp_type;
    if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto4C012C4E_val == libWCMI_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libWCMI_gf_WM_ReticleApplyTint (actor lp_reticle, int lp_type) {
    // Automatic Variable Declarations
    int autoF8A9C4D8_val;

    // Implementation
    autoF8A9C4D8_val = lp_type;
    if (autoF8A9C4D8_val == libWCMI_ge_CampaginReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (autoF8A9C4D8_val == libWCMI_ge_CampaginReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (autoF8A9C4D8_val == libWCMI_ge_CampaginReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void libWCMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libWCMI_gf_WM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    libWCMI_gf_WM_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libWCMI_gf_WM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_WCMI_C1B831B2", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_WCMI_C1B831B2", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_WCMI_C1B831B2"), 24, lp_location, 1.0, true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libWCMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libWCMI_gf_WM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    libWCMI_gf_WM_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libWCMI_gf_WM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_WCMI_242FDFAD", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_WCMI_242FDFAD", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_WCMI_242FDFAD"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 1.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

text libWCMI_gf_FormatTextWithReplacement (text lp_text, text lp_replacement1, text lp_replacement2, text lp_replacement3, text lp_replacement4) {
    // Variable Declarations
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_result = lp_text;
    if (((lp_replacement1 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_WCMI_19D2DFD7"), lp_replacement1, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement2 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_WCMI_533A7AAD"), lp_replacement2, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement3 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_WCMI_F9C95DE7"), lp_replacement3, c_stringReplaceAll, c_stringCase);
    }

    if (((lp_replacement4 != null) == true)) {
        lv_result = TextReplaceWord(lv_result, StringExternal("Param/Value/lib_WCMI_533821B5"), lp_replacement4, c_stringReplaceAll, c_stringCase);
    }

    return lv_result;
}

void libWCMI_gf_WM_VoidCampaignMissionInit () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto0BA529BF_g;
    int auto0BA529BF_u;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libWCMI_gv_wM_CombatTimer = TimerCreate();
    TimerStart(libWCMI_gv_wM_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    libWCMI_gf_DifficultySetting(PlayerDifficulty(1));
    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true)) {
        UISetGameMenuItemVisible(PlayerGroupSingle(1), c_gameMenuDialogRestartDifficultyPulldown, true);
    }

    auto0BA529BF_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0BA529BF_u = UnitGroupCount(auto0BA529BF_g, c_unitCountAll);
    for (;; auto0BA529BF_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto0BA529BF_g, auto0BA529BF_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetType(lv_indexUnit) != "OrbitalCommand")) {
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropEnergyPercent, 100.0);
        }

    }
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1) && ((libWoLC_gf_CurrentMap() == "TZeratul02") || (libWoLC_gf_CurrentMap() == "TZeratul03") || (libWoLC_gf_CurrentMap() == "TZeratul04"))) {
        TriggerExecute(libWCMI_gt_WM_PlayerNeedPylon, true, false);
    }

    TriggerExecute(libWCMI_gt_WM_CampaignUnit, true, false);
    TriggerExecute(libWCUI_gt_PS_ArmyButtonMissionInit, true, false);
    if ((libLotv_gf_DifficultyValueInt2(1, 0, 0, 0) == 1)) {
        TechTreeUpgradeAddLevel(1, "VoidCasualRallyBlock", 1);
    }

    if ((PlayerHasReward(1, "ThorCE") == true)) {
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(1, "ThorCE", true);
    }

}

void libWCMI_gf_DifficultySetting (int lp_difficulty) {
    // Automatic Variable Declarations
    int autoBB45CCF8_val;

    // Implementation
    autoBB45CCF8_val = lp_difficulty;
    if (autoBB45CCF8_val == 1) {
        GameSetSpeedValueMinimum(c_gameSpeedSlow);
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Casual", "DamageTakenRatio", 1) * 100.0)));
        TechTreeUpgradeAddLevel(1, "SuperiorWarpGates", 1);
    }
    else if (autoBB45CCF8_val == 2) {
        GameSetSpeedValueMinimum(c_gameSpeedNormal);
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Normal", "DamageTakenRatio", 1) * 100.0)));
        TechTreeUpgradeAddLevel(1, "SuperiorWarpGates", 1);
    }
    else if (autoBB45CCF8_val == 3) {
        GameSetSpeedValueMinimum(c_gameSpeedFast);
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Hard", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoBB45CCF8_val == 4) {
        GameSetSpeedValueMinimum(c_gameSpeedFaster);
        PlayerModifyPropertyInt(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Brutal", "DamageTakenRatio", 1) * 100.0)));
    }
    else {
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: WM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto806AEE93_g;
    int auto806AEE93_var;
    playergroup autoC67544CC_g;
    int autoC67544CC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libWCMI_gv_wM_ScreenMode = c_uiModeLetterboxed;
    }

    auto806AEE93_g = PlayerGroupAll();
    auto806AEE93_var = -1;
    while (true) {
        auto806AEE93_var = PlayerGroupNextPlayer(auto806AEE93_g, auto806AEE93_var);
        if (auto806AEE93_var < 0) { break; }
        PlayerScoreValueEnableAll(auto806AEE93_var, false);
    }
    autoC67544CC_g = PlayerGroupAll();
    autoC67544CC_var = -1;
    while (true) {
        autoC67544CC_var = PlayerGroupNextPlayer(autoC67544CC_g, autoC67544CC_var);
        if (autoC67544CC_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoC67544CC_var, "CinematicMode", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CinematicModeOn_Init () {
    libWCMI_gt_WM_CinematicModeOn = TriggerCreate("libWCMI_gt_WM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libWCMI_gt_WM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    playergroup auto8E4FBCB3_g;
    int auto8E4FBCB3_var;
    playergroup autoB4558D44_g;
    int autoB4558D44_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        if ((UIFrameVisible(1, c_syncFrameTypeConsolePanel) == true)) {
            libWCMI_gv_wM_ScreenMode = c_uiModeConsole;
        }
        else {
            libWCMI_gv_wM_ScreenMode = c_uiModeFullscreen;
        }
    }
    else {
        libWCMI_gv_wM_ScreenMode = c_uiModeLetterboxed;
    }
    auto8E4FBCB3_g = PlayerGroupAll();
    auto8E4FBCB3_var = -1;
    while (true) {
        auto8E4FBCB3_var = PlayerGroupNextPlayer(auto8E4FBCB3_g, auto8E4FBCB3_var);
        if (auto8E4FBCB3_var < 0) { break; }
        PlayerScoreValueEnableAll(auto8E4FBCB3_var, true);
    }
    autoB4558D44_g = PlayerGroupAll();
    autoB4558D44_var = -1;
    while (true) {
        autoB4558D44_var = PlayerGroupNextPlayer(autoB4558D44_g, autoB4558D44_var);
        if (autoB4558D44_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoB4558D44_var, "CinematicMode", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CinematicModeOff_Init () {
    libWCMI_gt_WM_CinematicModeOff = TriggerCreate("libWCMI_gt_WM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libWCMI_gt_WM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Attack
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_DiamondbackAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "DiamondbackAttackTrackerUnitSet", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_DiamondbackAttack_Init () {
    libWCMI_gt_DiamondbackAttack = TriggerCreate("libWCMI_gt_DiamondbackAttack_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttack, null, AbilityCommand("DiamondbackAttack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Attack Scan
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_DiamondbackAttackScan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == false))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "DiamondbackAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_DiamondbackAttackScan_Init () {
    libWCMI_gt_DiamondbackAttackScan = TriggerCreate("libWCMI_gt_DiamondbackAttackScan_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackScan, null, AbilityCommand("DiamondbackAttack", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackScan, null, AbilityCommand("DiamondbackMove", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Attack Stop
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_DiamondbackAttackStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "DiamondbackAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_DiamondbackAttackStop_Init () {
    libWCMI_gt_DiamondbackAttackStop = TriggerCreate("libWCMI_gt_DiamondbackAttackStop_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackStop, null, AbilityCommand("DiamondbackStop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Attack Chase Interrupted
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_DiamondbackAttackChaseInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "Diamondback"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_caster, "DiamondbackChasing") == true))) {
            return false;
        }

        if (!(((OrderGetAbilityCommand(lv_order) != AbilityCommand("DiamondbackAttack", 0)) || (UnitIsAlive(lv_target) == false)))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "DiamondbackChasingRB", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_DiamondbackAttackChaseInterrupted_Init () {
    libWCMI_gt_DiamondbackAttackChaseInterrupted = TriggerCreate("libWCMI_gt_DiamondbackAttackChaseInterrupted_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackAttack", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackAttack", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackAttack", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackMove", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackMove", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackMove", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackMove", 3));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackMove", 4));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackStop", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackStop", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackStop", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_DiamondbackAttackChaseInterrupted, null, AbilityCommand("DiamondbackStop", 3));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_BattlecruiserAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerUnitSet", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_BattlecruiserAttack_Init () {
    libWCMI_gt_BattlecruiserAttack = TriggerCreate("libWCMI_gt_BattlecruiserAttack_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttack, null, AbilityCommand("BattlecruiserAttack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Scan
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_BattlecruiserAttackScan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == false))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_BattlecruiserAttackScan_Init () {
    libWCMI_gt_BattlecruiserAttackScan = TriggerCreate("libWCMI_gt_BattlecruiserAttackScan_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackScan, null, AbilityCommand("BattlecruiserAttack", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackScan, null, AbilityCommand("BattlecruiserMove", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Stop
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_BattlecruiserAttackStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_BattlecruiserAttackStop_Init () {
    libWCMI_gt_BattlecruiserAttackStop = TriggerCreate("libWCMI_gt_BattlecruiserAttackStop_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackStop, null, AbilityCommand("BattlecruiserStop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Ability Used
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_BattlecruiserAttackAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_caster) == "Battlecruiser") || (UnitGetType(lv_caster) == "DukesRevenge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_BattlecruiserAttackAbilityUsed_Init () {
    libWCMI_gt_BattlecruiserAttackAbilityUsed = TriggerCreate("libWCMI_gt_BattlecruiserAttackAbilityUsed_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_BattlecruiserAttackAbilityUsed, null, AbilityCommand("Hyperjump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Chase Interrupted
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_BattlecruiserAttackChaseInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_caster, "BattlecruiserChasing") == true))) {
            return false;
        }

        if (!(((UnitGetType(lv_caster) == "Battlecruiser") || (UnitGetType(lv_caster) == "DukesRevenge")))) {
            return false;
        }

        if (!(((OrderGetAbilityCommand(lv_order) != AbilityCommand("BattlecruiserAttack", 0)) || (UnitIsAlive(lv_target) == false)))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserChasingRB", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_BattlecruiserAttackChaseInterrupted_Init () {
    libWCMI_gt_BattlecruiserAttackChaseInterrupted = TriggerCreate("libWCMI_gt_BattlecruiserAttackChaseInterrupted_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserAttack", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserAttack", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserAttack", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserMove", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserMove", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserMove", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserMove", 3));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserMove", 4));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserStop", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserStop", 1));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserStop", 2));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("BattlecruiserStop", 3));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("Yamato", 0));
    TriggerAddEventUnitOrder(libWCMI_gt_BattlecruiserAttackChaseInterrupted, null, AbilityCommand("Hyperjump", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra-Capacitors
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_UltraCapacitors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_research;
    string lv_affectedUnitId;
    string lv_weaponId;

    // Automatic Variable Declarations
    int auto04499A8E_catalog;
    string auto04499A8E_entry;
    string auto04499A8E_fieldPath;
    int auto04499A8E_player;
    int auto04499A8E_i;
    int auto173AB5DF_catalog;
    string auto173AB5DF_entry;
    string auto173AB5DF_field;
    string auto173AB5DF_scopeField;
    int auto173AB5DF_player;
    int auto173AB5DF_i;
    int auto21061E49_catalog;
    string auto21061E49_entry;
    string auto21061E49_field;
    string auto21061E49_scopeField;
    int auto21061E49_player;
    int auto21061E49_i;

    // Variable Initialization
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_affectedUnitId = "";
    lv_weaponId = "";

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "UltraCapacitors", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((lv_research == "TerranInfantryWeaponsLevel1") || (lv_research == "TerranInfantryWeaponsLevel2") || (lv_research == "TerranInfantryWeaponsLevel3") || (lv_research == "TerranVehicleAndShipWeaponsLevel1") || (lv_research == "TerranVehicleAndShipWeaponsLevel2") || (lv_research == "TerranVehicleAndShipWeaponsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto04499A8E_catalog = c_gameCatalogUpgrade;
    auto04499A8E_entry = lv_research;
    auto04499A8E_fieldPath = "AffectedUnitArray";
    auto04499A8E_player = EventPlayer();
    auto04499A8E_i = 0;
    for ( ; auto04499A8E_i <= CatalogFieldValueCount(c_gameCatalogUpgrade,auto04499A8E_entry,auto04499A8E_fieldPath,auto04499A8E_player)-1 ; auto04499A8E_i += 1 ) {
        lv_affectedUnitId = CatalogFieldValueGet(c_gameCatalogUpgrade,auto04499A8E_entry,auto04499A8E_fieldPath+"["+IntToString(auto04499A8E_i)+"]",auto04499A8E_player);
        auto173AB5DF_catalog = c_gameCatalogUnit;
        auto173AB5DF_entry = lv_affectedUnitId;
        auto173AB5DF_field = "WeaponArray";
        auto173AB5DF_scopeField = "Link";
        auto173AB5DF_player = EventPlayer();
        auto173AB5DF_i = 0;
        for ( ; auto173AB5DF_i <= CatalogFieldValueCount(c_gameCatalogUnit,auto173AB5DF_entry,auto173AB5DF_field,auto173AB5DF_player)-1 ; auto173AB5DF_i += 1 ) {
            lv_weaponId = CatalogFieldValueGet(c_gameCatalogUnit,auto173AB5DF_entry,auto173AB5DF_field+"["+IntToString(auto173AB5DF_i)+"]."+auto173AB5DF_scopeField,auto173AB5DF_player);
            CatalogFieldValueModify(c_gameCatalogWeapon, lv_weaponId, "RateMultiplier", EventPlayer(), "0.05", c_upgradeOperationAdd);
        }
        auto21061E49_catalog = c_gameCatalogUnit;
        auto21061E49_entry = lv_affectedUnitId;
        auto21061E49_field = "EquipmentArray";
        auto21061E49_scopeField = "Weapon";
        auto21061E49_player = EventPlayer();
        auto21061E49_i = 0;
        for ( ; auto21061E49_i <= CatalogFieldValueCount(c_gameCatalogUnit,auto21061E49_entry,auto21061E49_field,auto21061E49_player)-1 ; auto21061E49_i += 1 ) {
            lv_weaponId = CatalogFieldValueGet(c_gameCatalogUnit,auto21061E49_entry,auto21061E49_field+"["+IntToString(auto21061E49_i)+"]."+auto21061E49_scopeField,auto21061E49_player);
            CatalogFieldValueModify(c_gameCatalogWeapon, lv_weaponId, "RateMultiplier", EventPlayer(), "0.05", c_upgradeOperationAdd);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_UltraCapacitors_Init () {
    libWCMI_gt_UltraCapacitors = TriggerCreate("libWCMI_gt_UltraCapacitors_Func");
    TriggerAddEventUnitResearchProgress(libWCMI_gt_UltraCapacitors, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vanadium Plating
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_VanadiumPlating_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_research;
    string lv_affectedUnitId;

    // Automatic Variable Declarations
    int autoC666FD83_catalog;
    string autoC666FD83_entry;
    string autoC666FD83_fieldPath;
    int autoC666FD83_player;
    int autoC666FD83_i;

    // Variable Initialization
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_affectedUnitId = "";

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "VanadiumPlating", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((lv_research == "TerranInfantryArmorsLevel1") || (lv_research == "TerranInfantryArmorsLevel2") || (lv_research == "TerranInfantryArmorsLevel3") || (lv_research == "TerranVehicleAndShipArmorsLevel1") || (lv_research == "TerranVehicleAndShipArmorsLevel2") || (lv_research == "TerranVehicleAndShipArmorsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC666FD83_catalog = c_gameCatalogUpgrade;
    autoC666FD83_entry = lv_research;
    autoC666FD83_fieldPath = "AffectedUnitArray";
    autoC666FD83_player = EventPlayer();
    autoC666FD83_i = 0;
    for ( ; autoC666FD83_i <= CatalogFieldValueCount(c_gameCatalogUpgrade,autoC666FD83_entry,autoC666FD83_fieldPath,autoC666FD83_player)-1 ; autoC666FD83_i += 1 ) {
        lv_affectedUnitId = CatalogFieldValueGet(c_gameCatalogUpgrade,autoC666FD83_entry,autoC666FD83_fieldPath+"["+IntToString(autoC666FD83_i)+"]",autoC666FD83_player);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_affectedUnitId, "LifeMax", EventPlayer(), "1.05", c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_affectedUnitId, "LifeStart", EventPlayer(), "1.05", c_upgradeOperationMultiply);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_VanadiumPlating_Init () {
    libWCMI_gt_VanadiumPlating = TriggerCreate("libWCMI_gt_VanadiumPlating_Func");
    TriggerAddEventUnitResearchProgress(libWCMI_gt_VanadiumPlating, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cellular Reactor
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_CellularReactor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_unit;

    // Automatic Variable Declarations
    int auto819FF903_catalog;
    int auto819FF903_i;
    string auto04DCBE11_userType;
    string auto04DCBE11_instance;
    string auto04DCBE11_field;
    int auto04DCBE11_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((EventUpgradeName() == "Kit@CellularReactors"))) {
            return false;
        }

        if (!((EventUpgradeLevelDelta() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto819FF903_catalog = c_gameCatalogArmyCategory;
    auto819FF903_i = 1;
    for ( ; auto819FF903_i <= CatalogEntryCount(c_gameCatalogArmyCategory) ; auto819FF903_i += 1 ) {
        lv_armyCategory = CatalogEntryGet(auto819FF903_catalog, auto819FF903_i);
        lv_unit = UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_armyCategory, "Unit", EventPlayer()));
        libWCMI_gf_ApplyCellularReactor(lv_unit, EventPlayer());
        auto04DCBE11_userType = "TechUnit";
        auto04DCBE11_instance = libWoLC_gf_WC_TechUnitOfArmyCategory(lv_armyCategory);
        auto04DCBE11_field = "Variants";
        auto04DCBE11_i = 1;
        for ( ; auto04DCBE11_i <= UserDataFieldValueCount(auto04DCBE11_userType,auto04DCBE11_field) ; auto04DCBE11_i += 1 ) {
            lv_unit = UserDataGetUnit(auto04DCBE11_userType,auto04DCBE11_instance,auto04DCBE11_field, auto04DCBE11_i);
            libWCMI_gf_ApplyCellularReactor(lv_unit, EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_CellularReactor_Init () {
    libWCMI_gt_CellularReactor = TriggerCreate("libWCMI_gt_CellularReactor_Func");
    TriggerAddEventUpgradeLevelChanged(libWCMI_gt_CellularReactor, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regenerative Bio-Steel
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_RegenerativeBioSteel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_unit;

    // Automatic Variable Declarations
    int autoC3240E03_catalog;
    int autoC3240E03_i;
    string auto618714DF_userType;
    string auto618714DF_instance;
    string auto618714DF_field;
    int auto618714DF_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((EventUpgradeName() == "Kit@RegenerativeBioSteel"))) {
            return false;
        }

        if (!((EventUpgradeLevelDelta() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3240E03_catalog = c_gameCatalogArmyCategory;
    autoC3240E03_i = 1;
    for ( ; autoC3240E03_i <= CatalogEntryCount(c_gameCatalogArmyCategory) ; autoC3240E03_i += 1 ) {
        lv_armyCategory = CatalogEntryGet(autoC3240E03_catalog, autoC3240E03_i);
        lv_unit = UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_armyCategory, "Unit", EventPlayer()));
        libWCMI_gf_ApplyRegenerativeBioSteel(lv_unit, EventPlayer());
        auto618714DF_userType = "TechUnit";
        auto618714DF_instance = libWoLC_gf_WC_TechUnitOfArmyCategory(lv_armyCategory);
        auto618714DF_field = "Variants";
        auto618714DF_i = 1;
        for ( ; auto618714DF_i <= UserDataFieldValueCount(auto618714DF_userType,auto618714DF_field) ; auto618714DF_i += 1 ) {
            lv_unit = UserDataGetUnit(auto618714DF_userType,auto618714DF_instance,auto618714DF_field, auto618714DF_i);
            libWCMI_gf_ApplyRegenerativeBioSteel(lv_unit, EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_RegenerativeBioSteel_Init () {
    libWCMI_gt_RegenerativeBioSteel = TriggerCreate("libWCMI_gt_RegenerativeBioSteel_Func");
    TriggerAddEventUpgradeLevelChanged(libWCMI_gt_RegenerativeBioSteel, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction (Refinery Hack)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AdvancedConstructionRefineryHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    abilcmd lv_ability;
    unit lv_caster;
    unit lv_target;
    int lv_sCVsCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_ability = OrderGetAbilityCommand(lv_order);
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(lv_order);

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "AdvancedConstruction", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "AutoHarvester", c_techCountCompleteOnly) == 0))) {
            return false;
        }

        if (!((lv_ability == AbilityCommand("TerranBuild", 2)))) {
            return false;
        }

        if (!((UnitGetType(lv_target) == "Refinery"))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_target, EventPlayer(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVsCount = DataTableGetInt(true, ("Kit_AutoBuild_Refinery_" + IntToString(UnitGetTag(lv_target))));
    if ((lv_sCVsCount < 2)) {
        UnitIssueOrder(lv_caster, OrderTargetingUnit(null, lv_target), c_orderQueueReplace);
        DataTableSetInt(true, ("Kit_AutoBuild_Refinery_" + IntToString(UnitGetTag(lv_target))), (lv_sCVsCount + 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AdvancedConstructionRefineryHack_Init () {
    libWCMI_gt_AdvancedConstructionRefineryHack = TriggerCreate("libWCMI_gt_AdvancedConstructionRefineryHack_Func");
    TriggerAddEventUnitOrder(libWCMI_gt_AdvancedConstructionRefineryHack, null, AbilityCommand("", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction (Auto)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AdvancedConstructionAuto_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCV;
    unit lv_target;
    string lv_targetType;
    order lv_order;
    int lv_sCVsCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sCV = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_targetType = UnitGetType(lv_target);

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_order = OrderTargetingUnit(null, lv_target);
    if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
        UnitIssueOrder(lv_sCV, lv_order, c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AdvancedConstructionAuto_Init () {
    libWCMI_gt_AdvancedConstructionAuto = TriggerCreate("libWCMI_gt_AdvancedConstructionAuto_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_AdvancedConstructionAuto, null, AbilityCommand("Kit@AdvancedConstructionAuto", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GlobalUpgrade
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_GlobalUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1B6263AA_ae = 15;
    const int auto1B6263AA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (auto1B6263AA_ai >= 0 && lv_i <= auto1B6263AA_ae) || (auto1B6263AA_ai < 0 && lv_i >= auto1B6263AA_ae) ) ; lv_i += auto1B6263AA_ai ) {
        TechTreeUpgradeAddLevel(lv_i, "VoidStoryUnitGlobalUpgrade", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_GlobalUpgrade_Init () {
    libWCMI_gt_GlobalUpgrade = TriggerCreate("libWCMI_gt_GlobalUpgrade_Func");
    TriggerAddEventMapInit(libWCMI_gt_GlobalUpgrade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_HandleUseDeepShadows
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_HandleUseDeepShadows_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6304B951_g;
    int auto6304B951_u;
    unit auto6304B951_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6304B951_g = UnitGroup("DarkTemplar", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6304B951_u = UnitGroupCount(auto6304B951_g, c_unitCountAll);
    for (;; auto6304B951_u -= 1) {
        auto6304B951_var = UnitGroupUnitFromEnd(auto6304B951_g, auto6304B951_u);
        if (auto6304B951_var == null) { break; }
        if ((UnitHasBehavior2(auto6304B951_var, "DarkTemplarChampionDarkReinforcementsTimedLife") == true)) {
            UnitBehaviorAdd(auto6304B951_var, "DeepShadows", auto6304B951_var, 1);
        }

    }
    UnitBehaviorAdd(EventUnit(), "DeepShadows", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_HandleUseDeepShadows_Init () {
    libWCMI_gt_WM_HandleUseDeepShadows = TriggerCreate("libWCMI_gt_WM_HandleUseDeepShadows_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_WM_HandleUseDeepShadows, null, AbilityCommand("DarkTemplarChampionDeepShadows", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_HandleUseAlarakAvatar
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_HandleUseAlarakAvatar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_AddAlarakAvatarUpgrade(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_HandleUseAlarakAvatar_Init () {
    libWCMI_gt_WM_HandleUseAlarakAvatar = TriggerCreate("libWCMI_gt_WM_HandleUseAlarakAvatar_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_WM_HandleUseAlarakAvatar, null, AbilityCommand("AlarakAvatar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_HandleAlarakAvatarFinal
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_HandleAlarakAvatarFinal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_RemoveAlarakAvatarUpgrade(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_HandleAlarakAvatarFinal_Init () {
    libWCMI_gt_WM_HandleAlarakAvatarFinal = TriggerCreate("libWCMI_gt_WM_HandleAlarakAvatarFinal_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_WM_HandleAlarakAvatarFinal, c_playerAny, "AlarakAvatarFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 4
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 4.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback4_Init () {
    libWCMI_gt_AlarakKnockback4 = TriggerCreate("libWCMI_gt_AlarakKnockback4_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback4, c_playerAny, "AlarakKnockbackBy4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 5
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback5_Init () {
    libWCMI_gt_AlarakKnockback5 = TriggerCreate("libWCMI_gt_AlarakKnockback5_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback5, c_playerAny, "AlarakKnockbackBy5");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 6
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 6.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback6_Init () {
    libWCMI_gt_AlarakKnockback6 = TriggerCreate("libWCMI_gt_AlarakKnockback6_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback6, c_playerAny, "AlarakKnockbackBy6");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 7
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 7.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback7_Init () {
    libWCMI_gt_AlarakKnockback7 = TriggerCreate("libWCMI_gt_AlarakKnockback7_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback7, c_playerAny, "AlarakKnockbackBy7");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 8
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 8.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback8_Init () {
    libWCMI_gt_AlarakKnockback8 = TriggerCreate("libWCMI_gt_AlarakKnockback8_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback8, c_playerAny, "AlarakKnockbackBy8");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 9
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 9.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback9_Init () {
    libWCMI_gt_AlarakKnockback9 = TriggerCreate("libWCMI_gt_AlarakKnockback9_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback9, c_playerAny, "AlarakKnockbackBy9");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 10
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 10.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback10_Init () {
    libWCMI_gt_AlarakKnockback10 = TriggerCreate("libWCMI_gt_AlarakKnockback10_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback10, c_playerAny, "AlarakKnockbackBy10");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 11
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 11.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback11_Init () {
    libWCMI_gt_AlarakKnockback11 = TriggerCreate("libWCMI_gt_AlarakKnockback11_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback11, c_playerAny, "AlarakKnockbackBy11");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Knockback 12
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AlarakKnockback12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AlarakKnockbackTriggerOverride") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AlarakTriggerUnitKnockback", libWCMI_gf_AlarakKnockbackOffsetFindPoint(lv_angle, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 12.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AlarakKnockback12_Init () {
    libWCMI_gt_AlarakKnockback12 = TriggerCreate("libWCMI_gt_AlarakKnockback12_Func");
    TriggerAddEventPlayerEffectUsed(libWCMI_gt_AlarakKnockback12, c_playerAny, "AlarakKnockbackBy12");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fenix Charge
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_FenixCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int auto5EA436F8_ae = 14;
    const int auto5EA436F8_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 10.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto5EA436F8_ai >= 0 && lv_i <= auto5EA436F8_ae) || (auto5EA436F8_ai < 0 && lv_i >= auto5EA436F8_ae) ) ; lv_i += auto5EA436F8_ai ) {
        libWCMI_gv_fenixChargeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libWCMI_gv_fenixChargeFacing < (lv_facing - 90.0)) && (libWCMI_gv_fenixChargeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "FenixChargeSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libWCMI_gv_fenixChargeFacing > (lv_facing + 90.0)) && (libWCMI_gv_fenixChargeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "FenixChargeSpeed", 1);
                    break;
                }

            }
            else {
                if (((libWCMI_gv_fenixChargeFacing > (lv_facing + 90.0)) || (libWCMI_gv_fenixChargeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "FenixChargeSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_FenixCharge_Init () {
    libWCMI_gt_FenixCharge = TriggerCreate("libWCMI_gt_FenixCharge_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_FenixCharge, null, AbilityCommand("FenixCharge", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int autoABE5947F_ae = 14;
    const int autoABE5947F_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoABE5947F_ai >= 0 && lv_i <= autoABE5947F_ae) || (autoABE5947F_ai < 0 && lv_i >= autoABE5947F_ae) ) ; lv_i += autoABE5947F_ai ) {
        libWCMI_gv_kerriganPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libWCMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)) && (libWCMI_gv_kerriganPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libWCMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) && (libWCMI_gv_kerriganPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libWCMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) || (libWCMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_KerriganPsiStrike_Init () {
    libWCMI_gt_KerriganPsiStrike = TriggerCreate("libWCMI_gt_KerriganPsiStrike_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_KerriganPsiStrike, null, AbilityCommand("PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Astral Shift
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_KerriganAstralShift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int autoA7FCA599_ae = 14;
    const int autoA7FCA599_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 12.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoA7FCA599_ai >= 0 && lv_i <= autoA7FCA599_ae) || (autoA7FCA599_ai < 0 && lv_i >= autoA7FCA599_ae) ) ; lv_i += autoA7FCA599_ai ) {
        libWCMI_gv_kerriganAstralShiftFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libWCMI_gv_kerriganAstralShiftFacing < (lv_facing - 90.0)) && (libWCMI_gv_kerriganAstralShiftFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "KerriganEpilogue03LineDashAttackSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libWCMI_gv_kerriganAstralShiftFacing > (lv_facing + 90.0)) && (libWCMI_gv_kerriganAstralShiftFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "KerriganEpilogue03LineDashAttackSpeed", 1);
                    break;
                }

            }
            else {
                if (((libWCMI_gv_kerriganAstralShiftFacing > (lv_facing + 90.0)) || (libWCMI_gv_kerriganAstralShiftFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "KerriganEpilogue03LineDashAttackSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_KerriganAstralShift_Init () {
    libWCMI_gt_KerriganAstralShift = TriggerCreate("libWCMI_gt_KerriganAstralShift_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_KerriganAstralShift, null, AbilityCommand("KerriganEpilogue03LineDashAttack", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extinction
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_Extinction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(UnitGetOwner(EventUnit()), RegionEntireMap(), 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_Extinction_Init () {
    libWCMI_gt_Extinction = TriggerCreate("libWCMI_gt_Extinction_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_Extinction, null, AbilityCommand("KerriganEpilogue03Extinction", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StrikeAmon
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_StrikeAmon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_startingPoint;
    point lv_targetPoint;
    fixed lv_xDistance;
    fixed lv_yDistance;
    fixed lv_zDistance;
    fixed lv_zOriginal;
    fixed lv_xPartial;
    fixed lv_yPartial;
    fixed lv_zPartial;
    fixed lv_zTotal;
    fixed lv_travelDistance;
    int lv_travelDistanceInt;
    int lv_i;
    fixed lv_r;
    unit lv_kerriganStrikeAmon;
    unit lv_kerriganOriginalUnit;
    bool lv_kerriganSelected;
    unit lv_amonTargetUnit;

    // Automatic Variable Declarations
    unitgroup autoA477DDF1_g;
    int autoA477DDF1_u;
    unit autoA477DDF1_var;
    const int auto9910E736_ae = 10;
    const int auto9910E736_ai = 1;
    const fixed auto28C26F1E_ae = 90.0;
    const fixed auto28C26F1E_ai = 2.5;
    const fixed auto49FA58AE_ae = 0.0;
    const fixed auto49FA58AE_ai = -3.0;

    // Variable Initialization
    lv_startingPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_xDistance = (PointGetX(lv_targetPoint) - PointGetX(lv_startingPoint));
    lv_yDistance = (PointGetY(lv_targetPoint) - PointGetY(lv_startingPoint));
    lv_zDistance = (-45.0 - WorldHeight(c_heightMapGround, UnitGetPosition(EventUnit())));
    lv_zOriginal = WorldHeight(c_heightMapGround, UnitGetPosition(EventUnit()));
    lv_kerriganOriginalUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    autoA477DDF1_g = UnitGroupSelected(1);
    autoA477DDF1_u = UnitGroupCount(autoA477DDF1_g, c_unitCountAll);
    for (;; autoA477DDF1_u -= 1) {
        autoA477DDF1_var = UnitGroupUnitFromEnd(autoA477DDF1_g, autoA477DDF1_u);
        if (autoA477DDF1_var == null) { break; }
        if ((autoA477DDF1_var == lv_kerriganOriginalUnit)) {
            lv_kerriganSelected = true;
            libWCMI_gv_amonStrikeUnitSelected = false;
            TriggerEnable(libWCMI_gt_AmonStrikeSelectionCheck, true);
        }

    }
    UnitCreate(1, "KerriganEpilogue03StrikeAmon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_kerriganOriginalUnit), UnitGetPosition(lv_kerriganOriginalUnit), UnitGetFacing(lv_kerriganOriginalUnit));
    libNtve_gf_ShowHideUnit(lv_kerriganOriginalUnit, false);
    lv_kerriganStrikeAmon = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), WorldHeight(c_heightMapGround, UnitGetPosition(EventUnit())), 0.0);
    libNtve_gf_SendActorMessageToUnit(lv_kerriganStrikeAmon, "Signal StrikeAmonStart");
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonStart", lv_kerriganStrikeAmon);
    libNtve_gf_MakeUnitFacePoint(lv_kerriganStrikeAmon, EventUnitTargetPoint(), 0.5);
    lv_amonTargetUnit = UnitGroupClosestToPoint(UnitGroup("KerriganEpilogue03StrikeAmonTarget", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventUnitTargetPoint());
    lv_i = 1;
    for ( ; ( (auto9910E736_ai >= 0 && lv_i <= auto9910E736_ae) || (auto9910E736_ai < 0 && lv_i >= auto9910E736_ae) ) ; lv_i += auto9910E736_ai ) {
        UnitSetHeight(lv_kerriganStrikeAmon, ((1.0 * lv_i) + lv_zOriginal), 0.0625);
        Wait(0.0625, c_timeGame);
    }
    lv_zTotal = (45.0 + UnitGetHeight(lv_kerriganStrikeAmon));
    libNtve_gf_SendActorMessageToUnit(lv_kerriganStrikeAmon, "Signal StrikeAmonArcStart");
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonArcStart", lv_kerriganStrikeAmon);
    lv_r = 0.0;
    for ( ; ( (auto28C26F1E_ai >= 0 && lv_r <= auto28C26F1E_ae) || (auto28C26F1E_ai < 0 && lv_r >= auto28C26F1E_ae) ) ; lv_r += auto28C26F1E_ai ) {
        lv_xPartial = (Sin(lv_r) * lv_xDistance);
        lv_yPartial = (Sin(lv_r) * lv_yDistance);
        lv_zPartial = (Cos(lv_r) * lv_zTotal);
        UnitSetPosition(lv_kerriganStrikeAmon, Point((PointGetX(UnitGetPosition(lv_kerriganOriginalUnit)) + lv_xPartial), (PointGetY(UnitGetPosition(lv_kerriganOriginalUnit)) + lv_yPartial)), true);
        UnitSetHeight(lv_kerriganStrikeAmon, (-45.0 + (lv_zPartial + 0.0)), 0.0625);
        libNtve_gf_MakeUnitFacePoint(lv_kerriganStrikeAmon, UnitGetPosition(lv_amonTargetUnit), 0.0625);
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(lv_kerriganStrikeAmon, "Signal StrikeAmonArcArrive");
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonArcArrive", lv_kerriganStrikeAmon);
    libNtve_gf_MakeUnitFacePoint(lv_kerriganStrikeAmon, UnitGetPosition(lv_amonTargetUnit), 0.5);
    Wait(0.5, c_timeGame);
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonBeamHit0", lv_amonTargetUnit);
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonBeamHit1", lv_amonTargetUnit);
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonBeamHit2", lv_amonTargetUnit);
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonBeamHit3", lv_amonTargetUnit);
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonBeamHit4", lv_amonTargetUnit);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_kerriganStrikeAmon, "Signal StrikeAmonReturnStart");
    UnitCreateEffectUnit(lv_kerriganStrikeAmon, "StrikeAmonReturnStart", lv_kerriganStrikeAmon);
    lv_zTotal = (45.0 + WorldHeight(c_heightMapGround, UnitGetPosition(lv_kerriganOriginalUnit)));
    libNtve_gf_MakeUnitFacePoint(lv_kerriganStrikeAmon, lv_startingPoint, 1.0);
    lv_r = 90.0;
    for ( ; ( (auto49FA58AE_ai >= 0 && lv_r <= auto49FA58AE_ae) || (auto49FA58AE_ai < 0 && lv_r >= auto49FA58AE_ae) ) ; lv_r += auto49FA58AE_ai ) {
        lv_xPartial = (Sin(lv_r) * lv_xDistance);
        lv_yPartial = (Sin(lv_r) * lv_yDistance);
        lv_zPartial = (Cos(lv_r) * lv_zTotal);
        UnitSetPosition(lv_kerriganStrikeAmon, Point((PointGetX(UnitGetPosition(lv_kerriganOriginalUnit)) + lv_xPartial), (PointGetY(UnitGetPosition(lv_kerriganOriginalUnit)) + lv_yPartial)), true);
        UnitSetHeight(lv_kerriganStrikeAmon, (-45.0 + (lv_zPartial + 0.0)), 0.0625);
        Wait(0.0625, c_timeGame);
    }
    UnitSetFacing(lv_kerriganOriginalUnit, UnitGetFacing(lv_kerriganStrikeAmon), 0.0);
    UnitRemove(lv_kerriganStrikeAmon);
    libNtve_gf_ShowHideUnit(lv_kerriganOriginalUnit, true);
    UnitCreateEffectUnit(lv_kerriganOriginalUnit, "StrikeAmonReturnArrive", lv_kerriganOriginalUnit);
    if ((lv_kerriganSelected == true) && (libWCMI_gv_amonStrikeUnitSelected == false)) {
        UnitSelect(lv_kerriganOriginalUnit, UnitGetOwner(lv_kerriganOriginalUnit), true);
    }

    UnitBehaviorRemove(EventUnit(), "KerriganEpilogue03StrikeAmonDummyCasterStun", 1);
    TriggerEnable(libWCMI_gt_AmonStrikeSelectionCheck, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_StrikeAmon_Init () {
    libWCMI_gt_StrikeAmon = TriggerCreate("libWCMI_gt_StrikeAmon_Func");
    TriggerAddEventUnitAbility(libWCMI_gt_StrikeAmon, null, AbilityCommand("KerriganEpilogue03StrikeAmon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Strike Selection Check
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_AmonStrikeSelectionCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gv_amonStrikeUnitSelected = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_AmonStrikeSelectionCheck_Init () {
    libWCMI_gt_AmonStrikeSelectionCheck = TriggerCreate("libWCMI_gt_AmonStrikeSelectionCheck_Func");
    TriggerEnable(libWCMI_gt_AmonStrikeSelectionCheck, false);
    TriggerAddEventUnitSelected(libWCMI_gt_AmonStrikeSelectionCheck, null, 1, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oracle Wormhole
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_OracleWormhole_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) != c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    AISetUnitScriptControlled(EventUnit(), false);
    AIRemoveUnitFromAnyWaves(EventUnit());
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_OracleWormhole_Init () {
    libWCMI_gt_OracleWormhole = TriggerCreate("libWCMI_gt_OracleWormhole_Func");
    TriggerAddEventUnitBehaviorChange(libWCMI_gt_OracleWormhole, null, "EnterWormhole", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_GameCheat_CreateDialog
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_GameCheat_CreateDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_label;
    text lv_tooltip;

    // Automatic Variable Declarations
    const int auto4E6B6E6D_ae = 25;
    int auto4E6B6E6D_var;
    int auto7CE5AB5F_val;
    const int auto4C53ABEC_ae = 25;
    int auto4C53ABEC_var;
    int auto30B906DD_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(libWCMI_gv_wM_GameCheat_DialogWidth, libWCMI_gv_wM_GameCheat_DialogHeight, c_anchorTopRight, 0, 50, true);
    libWCMI_gv_wM_GameCheat_Dialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_WCMI_392837B9"));
    libNtve_gf_CreateDialogItemButton(libWCMI_gv_wM_GameCheat_Dialog, 40, 40, c_anchorTopRight, 0, 0, StringExternal("Param/Value/lib_WCMI_21C58550"), StringExternal("Param/Value/lib_WCMI_E5CED145"), "");
    libWCMI_gv_wM_GameCheat_Minimize = DialogControlLastCreated();
    auto4E6B6E6D_var = 0;
    for ( ; auto4E6B6E6D_var <= auto4E6B6E6D_ae; auto4E6B6E6D_var += 1 ) {
        if (((auto4E6B6E6D_var == (c_gameCheatCooldown)) || (auto4E6B6E6D_var == (c_gameCheatFastBuild)) || (auto4E6B6E6D_var == (c_gameCheatGod)) || (auto4E6B6E6D_var == (c_gameCheatShowmap)))) {
            libWCMI_gv_wM_GameCheat_ArrayIndex += 1;
            libNtve_gf_CreateDialogItemCheckBox(libWCMI_gv_wM_GameCheat_Dialog, 25, 25, c_anchorTopLeft, 50, ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 50), StringExternal("Param/Value/lib_WCMI_2974025E"), false);
            libWCMI_gv_wM_GameCheat_CheckBox[auto4E6B6E6D_var] = DialogControlLastCreated();
            if ((libWCMI_gv_wM_GameCheat_CheatState[auto4E6B6E6D_var] == true)) {
                libNtve_gf_SetDialogItemChecked(libWCMI_gv_wM_GameCheat_CheckBox[auto4E6B6E6D_var], true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libWCMI_gv_wM_GameCheat_CheckBox[auto4E6B6E6D_var], false, PlayerGroupAll());
            }
            auto7CE5AB5F_val = auto4E6B6E6D_var;
            if (auto7CE5AB5F_val == (c_gameCheatCooldown)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_DCE0A764");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatFastBuild)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_3DD7FD94");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatGod)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_C010EED9");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatShowmap)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_81D737B5");
            }
            else {
            }
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_label, PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(libWCMI_gv_wM_GameCheat_Dialog, 200, 25, c_anchorTopLeft, 80, ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 55), lv_label, Color(100,100,100), false, 2.0);
        }

    }
    auto4C53ABEC_var = 0;
    for ( ; auto4C53ABEC_var <= auto4C53ABEC_ae; auto4C53ABEC_var += 1 ) {
        if (((auto4C53ABEC_var == (c_gameCheatGimme)) || (auto4C53ABEC_var == (c_gameCheatTechTree)))) {
            libWCMI_gv_wM_GameCheat_ArrayIndex += 1;
            auto30B906DD_val = auto4C53ABEC_var;
            if (auto30B906DD_val == (c_gameCheatGimme)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_41DADEA5");
                lv_tooltip = StringExternal("Param/Value/lib_WCMI_46DF5396");
            }
            else if (auto30B906DD_val == (c_gameCheatTechTree)) {
                lv_label = StringExternal("Param/Value/lib_WCMI_3437D367");
                lv_tooltip = StringExternal("Param/Value/lib_WCMI_E7FED887");
            }
            else {
            }
            libNtve_gf_CreateDialogItemButton(libWCMI_gv_wM_GameCheat_Dialog, 200, 50, c_anchorTopLeft, 50, ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 50), lv_tooltip, lv_label, "");
            libWCMI_gv_wM_GameCheat_CheckBox[auto4C53ABEC_var] = DialogControlLastCreated();
        }

    }
    libWCMI_gv_wM_GameCheat_ArrayIndex += 1;
    libNtve_gf_CreateDialogItemButton(libWCMI_gv_wM_GameCheat_Dialog, 200, 50, c_anchorTopLeft, 50, ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 50), StringExternal("Param/Value/lib_WCMI_CBE06FD6"), StringExternal("Param/Value/lib_WCMI_52B3321E"), "");
    libWCMI_gv_wM_GameCheat_OpenMissionCheat = DialogControlLastCreated();
    if ((DialogGetHeight(libWCMI_gv_wM_GameCheat_Dialog) < ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 150))) {
        libWCMI_gv_wM_GameCheat_DialogHeight = ((libWCMI_gv_wM_GameCheat_ArrayIndex * 50) + 150);
        DialogSetSize(libWCMI_gv_wM_GameCheat_Dialog, libWCMI_gv_wM_GameCheat_DialogWidth, libWCMI_gv_wM_GameCheat_DialogHeight);
    }

    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerEnable(libWCMI_gt_PS_GameCheat_CheckboxUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_GameCheat_CreateDialog_Init () {
    libWCMI_gt_WM_GameCheat_CreateDialog = TriggerCreate("libWCMI_gt_WM_GameCheat_CreateDialog_Func");
    TriggerAddEventChatMessage(libWCMI_gt_WM_GameCheat_CreateDialog, c_playerAny, "cheats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_GameCheat_CheckboxUsed
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_PS_GameCheat_CheckboxUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF1D87FF8_ae = 25;
    int autoF1D87FF8_var;
    int autoF189DDA6_val;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == libWCMI_gv_wM_GameCheat_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWCMI_gv_wM_GameCheat_Minimize == EventDialogControl())) {
        if ((libWCMI_gv_wM_GameCheat_Minimized == false)) {
            DialogSetSize(libWCMI_gv_wM_GameCheat_Dialog, 50, 50);
            libNtve_gf_SetDialogItemText(libWCMI_gv_wM_GameCheat_Minimize, StringExternal("Param/Value/lib_WCMI_507ED1DB"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libWCMI_gv_wM_GameCheat_Minimize, StringExternal("Param/Value/lib_WCMI_4966D256"), PlayerGroupAll());
        }
        else {
            DialogSetSize(libWCMI_gv_wM_GameCheat_Dialog, libWCMI_gv_wM_GameCheat_DialogWidth, libWCMI_gv_wM_GameCheat_DialogHeight);
            libNtve_gf_SetDialogItemText(libWCMI_gv_wM_GameCheat_Minimize, StringExternal("Param/Value/lib_WCMI_B98D5E73"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libWCMI_gv_wM_GameCheat_Minimize, StringExternal("Param/Value/lib_WCMI_90FAD008"), PlayerGroupAll());
        }
        libWCMI_gv_wM_GameCheat_Minimized = !(libWCMI_gv_wM_GameCheat_Minimized);
        return true;
    }

    if ((libWCMI_gv_wM_GameCheat_OpenMissionCheat == EventDialogControl())) {
        if ((libWCMI_gv_wM_MissionCheat_Dialog == c_invalidDialogId)) {
            TriggerExecute(libWCMI_gt_WM_MissionCheat_CreateDialog, true, false);
        }

        return true;
    }

    autoF1D87FF8_var = 0;
    for ( ; autoF1D87FF8_var <= autoF1D87FF8_ae; autoF1D87FF8_var += 1 ) {
        if ((libWCMI_gv_wM_GameCheat_CheckBox[autoF1D87FF8_var] == EventDialogControl())) {
            autoF189DDA6_val = autoF1D87FF8_var;
            if (autoF189DDA6_val == (c_gameCheatCooldown)) {
                ConsoleCommand("cd", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatFastBuild)) {
                ConsoleCommand("fb", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatGod)) {
                ConsoleCommand("god 1", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatShowmap)) {
                ConsoleCommand("sm", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatGimme)) {
                ConsoleCommand("gimme", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatTechTree)) {
                ConsoleCommand("tt", true, true);
                DialogControlSetEnabled(libWCMI_gv_wM_GameCheat_CheckBox[autoF1D87FF8_var], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemTooltip(libWCMI_gv_wM_GameCheat_CheckBox[autoF1D87FF8_var], StringExternal("Param/Value/lib_WCMI_CDEC4192"), PlayerGroupAll());
            }
            else {
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_PS_GameCheat_CheckboxUsed_Init () {
    libWCMI_gt_PS_GameCheat_CheckboxUsed = TriggerCreate("libWCMI_gt_PS_GameCheat_CheckboxUsed_Func");
    TriggerEnable(libWCMI_gt_PS_GameCheat_CheckboxUsed, false);
    TriggerAddEventDialogControl(libWCMI_gt_PS_GameCheat_CheckboxUsed, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libWCMI_gt_PS_GameCheat_CheckboxUsed, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_GameCheat_CheatUsed
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_PS_GameCheat_CheatUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto731EB4A6_ae = 25;
    int auto731EB4A6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto731EB4A6_var = 0;
    for ( ; auto731EB4A6_var <= auto731EB4A6_ae; auto731EB4A6_var += 1 ) {
        if ((auto731EB4A6_var == (EventCheatUsed()))) {
            TriggerEnable(libWCMI_gt_PS_GameCheat_CheckboxUsed, false);
            libWCMI_gv_wM_GameCheat_CheatState[auto731EB4A6_var] = !(libWCMI_gv_wM_GameCheat_CheatState[auto731EB4A6_var]);
            if ((libWCMI_gv_wM_GameCheat_Dialog != c_invalidDialogId) && (DialogIsVisible(libWCMI_gv_wM_GameCheat_Dialog, 1) == true)) {
                if ((libWCMI_gv_wM_GameCheat_CheatState[auto731EB4A6_var] == true)) {
                    libNtve_gf_SetDialogItemChecked(libWCMI_gv_wM_GameCheat_CheckBox[auto731EB4A6_var], true, PlayerGroupSingle(1));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libWCMI_gv_wM_GameCheat_CheckBox[auto731EB4A6_var], false, PlayerGroupSingle(1));
                }
            }

            Wait(0.1, c_timeGame);
            TriggerEnable(libWCMI_gt_PS_GameCheat_CheckboxUsed, true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_PS_GameCheat_CheatUsed_Init () {
    libWCMI_gt_PS_GameCheat_CheatUsed = TriggerCreate("libWCMI_gt_PS_GameCheat_CheatUsed_Func");
    TriggerAddEventCheatUsed(libWCMI_gt_PS_GameCheat_CheatUsed, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionCheat_CreateDialog
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionCheat_CreateDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonWidth;
    int lv_buttonHeight;
    string lv_boarderImage;
    string lv_buttonImage;
    string lv_buttonImageHover;
    string lv_buttonTextStyle;
    string lv_editBoxTextStyle;
    string lv_closeButtonTextStyle;
    int lv_RelativeAnchor;
    int lv_RelativeAnchor2;
    int lv_panelCount;
    int[libWCMI_gv_pMC_MissionCheat_PanelCountMAX + 1] lv_itemsInPanel;
    int lv_cheatUIHeight;
    int lv_panelIndex;
    int lv_cheatIndex;

    // Automatic Variable Declarations
    int auto487E3D4B_ae;
    const int auto487E3D4B_ai = 1;
    int auto4960B2E2_ae;
    const int auto4960B2E2_ai = 1;
    const int auto29FEF9E8_ae = libWCMI_gv_pMC_MissionCheat_PanelCountMAX;
    const int auto29FEF9E8_ai = 1;

    // Variable Initialization
    lv_buttonWidth = 200;
    lv_buttonHeight = 40;
    lv_boarderImage = "Assets\\Textures\\ui_ingame_subpanel2.dds";
    lv_buttonImage = "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds";
    lv_buttonImageHover = "Assets\\Textures\\ui_battlenet_settings_dropdownbutton_normaloverpressedover.dds";
    lv_buttonTextStyle = "ModCenterSize16";
    lv_editBoxTextStyle = "ModLeftSize12";
    lv_closeButtonTextStyle = "ModCenterSize16Bold";
    lv_RelativeAnchor = c_anchorTopLeft;
    lv_RelativeAnchor2 = c_anchorTopLeft;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libWCMI_gf_WM_MissionCheat_ButtonTextInit();
    while (!((libWCMI_gf_GameIsOver() == false) && (libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.2, c_timeGame);
    }
    DialogCreate(20, 20, c_anchorTopRight, 5, 60, true);
    libWCMI_gv_wM_MissionCheat_Dialog = DialogLastCreated();
    DialogSetImage(libWCMI_gv_wM_MissionCheat_Dialog, lv_boarderImage);
    auto487E3D4B_ae = ((libWCMI_ge_MissionCheatType_User02) - 1);
    lv_panelIndex = 1;
    for ( ; ( (auto487E3D4B_ai >= 0 && lv_panelIndex <= auto487E3D4B_ae) || (auto487E3D4B_ai < 0 && lv_panelIndex >= auto487E3D4B_ae) ) ; lv_panelIndex += auto487E3D4B_ai ) {
        if ((libWCMI_gv_wM_MissionCheat_CategoryUsed[lv_panelIndex] == true)) {
            DialogControlCreate(libWCMI_gv_wM_MissionCheat_Dialog, c_triggerControlTypePanel);
            libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex] = DialogControlLastCreated();
            lv_panelCount += 1;
        }

    }
    auto4960B2E2_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
    lv_cheatIndex = 1;
    for ( ; ( (auto4960B2E2_ai >= 0 && lv_cheatIndex <= auto4960B2E2_ae) || (auto4960B2E2_ai < 0 && lv_cheatIndex >= auto4960B2E2_ae) ) ; lv_cheatIndex += auto4960B2E2_ai ) {
        lv_itemsInPanel[(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)] += 1;
        DialogControlCreateInPanel(libWCMI_gv_wM_MissionCheat_Panel[(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], c_triggerControlTypeButton);
        libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_titleText, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_buttonTextStyle, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_description, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonWidth, lv_buttonHeight);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), lv_RelativeAnchor2, libWCMI_gv_wM_MissionCheat_Panel[(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], lv_RelativeAnchor, 0, (( (lv_itemsInPanel[(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)] - 1) * lv_buttonHeight ) + 2));
        if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_uIType == libWCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
            DialogControlCreateInPanel(libWCMI_gv_wM_MissionCheat_Panel[(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], c_triggerControlTypeEditBox);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_editBoxTextStyle, PlayerGroupAll());
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
            libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_editBoxDialog = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), ((lv_buttonWidth * 1) / 3), lv_buttonHeight);
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog, c_anchorTopRight, 0, 0);
            DialogControlSetSize(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog, PlayerGroupAll(), ((lv_buttonWidth * 2) / 3), lv_buttonHeight);
            libNtve_gf_SetDialogItemEditorValue(libWCMI_gv_wM_MissionCheat_Cheats[lv_cheatIndex].lv_editBoxDialog, "0", PlayerGroupAll());
        }

    }
    DialogControlSetPosition(libWCMI_gv_wM_MissionCheat_Panel[(libWCMI_ge_MissionCheatType_Stage)], PlayerGroupAll(), c_anchorTopLeft, 3, 3);
    DialogControlSetSize(libWCMI_gv_wM_MissionCheat_Panel[(libWCMI_ge_MissionCheatType_Stage)], PlayerGroupAll(), (lv_buttonWidth + 6), (( lv_itemsInPanel[(libWCMI_ge_MissionCheatType_Stage)] * lv_buttonHeight ) + 20));
    lv_panelIndex = 1;
    for ( ; ( (auto29FEF9E8_ai >= 0 && lv_panelIndex <= auto29FEF9E8_ae) || (auto29FEF9E8_ai < 0 && lv_panelIndex >= auto29FEF9E8_ae) ) ; lv_panelIndex += auto29FEF9E8_ai ) {
        if ((lv_panelIndex > 1) && (libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId)) {
            DialogControlSetPositionRelative(libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex], PlayerGroupAll(), c_anchorTopLeft, libWCMI_gv_wM_MissionCheat_Panel[(lv_panelIndex - 1)], c_anchorBottomLeft, 0, 0);
            DialogControlSetSize(libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex], PlayerGroupAll(), (lv_buttonWidth + 6), (( lv_itemsInPanel[lv_panelIndex] * lv_buttonHeight ) + 20));
        }

        if ((libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId) && (DialogGetWidth(libWCMI_gv_wM_MissionCheat_Dialog) < DialogControlGetWidth(libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex], 1))) {
            DialogSetSize(libWCMI_gv_wM_MissionCheat_Dialog, (DialogControlGetWidth(libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex], 1) + 0), DialogGetHeight(libWCMI_gv_wM_MissionCheat_Dialog));
        }

        if ((libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId)) {
            lv_cheatUIHeight += DialogControlGetHeight(libWCMI_gv_wM_MissionCheat_Panel[lv_panelIndex], 1);
        }

    }
    DialogSetSize(libWCMI_gv_wM_MissionCheat_Dialog, DialogGetWidth(libWCMI_gv_wM_MissionCheat_Dialog), (lv_cheatUIHeight + 75));
    libNtve_gf_CreateDialogItemButton(libWCMI_gv_wM_MissionCheat_Dialog, (( lv_buttonWidth * 3 ) / 4), lv_buttonHeight, c_anchorBottomRight, 3, 3, StringToText(""), StringExternal("Param/Value/lib_WCMI_619B3399"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_closeButtonTextStyle, PlayerGroupAll());
    libWCMI_gv_wM_MissionCheat_CloseButton = DialogControlLastCreated();
    libWCMI_gf_WM_MissionCheat_UpdateButtonEnabled();
    DialogSetVisible(libWCMI_gv_wM_MissionCheat_Dialog, PlayerGroupAll(), true);
    while (!((libWCMI_gv_wM_MissionCheat_CloseButtonClicked == true))) {
        Wait(0.1, c_timeReal);
    }
    DialogDestroy(libWCMI_gv_wM_MissionCheat_Dialog);
    libWCMI_gv_wM_MissionCheat_Dialog = c_invalidDialogId;
    libWCMI_gv_wM_MissionCheat_CloseButtonClicked = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionCheat_CreateDialog_Init () {
    libWCMI_gt_WM_MissionCheat_CreateDialog = TriggerCreate("libWCMI_gt_WM_MissionCheat_CreateDialog_Func");
    TriggerAddEventChatMessage(libWCMI_gt_WM_MissionCheat_CreateDialog, c_playerAny, "mcheats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionCheat_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionCheat_ButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogIndex;
    string lv_editBoxValue;

    // Automatic Variable Declarations
    int auto69405232_ae;
    const int auto69405232_ai = 1;

    // Variable Initialization
    lv_editBoxValue = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libWCMI_gv_wM_MissionCheat_Dialog != c_invalidDialogId))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == libWCMI_gv_wM_MissionCheat_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto69405232_ae = libWCMI_gv_wM_MissionCheat_ArrayCount;
    lv_dialogIndex = 1;
    for ( ; ( (auto69405232_ai >= 0 && lv_dialogIndex <= auto69405232_ae) || (auto69405232_ai < 0 && lv_dialogIndex >= auto69405232_ae) ) ; lv_dialogIndex += auto69405232_ai ) {
        if ((EventDialogControl() == libWCMI_gv_wM_MissionCheat_Cheats[lv_dialogIndex].lv_buttonDialog)) {
            if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_dialogIndex].lv_uIType == libWCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                lv_editBoxValue = libNtve_gf_DialogItemEditValue(libWCMI_gv_wM_MissionCheat_Cheats[lv_dialogIndex].lv_editBoxDialog, 1);
                if ((lv_editBoxValue != "")) {
                    DataTableSetString(true, ("PS_" + TriggerGetFunction(libWCMI_gv_wM_MissionCheat_Cheats[lv_dialogIndex].lv_trigger)), lv_editBoxValue);
                }

            }

            TriggerExecute(libWCMI_gv_wM_MissionCheat_Cheats[lv_dialogIndex].lv_trigger, true, false);
            libWCMI_gf_WM_MissionCheat_UpdateButtonEnabled();
            return true;
        }

    }
    if ((EventDialogControl() == libWCMI_gv_wM_MissionCheat_CloseButton)) {
        libWCMI_gv_wM_MissionCheat_CloseButtonClicked = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionCheat_ButtonClicked_Init () {
    libWCMI_gt_WM_MissionCheat_ButtonClicked = TriggerCreate("libWCMI_gt_WM_MissionCheat_ButtonClicked_Func");
    TriggerAddEventDialogControl(libWCMI_gt_WM_MissionCheat_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionCheat_CheatEntered
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionCheat_CheatEntered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    string lv_cheatParameter;

    // Automatic Variable Declarations
    const int autoB629ABE7_ae = libWCMI_gv_pMC_MissionCheat_MaxCheats;
    const int autoB629ABE7_ai = 1;

    // Variable Initialization
    lv_cheatParameter = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iter = 1;
    for ( ; ( (autoB629ABE7_ai >= 0 && lv_iter <= autoB629ABE7_ae) || (autoB629ABE7_ai < 0 && lv_iter >= autoB629ABE7_ae) ) ; lv_iter += autoB629ABE7_ai ) {
        if ((StringCase(libWCMI_gv_wM_MissionCheat_Cheats[lv_iter].lv_titleString, false) == StringCase(StringWord(EventChatMessage(false), 1), false))) {
            if ((libWCMI_gv_wM_MissionCheat_Cheats[lv_iter].lv_uIType == libWCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DataTableSetString(true, ("PS_" + TriggerGetFunction(libWCMI_gv_wM_MissionCheat_Cheats[lv_iter].lv_trigger)), StringWord(EventChatMessage(false), 2));
            }

            TriggerExecute(libWCMI_gv_wM_MissionCheat_Cheats[lv_iter].lv_trigger, true, false);
            libWCMI_gf_WM_MissionCheat_UpdateButtonEnabled();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionCheat_CheatEntered_Init () {
    libWCMI_gt_WM_MissionCheat_CheatEntered = TriggerCreate("libWCMI_gt_WM_MissionCheat_CheatEntered_Func");
    TriggerAddEventChatMessage(libWCMI_gt_WM_MissionCheat_CheatEntered, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libWCMI_gf_HideCampaignTransmissionPortrait();
    libWCMI_gv_wM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libWCMI_gv_wM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DebugVictoryS_Init () {
    libWCMI_gt_WM_DebugVictoryS = TriggerCreate("libWCMI_gt_WM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libWCMI_gt_WM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libWCMI_gt_WM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_ToggleFlyoverMode
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_ToggleFlyoverMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWCMI_gv_wM_FlyoverModeEnabled == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlyoverUnit", 0, 1, RegionGetCenter(RegionEntireMap()));
        libWCMI_gv_wM_FlyoverUnit = UnitLastCreated();
        UnitGroupSelect(UnitGroupSelected(1), 1, false);
        UnitSelect(libWCMI_gv_wM_FlyoverUnit, 1, true);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
        CameraFollowUnitGroup(1, UnitLastCreatedGroup(), true, false);
        CameraForceFollowUnitGroup(1, true);
        CameraLockInput(1, true);
        AITimePause(true);
        ConsoleCommand("togui", true, true);
        libWCMI_gv_wM_FlyoverModeEnabled = true;
        TriggerEnable(libWCMI_gt_WM_TurnOffFlyoverMode, true);
    }
    else {
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
        UnitKill(libWCMI_gv_wM_FlyoverUnit);
        CameraLockInput(1, false);
        AITimePause(false);
        ConsoleCommand("togui", true, true);
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        libWCMI_gv_wM_FlyoverUnit = null;
        libWCMI_gv_wM_FlyoverModeEnabled = false;
        TriggerEnable(libWCMI_gt_WM_TurnOffFlyoverMode, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_ToggleFlyoverMode_Init () {
    libWCMI_gt_WM_ToggleFlyoverMode = TriggerCreate("libWCMI_gt_WM_ToggleFlyoverMode_Func");
    TriggerAddEventChatMessage(libWCMI_gt_WM_ToggleFlyoverMode, c_playerAny, "FlyoverMode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_TurnOffFlyoverMode
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_TurnOffFlyoverMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libWCMI_gt_WM_ToggleFlyoverMode, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_TurnOffFlyoverMode_Init () {
    libWCMI_gt_WM_TurnOffFlyoverMode = TriggerCreate("libWCMI_gt_WM_TurnOffFlyoverMode_Func");
    TriggerEnable(libWCMI_gt_WM_TurnOffFlyoverMode, false);
    TriggerAddEventKeyPressed(libWCMI_gt_WM_TurnOffFlyoverMode, c_playerAny, c_keyB, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libWCMI_gv_wM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libWCMI_gv_wM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue_Init () {
    libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_AbortMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto5DDB9E2A_g;
    int auto5DDB9E2A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_CurrentMap() == "TValerian03") && (libWoLC_gv_wCX_IsVictoryPlayAgain == true) && (libWoLC_gv_wCX_IsSimulation == false)) {
        libWCMI_gf_GameOver(libWCMI_ge_CampaignMissionGameResultType_Victory);
        TransmissionClearAll();
        UnitPauseAll(true);
        auto5DDB9E2A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
        auto5DDB9E2A_u = UnitGroupCount(auto5DDB9E2A_g, c_unitCountAll);
        for (;; auto5DDB9E2A_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto5DDB9E2A_g, auto5DDB9E2A_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(lv_indexUnit, true);
            libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        }
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "SetVisibility");
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        TriggerQueueClear(c_triggerQueueRetain);
        TriggerQueuePause(true);
        SoundStopAllTriggerSounds(false);
        libWCMI_gf_PU_CampaignVictory2();
    }
    else {
        libWoLC_gf_PrepareForStoryMode(c_gameOverDefeat, PlayerDifficulty(1));
        GameOver(1, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_AbortMission_Init () {
    libWCMI_gt_WM_AbortMission = TriggerCreate("libWCMI_gt_WM_AbortMission_Func");
    TriggerAddEventAbortMission(libWCMI_gt_WM_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionEndsPlayerExit
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionEndsPlayerExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_MissionEndStats(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionEndsPlayerExit_Init () {
    libWCMI_gt_WM_MissionEndsPlayerExit = TriggerCreate("libWCMI_gt_WM_MissionEndsPlayerExit_Func");
    TriggerAddEventPlayerLeft(libWCMI_gt_WM_MissionEndsPlayerExit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_VictoryContinue
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_VictoryContinue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_CurrentMap() == "TValerian03")) {
        libWCMI_gf_PU_CampaignVictory2();
        return true;
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_VictoryContinue_Init () {
    libWCMI_gt_WM_VictoryContinue = TriggerCreate("libWCMI_gt_WM_VictoryContinue_Func");
    libWCUI_gf_WU_VictoryClosed(libWCMI_gt_WM_VictoryContinue);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_VictoryQuit
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_VictoryQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("");
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_VictoryQuit_Init () {
    libWCMI_gt_WM_VictoryQuit = TriggerCreate("libWCMI_gt_WM_VictoryQuit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_PlayerNeedPylon
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_PlayerNeedPylon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newTooltip;
    fixed lv_used;
    fixed lv_made;
    fixed lv_limit;
    bool lv_transmissionDelivered;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newTooltip = StringExternal("Param/Value/lib_WCMI_075E5731");

    // Conditions
    if (testConds) {
        if (!((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, true);
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3, true);
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4, true);
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6, true);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libWCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libWCMI_gv_wM_NeedPylonEnabled == true) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (TechTreeUnitCount(1, "Nexus", c_techCountQueuedOrBetter) > 0)) {
            lv_made = PlayerGetPropertyFixed(1, c_playerPropSuppliesMade);
            lv_used = PlayerGetPropertyFixed(1, c_playerPropSuppliesUsed);
            lv_limit = PlayerGetPropertyFixed(1, c_playerPropSuppliesLimit);
            if (((lv_made + (TechTreeUnitCount(1, "Pylon", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Pylon", "Food", 1)))) < lv_limit) && ((lv_made + (TechTreeUnitCount(1, "Pylon", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Pylon", "Food", 1)))) <= ((lv_used + libWCMI_gv_wM_NeedPylonFoodRequired) - 0.1))) {
                if ((libWCMI_gv_wM_NeedPylonAbilityHighlightOn == false)) {
                    if ((lv_transmissionDelivered == false)) {
                        lv_transmissionDelivered = true;
                        TriggerQueueEnter();
                        libWoLC_gf_SetAllSoundChannelVolumesCampaign(libWoLC_ge_VolumeChannelModeCampaign_Speech);
                        libWCMI_gf_SendTransmissionCampaign(null, "pTutorial_Gameplay|Line00002", c_transmissionDurationAdd, 0.0, true, libWCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libWCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                        libWoLC_gf_SetAllSoundChannelVolumesCampaign(libWoLC_ge_VolumeChannelModeCampaign_Game);
                        TriggerQueueExit();
                    }
                    else {
                        libWCMI_gv_wM_NeedPylonAbilityHighlightOn = true;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_WCMI_1142C38C"));
                        UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), true);
                        CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Param/Value/lib_WoLC_F569C4E3");
                        DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/SupplyHighlight");
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                        DialogControlDestroy(DialogControlLastCreated());
                    }
                }

            }
            else {
                if ((libWCMI_gv_wM_NeedPylonAbilityHighlightOn == true)) {
                    libWCMI_gv_wM_NeedPylonAbilityHighlightOn = false;
                    UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
                    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), false);
                    CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Button/Tooltip/Pylon");
                    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/SupplyHighlight");
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    DialogControlDestroy(DialogControlLastCreated());
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_PlayerNeedPylon_Init () {
    libWCMI_gt_WM_PlayerNeedPylon = TriggerCreate("libWCMI_gt_WM_PlayerNeedPylon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_PlayerNeedPylonButtonClicked (Food 2)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gv_wM_NeedPylonFoodRequired2Index += 1;
    lv_localIndex = libWCMI_gv_wM_NeedPylonFoodRequired2Index;
    libWCMI_gv_wM_NeedPylonFoodRequired = MaxI(libWCMI_gv_wM_NeedPylonFoodRequired, 2);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libWCMI_gv_wM_NeedPylonFoodRequired2Index) && (libWCMI_gv_wM_NeedPylonFoodRequired == 2)) {
        libWCMI_gv_wM_NeedPylonFoodRequired = 1;
        libWCMI_gv_wM_NeedPylonFoodRequired2Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2_Init () {
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2 = TriggerCreate("libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2_Func");
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, false);
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "Zealot");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "Sentry");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "Stalker");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "HighTemplar");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "DarkTemplar");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "WarpPrism");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2, 1, "Phoenix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_PlayerNeedPylonButtonClicked (Food 3)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gv_wM_NeedPylonFoodRequired3Index += 1;
    lv_localIndex = libWCMI_gv_wM_NeedPylonFoodRequired3Index;
    libWCMI_gv_wM_NeedPylonFoodRequired = MaxI(libWCMI_gv_wM_NeedPylonFoodRequired, 3);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libWCMI_gv_wM_NeedPylonFoodRequired3Index) && (libWCMI_gv_wM_NeedPylonFoodRequired == 3)) {
        libWCMI_gv_wM_NeedPylonFoodRequired = 1;
        libWCMI_gv_wM_NeedPylonFoodRequired3Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3_Init () {
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3 = TriggerCreate("libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3_Func");
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3, false);
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3, 1, "VoidRay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_PlayerNeedPylonButtonClicked (Food 4)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gv_wM_NeedPylonFoodRequired4Index += 1;
    lv_localIndex = libWCMI_gv_wM_NeedPylonFoodRequired4Index;
    libWCMI_gv_wM_NeedPylonFoodRequired = MaxI(libWCMI_gv_wM_NeedPylonFoodRequired, 4);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libWCMI_gv_wM_NeedPylonFoodRequired4Index) && (libWCMI_gv_wM_NeedPylonFoodRequired == 4)) {
        libWCMI_gv_wM_NeedPylonFoodRequired = 1;
        libWCMI_gv_wM_NeedPylonFoodRequired4Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4_Init () {
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4 = TriggerCreate("libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4_Func");
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4, false);
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4, 1, "Immortal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_PlayerNeedPylonButtonClicked (Food 6)
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gv_wM_NeedPylonFoodRequired6Index += 1;
    lv_localIndex = libWCMI_gv_wM_NeedPylonFoodRequired6Index;
    libWCMI_gv_wM_NeedPylonFoodRequired = MaxI(libWCMI_gv_wM_NeedPylonFoodRequired, 6);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libWCMI_gv_wM_NeedPylonFoodRequired6Index) && (libWCMI_gv_wM_NeedPylonFoodRequired == 6)) {
        libWCMI_gv_wM_NeedPylonFoodRequired = 1;
        libWCMI_gv_wM_NeedPylonFoodRequired6Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6_Init () {
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6 = TriggerCreate("libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6_Func");
    TriggerEnable(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6, false);
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6, 1, "Colossus");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6, 1, "Tempest");
    TriggerAddEventButtonPressed(libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6, 1, "Carrier");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_MissionTipClicked
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_MissionTipClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libWCMI_gv_wM_MissionHelpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWCMI_gv_wM_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlSetVisible(libWCMI_gv_wM_MissionHelpButtonTipPanel, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_MissionTipClicked_Init () {
    libWCMI_gt_WM_MissionTipClicked = TriggerCreate("libWCMI_gt_WM_MissionTipClicked_Func");
    TriggerEnable(libWCMI_gt_WM_MissionTipClicked, false);
    TriggerAddEventDialogControl(libWCMI_gt_WM_MissionTipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libWCMI_gv_wM_SendTransmissionCampaignIndex == 0) && (libWCMI_gv_wM_SendTransmissionCampaignPlayingTick > 0)) {
            libWCMI_gv_wM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_SendTransmissionCampaignTick_Init () {
    libWCMI_gt_WM_SendTransmissionCampaignTick = TriggerCreate("libWCMI_gt_WM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DamageStat_UnitTakesDamage
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DamageStat_UnitTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    string lv_sourceType;
    bool lv_totalModified;
    bool lv_encounterModified;

    // Automatic Variable Declarations
    const int autoF984ED6A_ae = libWCMI_gv_wMC_DamageStat_UnitTypeCount;
    int autoF984ED6A_var;

    // Variable Initialization
    lv_source = EventUnitDamageSourceUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() == 1))) {
            return false;
        }

        if (!((EventPlayer() != 1))) {
            return false;
        }

        if (!((lv_source != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sourceType = libWCMI_gf_WM_DamageStat_LeaderAlias(UnitGetType(lv_source));
    TimerStart(libWCMI_gv_wM_DamageStat_TimerEncounter, 5.0, false, c_timeGame);
    if ((TimerGetRemaining(libWCMI_gv_wM_DamageStat_TimerUI) <= 0.0)) {
        TimerStart(libWCMI_gv_wM_DamageStat_TimerUI, 0.2, false, c_timeReal);
    }

    TriggerEnable(libWCMI_gt_WM_DamageStat_EncounterSortPeriodic, true);
    autoF984ED6A_var = 1;
    for ( ; autoF984ED6A_var <= autoF984ED6A_ae; autoF984ED6A_var += 1 ) {
        if ((lv_totalModified == false) && ((libWCMI_gv_wM_DamageStat_Total[autoF984ED6A_var].lv_unitType == lv_sourceType) || (libWCMI_gv_wM_DamageStat_Total[autoF984ED6A_var].lv_unitType == null))) {
            libWCMI_gv_wM_DamageStat_Total[autoF984ED6A_var].lv_unitType = lv_sourceType;
            libWCMI_gv_wM_DamageStat_Total[autoF984ED6A_var].lv_damage += EventUnitDamageAmount();
            lv_totalModified = true;
        }

        if ((lv_encounterModified == false) && ((libWCMI_gv_wM_DamageStat_Encounter[autoF984ED6A_var].lv_unitType == lv_sourceType) || (libWCMI_gv_wM_DamageStat_Encounter[autoF984ED6A_var].lv_unitType == null))) {
            libWCMI_gv_wM_DamageStat_Encounter[autoF984ED6A_var].lv_unitType = lv_sourceType;
            libWCMI_gv_wM_DamageStat_Encounter[autoF984ED6A_var].lv_damage += EventUnitDamageAmount();
            lv_encounterModified = true;
        }

        if ((lv_totalModified == true) && (lv_encounterModified == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DamageStat_UnitTakesDamage_Init () {
    libWCMI_gt_WM_DamageStat_UnitTakesDamage = TriggerCreate("libWCMI_gt_WM_DamageStat_UnitTakesDamage_Func");
    TriggerAddEventUnitDamaged(libWCMI_gt_WM_DamageStat_UnitTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DamageStat_EncounterTimerExpires
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DamageStat_EncounterTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB626502D_ae = 25;
    int autoB626502D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libWCMI_gt_WM_DamageStat_EncounterSortPeriodic, false);
    autoB626502D_var = 1;
    for ( ; autoB626502D_var <= autoB626502D_ae; autoB626502D_var += 1 ) {
        libWCMI_gv_wM_DamageStat_Encounter[autoB626502D_var].lv_unitType = null;
        libWCMI_gv_wM_DamageStat_Encounter[autoB626502D_var].lv_damage = 0.0;
    }
    Kit_DamageStat_ShowHide(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DamageStat_EncounterTimerExpires_Init () {
    libWCMI_gt_WM_DamageStat_EncounterTimerExpires = TriggerCreate("libWCMI_gt_WM_DamageStat_EncounterTimerExpires_Func");
    TriggerAddEventTimer(libWCMI_gt_WM_DamageStat_EncounterTimerExpires, libWCMI_gv_wM_DamageStat_TimerEncounter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DamageStat_UITimerExpires
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DamageStat_UITimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Kit_DamageStat_Update(libWCMI_gv_wM_DamageStat_Encounter);
    Kit_DamageStat_ShowHide(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DamageStat_UITimerExpires_Init () {
    libWCMI_gt_WM_DamageStat_UITimerExpires = TriggerCreate("libWCMI_gt_WM_DamageStat_UITimerExpires_Func");
    TriggerAddEventTimer(libWCMI_gt_WM_DamageStat_UITimerExpires, libWCMI_gv_wM_DamageStat_TimerUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DamageStat_EncounterSortPeriodic
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DamageStat_EncounterSortPeriodic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_DamageStat_SortEncounter();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DamageStat_EncounterSortPeriodic_Init () {
    libWCMI_gt_WM_DamageStat_EncounterSortPeriodic = TriggerCreate("libWCMI_gt_WM_DamageStat_EncounterSortPeriodic_Func");
    TriggerEnable(libWCMI_gt_WM_DamageStat_EncounterSortPeriodic, false);
    TriggerAddEventTimePeriodic(libWCMI_gt_WM_DamageStat_EncounterSortPeriodic, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DropPod_Zerg_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DropPod_Zerg_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_DropPod_Zerg_Wait(libWCMI_gv_wM_DropPod_TP_Location, libWCMI_gv_wM_DropPod_TP_Units, libWCMI_gv_wM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DropPod_Zerg_DontWait_Init () {
    libWCMI_gt_WM_DropPod_Zerg_DontWait = TriggerCreate("libWCMI_gt_WM_DropPod_Zerg_DontWait_Func");
    TriggerEnable(libWCMI_gt_WM_DropPod_Zerg_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_DropPod_Terran_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_DropPod_Terran_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_DropPod_Terran_Wait(libWCMI_gv_wM_DropPod_TP_Location, libWCMI_gv_wM_DropPod_TP_Units, libWCMI_gv_wM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_DropPod_Terran_DontWait_Init () {
    libWCMI_gt_WM_DropPod_Terran_DontWait = TriggerCreate("libWCMI_gt_WM_DropPod_Terran_DontWait_Func");
    TriggerEnable(libWCMI_gt_WM_DropPod_Terran_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_CampaignUnit
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CampaignUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_CurrentMap(), c_mapKindMission) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = UnitGroupCount(autoD03D3C7E_g, c_unitCountAll);
    for (;; autoD03D3C7E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD03D3C7E_g, autoD03D3C7E_u);
        if (lv_indexUnit == null) { break; }
        if (((UnitGetOwner(lv_indexUnit) == 1) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            libWCMI_gf_WM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libWCMI_gt_WM_CampaignUnitCreated, true);
    TriggerEnable(libWCMI_gt_WM_CampaignUnitChangeOwner, true);
    TriggerEnable(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CampaignUnit_Init () {
    libWCMI_gt_WM_CampaignUnit = TriggerCreate("libWCMI_gt_WM_CampaignUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libWCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CampaignUnitCreated_Init () {
    libWCMI_gt_WM_CampaignUnitCreated = TriggerCreate("libWCMI_gt_WM_CampaignUnitCreated_Func");
    TriggerEnable(libWCMI_gt_WM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libWCMI_gt_WM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CampaignUnitChangeOwner_Init () {
    libWCMI_gt_WM_CampaignUnitChangeOwner = TriggerCreate("libWCMI_gt_WM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libWCMI_gt_WM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libWCMI_gt_WM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCMI_gf_WM_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_CampaignUnitInfoUnitMorphes_Init () {
    libWCMI_gt_WM_CampaignUnitInfoUnitMorphes = TriggerCreate("libWCMI_gt_WM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToOrbital", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SupplyDepotLower", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("SupplyDepotRaise", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("DropToSupplyDepot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("RefineryToAutomatedRefinery", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("UpgradeToWarpGate", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(libWCMI_gt_WM_CampaignUnitInfoUnitMorphes, null, AbilityCommand("MorphBackToGateway", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WM_UnitBeingRemoved
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_WM_UnitBeingRemoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal UnitRemoved");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_WM_UnitBeingRemoved_Init () {
    libWCMI_gt_WM_UnitBeingRemoved = TriggerCreate("libWCMI_gt_WM_UnitBeingRemoved_Func");
    TriggerAddEventUnitRemoved(libWCMI_gt_WM_UnitBeingRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Ping Sound
//--------------------------------------------------------------------------------------------------
bool libWCMI_gt_VoidPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCMI_gt_VoidPingSound_Init () {
    libWCMI_gt_VoidPingSound = TriggerCreate("libWCMI_gt_VoidPingSound_Func");
}

void libWCMI_InitTriggers () {
    libWCMI_gt_WM_CinematicModeOn_Init();
    libWCMI_gt_WM_CinematicModeOff_Init();
    libWCMI_gt_DiamondbackAttack_Init();
    libWCMI_gt_DiamondbackAttackScan_Init();
    libWCMI_gt_DiamondbackAttackStop_Init();
    libWCMI_gt_DiamondbackAttackChaseInterrupted_Init();
    libWCMI_gt_BattlecruiserAttack_Init();
    libWCMI_gt_BattlecruiserAttackScan_Init();
    libWCMI_gt_BattlecruiserAttackStop_Init();
    libWCMI_gt_BattlecruiserAttackAbilityUsed_Init();
    libWCMI_gt_BattlecruiserAttackChaseInterrupted_Init();
    libWCMI_gt_UltraCapacitors_Init();
    libWCMI_gt_VanadiumPlating_Init();
    libWCMI_gt_CellularReactor_Init();
    libWCMI_gt_RegenerativeBioSteel_Init();
    libWCMI_gt_AdvancedConstructionRefineryHack_Init();
    libWCMI_gt_AdvancedConstructionAuto_Init();
    libWCMI_gt_GlobalUpgrade_Init();
    libWCMI_gt_WM_HandleUseDeepShadows_Init();
    libWCMI_gt_WM_HandleUseAlarakAvatar_Init();
    libWCMI_gt_WM_HandleAlarakAvatarFinal_Init();
    libWCMI_gt_AlarakKnockback4_Init();
    libWCMI_gt_AlarakKnockback5_Init();
    libWCMI_gt_AlarakKnockback6_Init();
    libWCMI_gt_AlarakKnockback7_Init();
    libWCMI_gt_AlarakKnockback8_Init();
    libWCMI_gt_AlarakKnockback9_Init();
    libWCMI_gt_AlarakKnockback10_Init();
    libWCMI_gt_AlarakKnockback11_Init();
    libWCMI_gt_AlarakKnockback12_Init();
    libWCMI_gt_FenixCharge_Init();
    libWCMI_gt_KerriganPsiStrike_Init();
    libWCMI_gt_KerriganAstralShift_Init();
    libWCMI_gt_Extinction_Init();
    libWCMI_gt_StrikeAmon_Init();
    libWCMI_gt_AmonStrikeSelectionCheck_Init();
    libWCMI_gt_OracleWormhole_Init();
    libWCMI_gt_WM_GameCheat_CreateDialog_Init();
    libWCMI_gt_PS_GameCheat_CheckboxUsed_Init();
    libWCMI_gt_PS_GameCheat_CheatUsed_Init();
    libWCMI_gt_WM_MissionCheat_CreateDialog_Init();
    libWCMI_gt_WM_MissionCheat_ButtonClicked_Init();
    libWCMI_gt_WM_MissionCheat_CheatEntered_Init();
    libWCMI_gt_WM_DebugVictoryS_Init();
    libWCMI_gt_WM_ToggleFlyoverMode_Init();
    libWCMI_gt_WM_TurnOffFlyoverMode_Init();
    libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libWCMI_gt_WM_MissionVictoryCallbackBlockActionQueue_Init();
    libWCMI_gt_WM_AbortMission_Init();
    libWCMI_gt_WM_MissionEndsPlayerExit_Init();
    libWCMI_gt_WM_VictoryContinue_Init();
    libWCMI_gt_WM_VictoryQuit_Init();
    libWCMI_gt_WM_PlayerNeedPylon_Init();
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood2_Init();
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood3_Init();
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood4_Init();
    libWCMI_gt_WM_PlayerNeedPylonButtonClickedFood6_Init();
    libWCMI_gt_WM_MissionTipClicked_Init();
    libWCMI_gt_WM_SendTransmissionCampaignTick_Init();
    libWCMI_gt_WM_DamageStat_UnitTakesDamage_Init();
    libWCMI_gt_WM_DamageStat_EncounterTimerExpires_Init();
    libWCMI_gt_WM_DamageStat_UITimerExpires_Init();
    libWCMI_gt_WM_DamageStat_EncounterSortPeriodic_Init();
    libWCMI_gt_WM_DropPod_Zerg_DontWait_Init();
    libWCMI_gt_WM_DropPod_Terran_DontWait_Init();
    libWCMI_gt_WM_CampaignUnit_Init();
    libWCMI_gt_WM_CampaignUnitCreated_Init();
    libWCMI_gt_WM_CampaignUnitChangeOwner_Init();
    libWCMI_gt_WM_CampaignUnitInfoUnitMorphes_Init();
    libWCMI_gt_WM_UnitBeingRemoved_Init();
    libWCMI_gt_VoidPingSound_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libWCMI_InitLib_completed = false;

void libWCMI_InitLib () {
    if (libWCMI_InitLib_completed) {
        return;
    }

    libWCMI_InitLib_completed = true;

    libWCMI_InitLibraries();
    libWCMI_InitVariables();
    libWCMI_InitCustomScript();
    libWCMI_InitTriggers();
}

include "LibWoLC"
include "LibWCUI"

