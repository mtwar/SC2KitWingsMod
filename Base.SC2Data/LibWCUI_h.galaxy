include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: UI (WoL)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libWCUI_ge_WU_ArchivesType_Mission = 0;
const int libWCUI_ge_WU_ArchivesType_Scene = 1;
const int libWCUI_ge_SingularBossBarStyle_BossEnemy = 0;
const int libWCUI_ge_SingularBossBarStyle_Objective = 1;
const int libWCUI_ge_WU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog = 0;
const int libWCUI_ge_WU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel = 1;
const int libWCUI_ge_WU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label = 2;
const int libWCUI_ge_WU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value = 3;
const int libWCUI_ge_WU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar = 4;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_MinValue = 0;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_CurValue = 1;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_MaxValue = 2;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_OffsetX = 3;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_OffsetY = 4;
const int libWCUI_ge_WU_ProgressBarUnitStoredValuesOld_Attachment = 5;
const int libWCUI_ge_WU_UnitProgressBarDataName_MinValue = 0;
const int libWCUI_ge_WU_UnitProgressBarDataName_CurValue = 1;
const int libWCUI_ge_WU_UnitProgressBarDataName_MaxValue = 2;
const int libWCUI_ge_WU_UnitProgressBar_DialogTypes_ProgressBar_Label = 0;
const int libWCUI_ge_WU_UnitProgressBar_DialogTypes_ProgressBar_Value = 1;
const int libWCUI_ge_WU_UnitProgressBar_DialogTypes_ProgressBar_Bar = 2;
const int libWCUI_ge_WU_UnitProgressBar_DialogTypes_ProgressBar_Broder = 3;

// Constants
const string libWCUI_gv_wUC_TravelPanelEventMissionStarted = "WUC_TravelPanelEventMissionStarted";
const string libWCUI_gv_wUC_TravelPanelEventClosed = "WUC_TravelPanelEventClosed";
const string libWCUI_gv_pUC_SelectArmyEventUsed = "PUC_SelectArmyEventUsed";
const fixed libWCUI_gv_pUC_BB_HPBarWidth = 289.0;
const int libWCUI_gv_pUC_BB_HPBarHeight = 30;
const fixed libWCUI_gv_pUC_HealthWatchThreshold = 0.3;
const string libWCUI_gv_wUC_VictoryEventClosed = "WUC_VictoryEventClosed";

// Variable Declarations
trigger libWCUI_gv_wU_TechConsoleExitTrigger;
trigger libWCUI_gv_wU_MercenaryConsoleExitTrigger;
trigger libWCUI_gv_wU_ResearchConsoleExitTrigger;
int libWCUI_gv_wU_ArchivesPanel;
int libWCUI_gv_wU_ArchivesTitle;
int libWCUI_gv_wU_ArchivesBackButton;
int libWCUI_gv_wU_ArchivesQuitButton;
int libWCUI_gv_wU_ArchivesMissionPanel;
int libWCUI_gv_wU_ArchivesMissionTitle;
int libWCUI_gv_wU_ArchivesMissionBonusLabel;
int libWCUI_gv_wU_ArchivesMissionImage;
int libWCUI_gv_wU_ArchivesAchievementPanel;
int[4] libWCUI_gv_wU_ArchivesAchievements;
int libWCUI_gv_wU_ArchivesDifficultyPanel;
int[5] libWCUI_gv_wU_ArchivesDifficultyLabels;
int[5] libWCUI_gv_wU_ArchivesDifficultyTimes;
int libWCUI_gv_wU_ArchivesMissionPlayButton;
int libWCUI_gv_wU_ArchivesScenePanel;
int libWCUI_gv_wU_ArchivesSceneTitle;
int libWCUI_gv_wU_ArchivesSceneImage;
int libWCUI_gv_wU_ArchivesScenePlayButton;
int libWCUI_gv_wU_ArchivesLoadingDialog;
int libWCUI_gv_wU_ArchivesLoadingLabel;
bool libWCUI_gv_wU_MissionArchiveOverlayCreated;
bool libWCUI_gv_wU_ArchivesSynced;
bool libWCUI_gv_wU_MasterArchivesEnabled;
int libWCUI_gv_pUC_ArchivesMissionLoadingWidth;
int libWCUI_gv_pUC_ArchivesMissionLoadingHeight;
int libWCUI_gv_pUC_ArchivesMissionTargetWidth;
int libWCUI_gv_pUC_ArchivesMissionTargetHeight;
trigger libWCUI_gv_wU_ArchivesLogicExitTrigger;
trigger libWCUI_gv_wU_ArchivesLogicSceneFinishTrigger;
bool libWCUI_gv_wU_ArchivesLogicInitialized;
int libWCUI_gv_wU_ArmyButton;
int libWCUI_gv_wU_ArmyButtonTipPanel;
bool libWCUI_gv_wU_ArmyButtonUsed;
timer libWCUI_gv_wU_ArmyButtonTimer;
int libWCUI_gv_wU_DirectiveDialog;
int libWCUI_gv_wU_DirectivePanel;
int libWCUI_gv_wU_DirectiveLabel;
string libWCUI_gv_wU_BB_Portraits;
text libWCUI_gv_wU_BB_Title;
unit libWCUI_gv_wU_BB_Boss;
fixed libWCUI_gv_wU_BB_MaxValue;
fixed libWCUI_gv_wU_BB_CurrentValue;
int libWCUI_gv_wU_BB_HPOldWidth;
int libWCUI_gv_wU_BB_Style;
int libWCUI_gv_wU_BB_Panel;
int libWCUI_gv_wU_BB_ClickableAreaHealthBar;
int libWCUI_gv_wU_BB_ClickableAreaNameLabel;
int libWCUI_gv_wU_BB_TitleLabel;
int libWCUI_gv_wU_BB_HpLabel;
int libWCUI_gv_wU_BB_HpFullImage;
int libWCUI_gv_wU_BB_HpCurrentImage;
int libWCUI_gv_wU_BB_BossBG;
int libWCUI_gv_wU_BB_ObjectiveBG;
bool libWCUI_gv_wU_HealthWatchFlashing;
unit libWCUI_gv_wU_HealthWatchFlashingUnit;
int libWCUI_gv_wU_HealthWatchDialog;
int libWCUI_gv_wU_HealthWatchImage;
fixed[3] libWCUI_gv_wU_HealthWatchLastHP;
sound libWCUI_gv_wU_HealthWatchSoundStart;
sound libWCUI_gv_wU_HealthWatchSoundHeartbeat;
sound libWCUI_gv_wU_HealthWatchSoundBreath;
unit[3] libWCUI_gv_wU_HealthWatchUnit;
int libWCUI_gv_wU_ProgressBarPanel;
int libWCUI_gv_wU_ProgressBarLabelTitle;
int libWCUI_gv_wU_ProgressBarLabelBarLeft;
int libWCUI_gv_wU_ProgressBarImageBar;
int libWCUI_gv_wU_ProgressBarMax;
int libWCUI_gv_wU_ProgressBarMin;
int libWCUI_gv_wU_ProgressBarProgress;
bool libWCUI_gv_wU_ProgressBarShowing;
int libWCUI_gv_pUC_ProgressBarWidth;
int libWCUI_gv_pUC_ProgressBarHeight;
int libWCUI_gv_wU_UnitProgressBarPanel;
int libWCUI_gv_wU_TimerWindowHighlightFrame;
fixed libWCUI_gv_wU_TimerWindowHighlightDuration;
fixed libWCUI_gv_wU_TimerWindowDangerThreshold;
bool libWCUI_gv_wU_TimerWindowInDanger;
timer libWCUI_gv_wU_TimerWindowTimer;
int libWCUI_gv_wU_CounterWindowPanel;
int libWCUI_gv_wU_CounterWindowTitle;
int libWCUI_gv_wU_CounterWindowValue;

// Function Declarations
void libWCUI_gf_DisplayTechConsole (trigger lp_exitTrigger);
void libWCUI_gf_DisplayMercenaryConsole (trigger lp_exitTrigger);
void libWCUI_gf_DisplayResearchConsole (trigger lp_exitTrigger);
void libWCUI_gf_TravelPanelMissionStart (trigger t);
void libWCUI_gf_TravelPanelClosed (trigger t);
void libWCUI_gf_ShowHideTravelPanel (bool lp_showHide);
void libWCUI_gf_ShowHideTravelPanel2 (bool lp_showHide, string lp_mission);
string libWCUI_gf_WU_ArchivesDataString (int lp_missionarchive);
string libWCUI_gf_WU_ArchivesDataTypeString (int lp_missionarchive);
void libWCUI_gf_WU_ArchivesOverlayCreate ();
void libWCUI_gf_WU_ArchivesClosed ();
void libWCUI_gf_WU_ArchivesDisplay ();
string libWCUI_gf_WU_ArchivesLastMissionSelected ();
void libWCUI_gf_WU_ArchivesUpdate ();
int libWCUI_gf_WU_ArchivesScenePriority (string lp_scene);
int libWCUI_gf_WU_ArchivesSplitMissionPriority (string lp_mission, string lp_choiceA, string lp_choiceB);
int libWCUI_gf_WU_ArchivesMissionPriority (string lp_mission);
int libWCUI_gf_WU_ArchivesMissionIndex (string lp_map);
string libWCUI_gf_WU_ArchivesSelectedScene ();
void libWCUI_gf_WU_ArchivesSetUV (string lp_side, fixed lp_value);
void libWCUI_gf_WU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale);
void libWCUI_gf_DisplayArchives (trigger lp_exitTrigger, trigger lp_sceneFinishCallback);
void libWCUI_gf_DisplayArmyButton (bool lp_doDoNot);
void libWCUI_gf_WU_ArmyButtonHookup ();
void libWCUI_gf_ToggleArmyButtonFlashing (bool lp_onOff);
void libWCUI_gf_SelectArmyButtonUsed (trigger t);
void libWCUI_gf_DisplayCampaignDirective (text lp_directiveText);
void libWCUI_gf_HideCampaignDirective ();
void libWCUI_gf_WU_DirectiveInit ();
int libWCUI_gf_WU_BB_HPBarCurrentWidth ();
text libWCUI_gf_WU_BB_HPBarFormatLabel ();
void libWCUI_gf_WU_BB_HPBarChange ();
void libWCUI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max);
void libWCUI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh);
void libWCUI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh);
void libWCUI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh);
void libWCUI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide);
void libWCUI_gf_RefreshSingularBossBarVoidCampaign ();
void libWCUI_gf_SetSingularBossBarColor (color lp_color);
void libWCUI_gf_SetSingularBossBarTitleColor (color lp_color);
void libWCUI_gf_SetSingularBossBarStyle (int lp_style);
void libWCUI_gf_EnableLowHealthWarning (int lp_slotIndex, unit lp_watchedUnit);
void libWCUI_gf_WU_HealthWatchCreate ();
bool libWCUI_gf_WU_HealthWatchUnitBelowThreshold (unit lp_watchUnit);
void libWCUI_gf_PM_StopHeroLowHPSound ();
void libWCUI_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void libWCUI_gf_SetProgressBarTitle (text lp_title);
void libWCUI_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void libWCUI_gf_SetProgressBarLabel (text lp_label);
void libWCUI_gf_SetProgressBarProgress (int lp_progress);
void libWCUI_gf_SetProgressBarColor (color lp_color);
void libWCUI_gf_ShowHideProgressBar (bool lp_showHide);
void libWCUI_gf_WU_UpdateProgressBar ();
color libWCUI_gf_GetProgressBarColorCampaign ();
void libWCUI_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment);
void libWCUI_gf_DestroyProgressBarUnitOld (unit lp_unit);
void libWCUI_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value);
void libWCUI_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY);
void libWCUI_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText);
void libWCUI_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue);
void libWCUI_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide);
void libWCUI_gf_WU_UpdateProgressBarUnitOld (unit lp_unit);
string libWCUI_gf_WU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type);
string libWCUI_gf_WU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type);
void libWCUI_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue);
void libWCUI_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value);
void libWCUI_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText);
void libWCUI_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue);
void libWCUI_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide);
void libWCUI_gf_WU_UpdateUnitProgressBar (unit lp_unit);
string libWCUI_gf_WU_UnitProgressBar_Data (unit lp_unit, int lp_type);
string libWCUI_gf_WU_UnitProgressBar_Dialog (unit lp_unit, int lp_type);
void libWCUI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed);
void libWCUI_gf_RepositionTimerWindow (int lp_timerWindow);
void libWCUI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption);
void libWCUI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime);
void libWCUI_gf_WU_CounterWindowHookup ();
void libWCUI_gf_DisplayCounterWindow (text lp_title);
void libWCUI_gf_ShowHideCounterWindow (bool lp_showHide);
void libWCUI_gf_SetCounterWindowTitle (text lp_title);
void libWCUI_gf_SetCounterWindowText (text lp_text);
void libWCUI_gf_SetCounterWindowValue (int lp_value);
void libWCUI_gf_WU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon);
void libWCUI_gf_DisplayCampaignVictoryScoreScreen (string lp_mission);
void libWCUI_gf_WU_VictoryClosed (trigger t);
color libWCUI_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps);

// Trigger Declarations
trigger libWCUI_gt_WU_TechConsoleOnExit;
trigger libWCUI_gt_WU_MercenaryOnExit;
trigger libWCUI_gt_WU_ResearchOnExit;
trigger libWCUI_gt_TravelPanelCmapignEvent1;
trigger libWCUI_gt_TravelPanelCmapignEvent2;
trigger libWCUI_gt_WU_ArchivesCreate;
trigger libWCUI_gt_WU_ArchivesSelectionChanged;
trigger libWCUI_gt_WU_ArchivesMissionPlayClicked;
trigger libWCUI_gt_WU_ArchivesScenePlayClicked;
trigger libWCUI_gt_WU_ArchivesCloseClicked;
trigger libWCUI_gt_WU_ArchivesSynced;
trigger libWCUI_gt_WU_ArchivesLogicPlayMission;
trigger libWCUI_gt_WU_ArchivesLogicPlayCinematic;
trigger libWCUI_gt_WU_ArchivesLogicQuit;
trigger libWCUI_gt_WU_ArchivesLogicMissionLaunch;
trigger libWCUI_gt_WU_ArchivesLogicMissionQuit;
trigger libWCUI_gt_WU_FlashArmyButtonHelpTip;
trigger libWCUI_gt_WU_ArmyButtonUsed;
trigger libWCUI_gt_WU_ArmyButtonFlashingOff;
trigger libWCUI_gt_PS_ArmyButtonMissionInit;
trigger libWCUI_gt_WU_BossBarFocusOnTarget;
trigger libWCUI_gt_WU_BB_BossHPChanged;
trigger libWCUI_gt_WU_BB_LoadUpdate;
trigger libWCUI_gt_WU_HealthWatchLifeCheck;
trigger libWCUI_gt_WU_HealthWatchUnitDies;
trigger libWCUI_gt_WU_HealthWatchFlash;
trigger libWCUI_gt_WU_HealthWatchStartSound;
trigger libWCUI_gt_WU_HealthWatchHeartLoop;
trigger libWCUI_gt_WU_HealthWatchBreathLoop;
trigger libWCUI_gt_WU_TimerWindowFlash;
trigger libWCUI_gt_WU_TimerWindowThresholdCrossed;
trigger libWCUI_gt_WU_TimerWindowLoadUpdate;

// Library Initialization
void libWCUI_InitVariables ();

